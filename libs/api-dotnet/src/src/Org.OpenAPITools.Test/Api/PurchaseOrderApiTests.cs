/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing PurchaseOrderApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PurchaseOrderApiTests : IDisposable
    {
        private PurchaseOrderApi instance;

        public PurchaseOrderApiTests()
        {
            instance = new PurchaseOrderApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PurchaseOrderApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PurchaseOrderApi
            //Assert.IsType<PurchaseOrderApi>(instance);
        }

        /// <summary>
        /// Test PurchaseOrderActorCreate
        /// </summary>
        [Fact]
        public void PurchaseOrderActorCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string culture = null;
            //SimpleDocument simpleDocument = null;
            //var response = instance.PurchaseOrderActorCreate(culture, simpleDocument);
            //Assert.IsType<MessageSent>(response);
        }

        /// <summary>
        /// Test PurchaseOrderActorCreateInline
        /// </summary>
        [Fact]
        public void PurchaseOrderActorCreateInlineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string culture = null;
            //InlineDocument inlineDocument = null;
            //var response = instance.PurchaseOrderActorCreateInline(culture, inlineDocument);
            //Assert.IsType<MessageSent>(response);
        }

        /// <summary>
        /// Test PurchaseOrderChangeStatusByKey
        /// </summary>
        [Fact]
        public void PurchaseOrderChangeStatusByKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long documentId = null;
            //string statusKey = null;
            //string culture = null;
            //var response = instance.PurchaseOrderChangeStatusByKey(documentId, statusKey, culture);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test PurchaseOrderDelete
        /// </summary>
        [Fact]
        public void PurchaseOrderDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string culture = null;
            //var response = instance.PurchaseOrderDelete(id, culture);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test PurchaseOrderDetails
        /// </summary>
        [Fact]
        public void PurchaseOrderDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string culture = null;
            //var response = instance.PurchaseOrderDetails(id, culture);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test PurchaseOrderEdit
        /// </summary>
        [Fact]
        public void PurchaseOrderEditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string culture = null;
            //SimpleDocument simpleDocument = null;
            //var response = instance.PurchaseOrderEdit(id, culture, simpleDocument);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test PurchaseOrderEdit2
        /// </summary>
        [Fact]
        public void PurchaseOrderEdit2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string culture = null;
            //InlineDocument inlineDocument = null;
            //var response = instance.PurchaseOrderEdit2(id, culture, inlineDocument);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test PurchaseOrderIndex
        /// </summary>
        [Fact]
        public void PurchaseOrderIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string culture = null;
            //string sortBy = null;
            //string currentPage = null;
            //string pageSize = null;
            //string filter = null;
            //string searchString = null;
            //string customDocumentModels = null;
            //string range = null;
            //string month = null;
            //string year = null;
            //string startDate = null;
            //string endDate = null;
            //var response = instance.PurchaseOrderIndex(culture, sortBy, currentPage, pageSize, filter, searchString, customDocumentModels, range, month, year, startDate, endDate);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test PurchaseOrderReceivePayment
        /// </summary>
        [Fact]
        public void PurchaseOrderReceivePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string culture = null;
            //PaymentModel paymentModel = null;
            //var response = instance.PurchaseOrderReceivePayment(id, culture, paymentModel);
            //Assert.IsType<System.IO.Stream>(response);
        }
    }
}

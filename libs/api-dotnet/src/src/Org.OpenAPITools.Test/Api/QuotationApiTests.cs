/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing QuotationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class QuotationApiTests : IDisposable
    {
        private QuotationApi instance;

        public QuotationApiTests()
        {
            instance = new QuotationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of QuotationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' QuotationApi
            //Assert.IsType<QuotationApi>(instance);
        }

        /// <summary>
        /// Test QuotationActorCreate
        /// </summary>
        [Fact]
        public void QuotationActorCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string culture = null;
            //SimpleDocument simpleDocument = null;
            //var response = instance.QuotationActorCreate(culture, simpleDocument);
            //Assert.IsType<MessageSent>(response);
        }

        /// <summary>
        /// Test QuotationActorCreateInline
        /// </summary>
        [Fact]
        public void QuotationActorCreateInlineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string culture = null;
            //InlineDocument inlineDocument = null;
            //var response = instance.QuotationActorCreateInline(culture, inlineDocument);
            //Assert.IsType<MessageSent>(response);
        }

        /// <summary>
        /// Test QuotationChangeStatusByKey
        /// </summary>
        [Fact]
        public void QuotationChangeStatusByKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long documentId = null;
            //string statusKey = null;
            //string culture = null;
            //var response = instance.QuotationChangeStatusByKey(documentId, statusKey, culture);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test QuotationCreatePartialManualPayall
        /// </summary>
        [Fact]
        public void QuotationCreatePartialManualPayallTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string culture = null;
            //var response = instance.QuotationCreatePartialManualPayall(id, culture);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test QuotationDelete
        /// </summary>
        [Fact]
        public void QuotationDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string culture = null;
            //var response = instance.QuotationDelete(id, culture);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test QuotationDetails
        /// </summary>
        [Fact]
        public void QuotationDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string culture = null;
            //var response = instance.QuotationDetails(id, culture);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test QuotationEdit
        /// </summary>
        [Fact]
        public void QuotationEditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string culture = null;
            //SimpleDocument simpleDocument = null;
            //var response = instance.QuotationEdit(id, culture, simpleDocument);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test QuotationEdit2
        /// </summary>
        [Fact]
        public void QuotationEdit2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string culture = null;
            //InlineDocument inlineDocument = null;
            //var response = instance.QuotationEdit2(id, culture, inlineDocument);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test QuotationIndex
        /// </summary>
        [Fact]
        public void QuotationIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string culture = null;
            //string sortBy = null;
            //string currentPage = null;
            //string pageSize = null;
            //string filter = null;
            //string searchString = null;
            //string customDocumentModels = null;
            //string range = null;
            //string month = null;
            //string year = null;
            //string startDate = null;
            //string endDate = null;
            //var response = instance.QuotationIndex(culture, sortBy, currentPage, pageSize, filter, searchString, customDocumentModels, range, month, year, startDate, endDate);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test QuotationPartialManualCancel
        /// </summary>
        [Fact]
        public void QuotationPartialManualCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string culture = null;
            //var response = instance.QuotationPartialManualCancel(id, culture);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test QuotationReceivePayment
        /// </summary>
        [Fact]
        public void QuotationReceivePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string culture = null;
            //PaymentModel paymentModel = null;
            //var response = instance.QuotationReceivePayment(id, culture, paymentModel);
            //Assert.IsType<System.IO.Stream>(response);
        }
    }
}

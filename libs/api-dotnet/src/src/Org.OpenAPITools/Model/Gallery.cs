/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Gallery
    /// </summary>
    [DataContract(Name = "Gallery")]
    public partial class Gallery : IEquatable<Gallery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Gallery" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="productList">productList.</param>
        /// <param name="media">media.</param>
        /// <param name="journalEntry">journalEntry.</param>
        /// <param name="receivableInvoice">receivableInvoice.</param>
        /// <param name="supplierInvoice">supplierInvoice.</param>
        public Gallery(long id = default(long), string name = default(string), string description = default(string), List<ProductList> productList = default(List<ProductList>), List<Media> media = default(List<Media>), List<JournalEntry> journalEntry = default(List<JournalEntry>), List<ReceivableInvoice> receivableInvoice = default(List<ReceivableInvoice>), List<SupplierInvoice> supplierInvoice = default(List<SupplierInvoice>))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.ProductList = productList;
            this.Media = media;
            this.JournalEntry = journalEntry;
            this.ReceivableInvoice = receivableInvoice;
            this.SupplierInvoice = supplierInvoice;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ProductList
        /// </summary>
        [DataMember(Name = "productList", EmitDefaultValue = true)]
        public List<ProductList> ProductList { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = true)]
        public List<Media> Media { get; set; }

        /// <summary>
        /// Gets or Sets JournalEntry
        /// </summary>
        [DataMember(Name = "journalEntry", EmitDefaultValue = true)]
        public List<JournalEntry> JournalEntry { get; set; }

        /// <summary>
        /// Gets or Sets ReceivableInvoice
        /// </summary>
        [DataMember(Name = "receivableInvoice", EmitDefaultValue = true)]
        public List<ReceivableInvoice> ReceivableInvoice { get; set; }

        /// <summary>
        /// Gets or Sets SupplierInvoice
        /// </summary>
        [DataMember(Name = "supplierInvoice", EmitDefaultValue = true)]
        public List<SupplierInvoice> SupplierInvoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Gallery {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProductList: ").Append(ProductList).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  JournalEntry: ").Append(JournalEntry).Append("\n");
            sb.Append("  ReceivableInvoice: ").Append(ReceivableInvoice).Append("\n");
            sb.Append("  SupplierInvoice: ").Append(SupplierInvoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Gallery);
        }

        /// <summary>
        /// Returns true if Gallery instances are equal
        /// </summary>
        /// <param name="input">Instance of Gallery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Gallery input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ProductList == input.ProductList ||
                    this.ProductList != null &&
                    input.ProductList != null &&
                    this.ProductList.SequenceEqual(input.ProductList)
                ) && 
                (
                    this.Media == input.Media ||
                    this.Media != null &&
                    input.Media != null &&
                    this.Media.SequenceEqual(input.Media)
                ) && 
                (
                    this.JournalEntry == input.JournalEntry ||
                    this.JournalEntry != null &&
                    input.JournalEntry != null &&
                    this.JournalEntry.SequenceEqual(input.JournalEntry)
                ) && 
                (
                    this.ReceivableInvoice == input.ReceivableInvoice ||
                    this.ReceivableInvoice != null &&
                    input.ReceivableInvoice != null &&
                    this.ReceivableInvoice.SequenceEqual(input.ReceivableInvoice)
                ) && 
                (
                    this.SupplierInvoice == input.SupplierInvoice ||
                    this.SupplierInvoice != null &&
                    input.SupplierInvoice != null &&
                    this.SupplierInvoice.SequenceEqual(input.SupplierInvoice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ProductList != null)
                {
                    hashCode = (hashCode * 59) + this.ProductList.GetHashCode();
                }
                if (this.Media != null)
                {
                    hashCode = (hashCode * 59) + this.Media.GetHashCode();
                }
                if (this.JournalEntry != null)
                {
                    hashCode = (hashCode * 59) + this.JournalEntry.GetHashCode();
                }
                if (this.ReceivableInvoice != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivableInvoice.GetHashCode();
                }
                if (this.SupplierInvoice != null)
                {
                    hashCode = (hashCode * 59) + this.SupplierInvoice.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 255.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            yield break;
        }
    }

}

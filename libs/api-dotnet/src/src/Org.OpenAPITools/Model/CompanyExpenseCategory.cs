/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CompanyExpenseCategory
    /// </summary>
    [DataContract(Name = "CompanyExpenseCategory")]
    public partial class CompanyExpenseCategory : IEquatable<CompanyExpenseCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyExpenseCategory" /> class.
        /// </summary>
        /// <param name="companyId">companyId.</param>
        /// <param name="expenseCategoryId">expenseCategoryId.</param>
        /// <param name="company">company.</param>
        /// <param name="expenseCategory">expenseCategory.</param>
        public CompanyExpenseCategory(long companyId = default(long), long expenseCategoryId = default(long), OneOfCompany company = default(OneOfCompany), OneOfExpenseCategory expenseCategory = default(OneOfExpenseCategory))
        {
            this.CompanyId = companyId;
            this.ExpenseCategoryId = expenseCategoryId;
            this.Company = company;
            this.ExpenseCategory = expenseCategory;
        }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseCategoryId
        /// </summary>
        [DataMember(Name = "expenseCategoryId", EmitDefaultValue = false)]
        public long ExpenseCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public OneOfCompany Company { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseCategory
        /// </summary>
        [DataMember(Name = "expenseCategory", EmitDefaultValue = true)]
        public OneOfExpenseCategory ExpenseCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyExpenseCategory {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  ExpenseCategoryId: ").Append(ExpenseCategoryId).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  ExpenseCategory: ").Append(ExpenseCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyExpenseCategory);
        }

        /// <summary>
        /// Returns true if CompanyExpenseCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyExpenseCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyExpenseCategory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.ExpenseCategoryId == input.ExpenseCategoryId ||
                    this.ExpenseCategoryId.Equals(input.ExpenseCategoryId)
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.ExpenseCategory == input.ExpenseCategory ||
                    (this.ExpenseCategory != null &&
                    this.ExpenseCategory.Equals(input.ExpenseCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpenseCategoryId.GetHashCode();
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.ExpenseCategory != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseCategory.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

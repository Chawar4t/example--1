/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExpenseListAllOf
    /// </summary>
    [DataContract(Name = "ExpenseList_allOf")]
    public partial class ExpenseListAllOf : IEquatable<ExpenseListAllOf>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public ExpenseStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets RuleCompileStatus
        /// </summary>
        [DataMember(Name = "ruleCompileStatus", EmitDefaultValue = false)]
        public RuleCompileStatus? RuleCompileStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseListAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExpenseListAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseListAllOf" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="vendorCompanyId">vendorCompanyId.</param>
        /// <param name="companyId">companyId.</param>
        /// <param name="status">status.</param>
        /// <param name="receiptImage">receiptImage.</param>
        /// <param name="value">value.</param>
        /// <param name="description">description.</param>
        /// <param name="expenseCategoryId">expenseCategoryId.</param>
        /// <param name="documentSerial">documentSerial.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="publishedOn">publishedOn.</param>
        /// <param name="expenseDate">expenseDate.</param>
        /// <param name="documentDate">documentDate.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="modifiedOn">modifiedOn.</param>
        /// <param name="published">published.</param>
        /// <param name="approved">approved.</param>
        /// <param name="approvedBy">approvedBy.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="isTax">isTax.</param>
        /// <param name="isDelete">isDelete.</param>
        /// <param name="taxRefundable">taxRefundable.</param>
        /// <param name="galleryId">galleryId.</param>
        /// <param name="reconciled">reconciled.</param>
        /// <param name="nullableContactId">nullableContactId.</param>
        /// <param name="bankAccountNumber">bankAccountNumber.</param>
        /// <param name="isVatInclusive">isVatInclusive.</param>
        /// <param name="methodPayment">methodPayment.</param>
        /// <param name="vendorName">vendorName.</param>
        /// <param name="addressLocal">addressLocal.</param>
        /// <param name="addressLocalLine2">addressLocalLine2.</param>
        /// <param name="addressLocalLine3">addressLocalLine3.</param>
        /// <param name="companyTaxId">companyTaxId.</param>
        /// <param name="branch">branch.</param>
        /// <param name="vatRate">vatRate.</param>
        /// <param name="tax">tax.</param>
        /// <param name="valueIncludeVat">valueIncludeVat.</param>
        /// <param name="vatAmount">vatAmount.</param>
        /// <param name="documentSerialNoPrefix">documentSerialNoPrefix.</param>
        /// <param name="withholding">withholding.</param>
        /// <param name="charge">charge.</param>
        /// <param name="datePayment">datePayment.</param>
        /// <param name="checkNumber">checkNumber.</param>
        /// <param name="checkBankId">checkBankId.</param>
        /// <param name="checkDatePaid">checkDatePaid.</param>
        /// <param name="transferBankId">transferBankId.</param>
        /// <param name="collected">collected (required) (default to 0M).</param>
        /// <param name="outstanding">outstanding (required) (default to 0M).</param>
        /// <param name="paymentWithHeld">paymentWithHeld (required) (default to 0M).</param>
        /// <param name="resetTransactionId">resetTransactionId.</param>
        /// <param name="bankAccountId">bankAccountId.</param>
        /// <param name="ruleCompileStatus">ruleCompileStatus.</param>
        /// <param name="remainingCollected">remainingCollected.</param>
        /// <param name="remainingCollectedType">remainingCollectedType.</param>
        /// <param name="company">company.</param>
        /// <param name="vendorCompany">vendorCompany.</param>
        /// <param name="expenseCategory">expenseCategory.</param>
        /// <param name="gallery">gallery.</param>
        /// <param name="contact">contact.</param>
        /// <param name="runningNumberType">runningNumberType.</param>
        /// <param name="runningModifiedOn">runningModifiedOn.</param>
        /// <param name="isForeignCurrency">isForeignCurrency.</param>
        /// <param name="foreignCurrency">foreignCurrency.</param>
        /// <param name="exchangeRate">exchangeRate.</param>
        /// <param name="foreignValue">foreignValue.</param>
        /// <param name="exemptAmount">exemptAmount.</param>
        /// <param name="vatableAmount">vatableAmount.</param>
        /// <param name="totalAfterDiscount">totalAfterDiscount.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="subTotal">subTotal.</param>
        /// <param name="payrollDetail">payrollDetail.</param>
        /// <param name="batchTaxFilingId">batchTaxFilingId.</param>
        /// <param name="batchTaxFiling">batchTaxFiling.</param>
        /// <param name="supplierInvoiceStatus">supplierInvoiceStatus.</param>
        /// <param name="saleAndPurchaseChannel">saleAndPurchaseChannel.</param>
        /// <param name="pettyCashName">pettyCashName.</param>
        /// <param name="pettyCashId">pettyCashId.</param>
        /// <param name="chequeId">chequeId.</param>
        /// <param name="creditCardId">creditCardId.</param>
        /// <param name="otherChannelId">otherChannelId.</param>
        /// <param name="chequeCashingDate">chequeCashingDate.</param>
        /// <param name="autoCreateWithholdingTax">autoCreateWithholdingTax.</param>
        /// <param name="withholdingTaxIncomeType">withholdingTaxIncomeType.</param>
        /// <param name="withholdingTaxIncomeDescription">withholdingTaxIncomeDescription.</param>
        /// <param name="withholdingTaxEntity">withholdingTaxEntity.</param>
        /// <param name="exchangeRatio">exchangeRatio.</param>
        /// <param name="isManualRate">isManualRate.</param>
        /// <param name="exchangeRateDate">exchangeRateDate.</param>
        /// <param name="companyCurrencyId">companyCurrencyId.</param>
        /// <param name="foreignInlineVatValue">foreignInlineVatValue.</param>
        /// <param name="foreignInlineDiscountValue">foreignInlineDiscountValue.</param>
        /// <param name="foreignVatAmount">foreignVatAmount.</param>
        /// <param name="foreignDeductionAmount">foreignDeductionAmount.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="isManualVat">isManualVat.</param>
        /// <param name="externalDocumentId">externalDocumentId.</param>
        /// <param name="batchId">batchId.</param>
        /// <param name="documentReferences">documentReferences.</param>
        /// <param name="referencedToMe">referencedToMe.</param>
        /// <param name="referencedByMe">referencedByMe.</param>
        /// <param name="statusInt">statusInt.</param>
        /// <param name="partialPaymentMethod">partialPaymentMethod.</param>
        /// <param name="refDocumentStatus">refDocumentStatus.</param>
        /// <param name="refDocumentStatusString">refDocumentStatusString.</param>
        /// <param name="isReCalculate">isReCalculate.</param>
        /// <param name="inlineVatValue">inlineVatValue.</param>
        /// <param name="inlineDiscountValue">inlineDiscountValue.</param>
        /// <param name="isMigrate">isMigrate.</param>
        /// <param name="vatValue">vatValue.</param>
        /// <param name="deductionAmount">deductionAmount.</param>
        /// <param name="paymentDeductionType">paymentDeductionType.</param>
        /// <param name="documentDeductionType">documentDeductionType.</param>
        /// <param name="isInlineDiscount">isInlineDiscount.</param>
        /// <param name="isInlineVat">isInlineVat.</param>
        /// <param name="contactId">contactId.</param>
        /// <param name="valueExcludeVat">valueExcludeVat.</param>
        /// <param name="roundingAdjustment">roundingAdjustment.</param>
        /// <param name="name">name.</param>
        /// <param name="internalNotes">internalNotes.</param>
        /// <param name="projectName">projectName.</param>
        /// <param name="projectNameAndProjectDeatil">projectNameAndProjectDeatil.</param>
        public ExpenseListAllOf(long id = default(long), long? vendorCompanyId = default(long?), long companyId = default(long), ExpenseStatus? status = default(ExpenseStatus?), string receiptImage = default(string), decimal value = default(decimal), string description = default(string), long expenseCategoryId = default(long), string documentSerial = default(string), string documentId = default(string), DateTime publishedOn = default(DateTime), DateTime expenseDate = default(DateTime), DateTime documentDate = default(DateTime), DateTime createdOn = default(DateTime), long createdBy = default(long), DateTime modifiedOn = default(DateTime), bool published = default(bool), bool approved = default(bool), long approvedBy = default(long), string remarks = default(string), bool isTax = default(bool), bool isDelete = default(bool), bool taxRefundable = default(bool), long? galleryId = default(long?), bool reconciled = default(bool), long? nullableContactId = default(long?), string bankAccountNumber = default(string), bool isVatInclusive = default(bool), OneOfPaymentMethod methodPayment = default(OneOfPaymentMethod), string vendorName = default(string), string addressLocal = default(string), string addressLocalLine2 = default(string), string addressLocalLine3 = default(string), string companyTaxId = default(string), string branch = default(string), int vatRate = default(int), decimal? tax = default(decimal?), decimal valueIncludeVat = default(decimal), decimal? vatAmount = default(decimal?), long? documentSerialNoPrefix = default(long?), int? withholding = default(int?), decimal? charge = default(decimal?), DateTime? datePayment = default(DateTime?), string checkNumber = default(string), string checkBankId = default(string), DateTime? checkDatePaid = default(DateTime?), string transferBankId = default(string), decimal collected = 0M, decimal outstanding = 0M, decimal paymentWithHeld = 0M, long? resetTransactionId = default(long?), long? bankAccountId = default(long?), RuleCompileStatus? ruleCompileStatus = default(RuleCompileStatus?), decimal? remainingCollected = default(decimal?), OneOfRemainingCollectedType remainingCollectedType = default(OneOfRemainingCollectedType), OneOfCompany company = default(OneOfCompany), OneOfCompany vendorCompany = default(OneOfCompany), OneOfExpenseCategory expenseCategory = default(OneOfExpenseCategory), OneOfGallery gallery = default(OneOfGallery), OneOfContact contact = default(OneOfContact), int runningNumberType = default(int), DateTime? runningModifiedOn = default(DateTime?), bool isForeignCurrency = default(bool), OneOfCurrency foreignCurrency = default(OneOfCurrency), decimal? exchangeRate = default(decimal?), decimal? foreignValue = default(decimal?), decimal exemptAmount = default(decimal), decimal vatableAmount = default(decimal), decimal totalAfterDiscount = default(decimal), DateTime? dueDate = default(DateTime?), decimal subTotal = default(decimal), List<PayrollDetail> payrollDetail = default(List<PayrollDetail>), long? batchTaxFilingId = default(long?), OneOfBatchTaxFiling batchTaxFiling = default(OneOfBatchTaxFiling), OneOfSupplierInvoiceStatus supplierInvoiceStatus = default(OneOfSupplierInvoiceStatus), string saleAndPurchaseChannel = default(string), string pettyCashName = default(string), long? pettyCashId = default(long?), long? chequeId = default(long?), long? creditCardId = default(long?), long? otherChannelId = default(long?), DateTime? chequeCashingDate = default(DateTime?), bool? autoCreateWithholdingTax = default(bool?), OneOfIncomeType withholdingTaxIncomeType = default(OneOfIncomeType), string withholdingTaxIncomeDescription = default(string), OneOfEntity withholdingTaxEntity = default(OneOfEntity), decimal? exchangeRatio = default(decimal?), bool? isManualRate = default(bool?), DateTime? exchangeRateDate = default(DateTime?), long? companyCurrencyId = default(long?), decimal? foreignInlineVatValue = default(decimal?), decimal? foreignInlineDiscountValue = default(decimal?), decimal? foreignVatAmount = default(decimal?), decimal? foreignDeductionAmount = default(decimal?), long? projectId = default(long?), bool? isManualVat = default(bool?), string externalDocumentId = default(string), string batchId = default(string), List<IDocumentReference> documentReferences = default(List<IDocumentReference>), List<IDocumentReference> referencedToMe = default(List<IDocumentReference>), List<IDocumentReference> referencedByMe = default(List<IDocumentReference>), int statusInt = default(int), OneOfPartialPaymentMethod partialPaymentMethod = default(OneOfPartialPaymentMethod), int refDocumentStatus = default(int), string refDocumentStatusString = default(string), bool isReCalculate = default(bool), decimal inlineVatValue = default(decimal), decimal inlineDiscountValue = default(decimal), bool isMigrate = default(bool), decimal? vatValue = default(decimal?), decimal? deductionAmount = default(decimal?), OneOfDeductionType paymentDeductionType = default(OneOfDeductionType), OneOfDeductionType documentDeductionType = default(OneOfDeductionType), bool isInlineDiscount = default(bool), bool isInlineVat = default(bool), long contactId = default(long), decimal valueExcludeVat = default(decimal), decimal roundingAdjustment = default(decimal), string name = default(string), string internalNotes = default(string), string projectName = default(string), string projectNameAndProjectDeatil = default(string))
        {
            this.Collected = collected;
            this.Outstanding = outstanding;
            this.PaymentWithHeld = paymentWithHeld;
            this.Id = id;
            this.VendorCompanyId = vendorCompanyId;
            this.CompanyId = companyId;
            this.Status = status;
            this.ReceiptImage = receiptImage;
            this.Value = value;
            this.Description = description;
            this.ExpenseCategoryId = expenseCategoryId;
            this.DocumentSerial = documentSerial;
            this.DocumentId = documentId;
            this.PublishedOn = publishedOn;
            this.ExpenseDate = expenseDate;
            this.DocumentDate = documentDate;
            this.CreatedOn = createdOn;
            this.CreatedBy = createdBy;
            this.ModifiedOn = modifiedOn;
            this.Published = published;
            this.Approved = approved;
            this.ApprovedBy = approvedBy;
            this.Remarks = remarks;
            this.IsTax = isTax;
            this.IsDelete = isDelete;
            this.TaxRefundable = taxRefundable;
            this.GalleryId = galleryId;
            this.Reconciled = reconciled;
            this.NullableContactId = nullableContactId;
            this.BankAccountNumber = bankAccountNumber;
            this.IsVatInclusive = isVatInclusive;
            this.MethodPayment = methodPayment;
            this.VendorName = vendorName;
            this.AddressLocal = addressLocal;
            this.AddressLocalLine2 = addressLocalLine2;
            this.AddressLocalLine3 = addressLocalLine3;
            this.CompanyTaxId = companyTaxId;
            this.Branch = branch;
            this.VatRate = vatRate;
            this.Tax = tax;
            this.ValueIncludeVat = valueIncludeVat;
            this.VatAmount = vatAmount;
            this.DocumentSerialNoPrefix = documentSerialNoPrefix;
            this.Withholding = withholding;
            this.Charge = charge;
            this.DatePayment = datePayment;
            this.CheckNumber = checkNumber;
            this.CheckBankId = checkBankId;
            this.CheckDatePaid = checkDatePaid;
            this.TransferBankId = transferBankId;
            this.ResetTransactionId = resetTransactionId;
            this.BankAccountId = bankAccountId;
            this.RuleCompileStatus = ruleCompileStatus;
            this.RemainingCollected = remainingCollected;
            this.RemainingCollectedType = remainingCollectedType;
            this.Company = company;
            this.VendorCompany = vendorCompany;
            this.ExpenseCategory = expenseCategory;
            this.Gallery = gallery;
            this.Contact = contact;
            this.RunningNumberType = runningNumberType;
            this.RunningModifiedOn = runningModifiedOn;
            this.IsForeignCurrency = isForeignCurrency;
            this.ForeignCurrency = foreignCurrency;
            this.ExchangeRate = exchangeRate;
            this.ForeignValue = foreignValue;
            this.ExemptAmount = exemptAmount;
            this.VatableAmount = vatableAmount;
            this.TotalAfterDiscount = totalAfterDiscount;
            this.DueDate = dueDate;
            this.SubTotal = subTotal;
            this.PayrollDetail = payrollDetail;
            this.BatchTaxFilingId = batchTaxFilingId;
            this.BatchTaxFiling = batchTaxFiling;
            this.SupplierInvoiceStatus = supplierInvoiceStatus;
            this.SaleAndPurchaseChannel = saleAndPurchaseChannel;
            this.PettyCashName = pettyCashName;
            this.PettyCashId = pettyCashId;
            this.ChequeId = chequeId;
            this.CreditCardId = creditCardId;
            this.OtherChannelId = otherChannelId;
            this.ChequeCashingDate = chequeCashingDate;
            this.AutoCreateWithholdingTax = autoCreateWithholdingTax;
            this.WithholdingTaxIncomeType = withholdingTaxIncomeType;
            this.WithholdingTaxIncomeDescription = withholdingTaxIncomeDescription;
            this.WithholdingTaxEntity = withholdingTaxEntity;
            this.ExchangeRatio = exchangeRatio;
            this.IsManualRate = isManualRate;
            this.ExchangeRateDate = exchangeRateDate;
            this.CompanyCurrencyId = companyCurrencyId;
            this.ForeignInlineVatValue = foreignInlineVatValue;
            this.ForeignInlineDiscountValue = foreignInlineDiscountValue;
            this.ForeignVatAmount = foreignVatAmount;
            this.ForeignDeductionAmount = foreignDeductionAmount;
            this.ProjectId = projectId;
            this.IsManualVat = isManualVat;
            this.ExternalDocumentId = externalDocumentId;
            this.BatchId = batchId;
            this.DocumentReferences = documentReferences;
            this.ReferencedToMe = referencedToMe;
            this.ReferencedByMe = referencedByMe;
            this.StatusInt = statusInt;
            this.PartialPaymentMethod = partialPaymentMethod;
            this.RefDocumentStatus = refDocumentStatus;
            this.RefDocumentStatusString = refDocumentStatusString;
            this.IsReCalculate = isReCalculate;
            this.InlineVatValue = inlineVatValue;
            this.InlineDiscountValue = inlineDiscountValue;
            this.IsMigrate = isMigrate;
            this.VatValue = vatValue;
            this.DeductionAmount = deductionAmount;
            this.PaymentDeductionType = paymentDeductionType;
            this.DocumentDeductionType = documentDeductionType;
            this.IsInlineDiscount = isInlineDiscount;
            this.IsInlineVat = isInlineVat;
            this.ContactId = contactId;
            this.ValueExcludeVat = valueExcludeVat;
            this.RoundingAdjustment = roundingAdjustment;
            this.Name = name;
            this.InternalNotes = internalNotes;
            this.ProjectName = projectName;
            this.ProjectNameAndProjectDeatil = projectNameAndProjectDeatil;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets VendorCompanyId
        /// </summary>
        [DataMember(Name = "vendorCompanyId", EmitDefaultValue = true)]
        public long? VendorCompanyId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptImage
        /// </summary>
        [DataMember(Name = "receiptImage", EmitDefaultValue = true)]
        public string ReceiptImage { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseCategoryId
        /// </summary>
        [DataMember(Name = "expenseCategoryId", EmitDefaultValue = false)]
        public long ExpenseCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSerial
        /// </summary>
        [DataMember(Name = "documentSerial", EmitDefaultValue = true)]
        public string DocumentSerial { get; set; }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name = "documentId", EmitDefaultValue = true)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets PublishedOn
        /// </summary>
        [DataMember(Name = "publishedOn", EmitDefaultValue = false)]
        public DateTime PublishedOn { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseDate
        /// </summary>
        [DataMember(Name = "expenseDate", EmitDefaultValue = false)]
        public DateTime ExpenseDate { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDate
        /// </summary>
        [DataMember(Name = "documentDate", EmitDefaultValue = false)]
        public DateTime DocumentDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public long CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name = "published", EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [DataMember(Name = "approved", EmitDefaultValue = true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedBy
        /// </summary>
        [DataMember(Name = "approvedBy", EmitDefaultValue = false)]
        public long ApprovedBy { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name = "remarks", EmitDefaultValue = true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets IsTax
        /// </summary>
        [DataMember(Name = "isTax", EmitDefaultValue = true)]
        public bool IsTax { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets TaxRefundable
        /// </summary>
        [DataMember(Name = "taxRefundable", EmitDefaultValue = true)]
        public bool TaxRefundable { get; set; }

        /// <summary>
        /// Gets or Sets GalleryId
        /// </summary>
        [DataMember(Name = "galleryId", EmitDefaultValue = true)]
        public long? GalleryId { get; set; }

        /// <summary>
        /// Gets or Sets Reconciled
        /// </summary>
        [DataMember(Name = "reconciled", EmitDefaultValue = true)]
        public bool Reconciled { get; set; }

        /// <summary>
        /// Gets or Sets NullableContactId
        /// </summary>
        [DataMember(Name = "nullableContactId", EmitDefaultValue = true)]
        public long? NullableContactId { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountNumber
        /// </summary>
        [DataMember(Name = "bankAccountNumber", EmitDefaultValue = true)]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsVatInclusive
        /// </summary>
        [DataMember(Name = "isVatInclusive", EmitDefaultValue = true)]
        public bool IsVatInclusive { get; set; }

        /// <summary>
        /// Gets or Sets MethodPayment
        /// </summary>
        [DataMember(Name = "methodPayment", EmitDefaultValue = true)]
        public OneOfPaymentMethod MethodPayment { get; set; }

        /// <summary>
        /// Gets or Sets VendorName
        /// </summary>
        [DataMember(Name = "vendorName", EmitDefaultValue = true)]
        public string VendorName { get; set; }

        /// <summary>
        /// Gets or Sets AddressLocal
        /// </summary>
        [DataMember(Name = "addressLocal", EmitDefaultValue = true)]
        public string AddressLocal { get; set; }

        /// <summary>
        /// Gets or Sets AddressLocalLine2
        /// </summary>
        [DataMember(Name = "addressLocalLine2", EmitDefaultValue = true)]
        public string AddressLocalLine2 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLocalLine3
        /// </summary>
        [DataMember(Name = "addressLocalLine3", EmitDefaultValue = true)]
        public string AddressLocalLine3 { get; set; }

        /// <summary>
        /// Gets or Sets CompanyTaxId
        /// </summary>
        [DataMember(Name = "companyTaxId", EmitDefaultValue = true)]
        public string CompanyTaxId { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name = "branch", EmitDefaultValue = true)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets VatRate
        /// </summary>
        [DataMember(Name = "vatRate", EmitDefaultValue = false)]
        public int VatRate { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name = "tax", EmitDefaultValue = true)]
        public decimal? Tax { get; set; }

        /// <summary>
        /// Gets or Sets ValueIncludeVat
        /// </summary>
        [DataMember(Name = "valueIncludeVat", EmitDefaultValue = false)]
        public decimal ValueIncludeVat { get; set; }

        /// <summary>
        /// Gets or Sets VatAmount
        /// </summary>
        [DataMember(Name = "vatAmount", EmitDefaultValue = true)]
        public decimal? VatAmount { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSerialNoPrefix
        /// </summary>
        [DataMember(Name = "documentSerialNoPrefix", EmitDefaultValue = true)]
        public long? DocumentSerialNoPrefix { get; set; }

        /// <summary>
        /// Gets or Sets Withholding
        /// </summary>
        [DataMember(Name = "withholding", EmitDefaultValue = true)]
        public int? Withholding { get; set; }

        /// <summary>
        /// Gets or Sets Charge
        /// </summary>
        [DataMember(Name = "charge", EmitDefaultValue = true)]
        public decimal? Charge { get; set; }

        /// <summary>
        /// Gets or Sets DatePayment
        /// </summary>
        [DataMember(Name = "datePayment", EmitDefaultValue = true)]
        public DateTime? DatePayment { get; set; }

        /// <summary>
        /// Gets or Sets CheckNumber
        /// </summary>
        [DataMember(Name = "checkNumber", EmitDefaultValue = true)]
        public string CheckNumber { get; set; }

        /// <summary>
        /// Gets or Sets CheckBankId
        /// </summary>
        [DataMember(Name = "checkBankId", EmitDefaultValue = true)]
        public string CheckBankId { get; set; }

        /// <summary>
        /// Gets or Sets CheckDatePaid
        /// </summary>
        [DataMember(Name = "checkDatePaid", EmitDefaultValue = true)]
        public DateTime? CheckDatePaid { get; set; }

        /// <summary>
        /// Gets or Sets TransferBankId
        /// </summary>
        [DataMember(Name = "transferBankId", EmitDefaultValue = true)]
        public string TransferBankId { get; set; }

        /// <summary>
        /// Gets or Sets Collected
        /// </summary>
        [DataMember(Name = "collected", IsRequired = true, EmitDefaultValue = false)]
        public decimal Collected { get; set; }

        /// <summary>
        /// Gets or Sets Outstanding
        /// </summary>
        [DataMember(Name = "outstanding", IsRequired = true, EmitDefaultValue = false)]
        public decimal Outstanding { get; set; }

        /// <summary>
        /// Gets or Sets PaymentWithHeld
        /// </summary>
        [DataMember(Name = "paymentWithHeld", IsRequired = true, EmitDefaultValue = false)]
        public decimal PaymentWithHeld { get; set; }

        /// <summary>
        /// Gets or Sets ResetTransactionId
        /// </summary>
        [DataMember(Name = "resetTransactionId", EmitDefaultValue = true)]
        public long? ResetTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountId
        /// </summary>
        [DataMember(Name = "bankAccountId", EmitDefaultValue = true)]
        public long? BankAccountId { get; set; }

        /// <summary>
        /// Gets or Sets RemainingCollected
        /// </summary>
        [DataMember(Name = "remainingCollected", EmitDefaultValue = true)]
        public decimal? RemainingCollected { get; set; }

        /// <summary>
        /// Gets or Sets RemainingCollectedType
        /// </summary>
        [DataMember(Name = "remainingCollectedType", EmitDefaultValue = true)]
        public OneOfRemainingCollectedType RemainingCollectedType { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public OneOfCompany Company { get; set; }

        /// <summary>
        /// Gets or Sets VendorCompany
        /// </summary>
        [DataMember(Name = "vendorCompany", EmitDefaultValue = true)]
        public OneOfCompany VendorCompany { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseCategory
        /// </summary>
        [DataMember(Name = "expenseCategory", EmitDefaultValue = true)]
        public OneOfExpenseCategory ExpenseCategory { get; set; }

        /// <summary>
        /// Gets or Sets Gallery
        /// </summary>
        [DataMember(Name = "gallery", EmitDefaultValue = true)]
        public OneOfGallery Gallery { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "contact", EmitDefaultValue = true)]
        public OneOfContact Contact { get; set; }

        /// <summary>
        /// Gets or Sets RunningNumberType
        /// </summary>
        [DataMember(Name = "runningNumberType", EmitDefaultValue = false)]
        public int RunningNumberType { get; set; }

        /// <summary>
        /// Gets or Sets RunningModifiedOn
        /// </summary>
        [DataMember(Name = "runningModifiedOn", EmitDefaultValue = true)]
        public DateTime? RunningModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets IsForeignCurrency
        /// </summary>
        [DataMember(Name = "isForeignCurrency", EmitDefaultValue = true)]
        public bool IsForeignCurrency { get; set; }

        /// <summary>
        /// Gets or Sets ForeignCurrency
        /// </summary>
        [DataMember(Name = "foreignCurrency", EmitDefaultValue = true)]
        public OneOfCurrency ForeignCurrency { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name = "exchangeRate", EmitDefaultValue = true)]
        public decimal? ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets ForeignValue
        /// </summary>
        [DataMember(Name = "foreignValue", EmitDefaultValue = true)]
        public decimal? ForeignValue { get; set; }

        /// <summary>
        /// Gets or Sets ExemptAmount
        /// </summary>
        [DataMember(Name = "exemptAmount", EmitDefaultValue = false)]
        public decimal ExemptAmount { get; set; }

        /// <summary>
        /// Gets or Sets VatableAmount
        /// </summary>
        [DataMember(Name = "vatableAmount", EmitDefaultValue = false)]
        public decimal VatableAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalAfterDiscount
        /// </summary>
        [DataMember(Name = "totalAfterDiscount", EmitDefaultValue = false)]
        public decimal TotalAfterDiscount { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name = "dueDate", EmitDefaultValue = true)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets SubTotal
        /// </summary>
        [DataMember(Name = "subTotal", EmitDefaultValue = false)]
        public decimal SubTotal { get; set; }

        /// <summary>
        /// Gets or Sets PayrollDetail
        /// </summary>
        [DataMember(Name = "payrollDetail", EmitDefaultValue = true)]
        public List<PayrollDetail> PayrollDetail { get; set; }

        /// <summary>
        /// Gets or Sets BatchTaxFilingId
        /// </summary>
        [DataMember(Name = "batchTaxFilingId", EmitDefaultValue = true)]
        public long? BatchTaxFilingId { get; set; }

        /// <summary>
        /// Gets or Sets BatchTaxFiling
        /// </summary>
        [DataMember(Name = "batchTaxFiling", EmitDefaultValue = true)]
        public OneOfBatchTaxFiling BatchTaxFiling { get; set; }

        /// <summary>
        /// Gets or Sets SupplierInvoiceStatus
        /// </summary>
        [DataMember(Name = "supplierInvoiceStatus", EmitDefaultValue = true)]
        public OneOfSupplierInvoiceStatus SupplierInvoiceStatus { get; set; }

        /// <summary>
        /// Gets or Sets SaleAndPurchaseChannel
        /// </summary>
        [DataMember(Name = "saleAndPurchaseChannel", EmitDefaultValue = true)]
        public string SaleAndPurchaseChannel { get; set; }

        /// <summary>
        /// Gets or Sets PettyCashName
        /// </summary>
        [DataMember(Name = "pettyCashName", EmitDefaultValue = true)]
        public string PettyCashName { get; set; }

        /// <summary>
        /// Gets or Sets PettyCashId
        /// </summary>
        [DataMember(Name = "pettyCashId", EmitDefaultValue = true)]
        public long? PettyCashId { get; set; }

        /// <summary>
        /// Gets or Sets ChequeId
        /// </summary>
        [DataMember(Name = "chequeId", EmitDefaultValue = true)]
        public long? ChequeId { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardId
        /// </summary>
        [DataMember(Name = "creditCardId", EmitDefaultValue = true)]
        public long? CreditCardId { get; set; }

        /// <summary>
        /// Gets or Sets OtherChannelId
        /// </summary>
        [DataMember(Name = "otherChannelId", EmitDefaultValue = true)]
        public long? OtherChannelId { get; set; }

        /// <summary>
        /// Gets or Sets ChequeCashingDate
        /// </summary>
        [DataMember(Name = "chequeCashingDate", EmitDefaultValue = true)]
        public DateTime? ChequeCashingDate { get; set; }

        /// <summary>
        /// Gets or Sets AutoCreateWithholdingTax
        /// </summary>
        [DataMember(Name = "autoCreateWithholdingTax", EmitDefaultValue = true)]
        public bool? AutoCreateWithholdingTax { get; set; }

        /// <summary>
        /// Gets or Sets WithholdingTaxIncomeType
        /// </summary>
        [DataMember(Name = "withholdingTaxIncomeType", EmitDefaultValue = true)]
        public OneOfIncomeType WithholdingTaxIncomeType { get; set; }

        /// <summary>
        /// Gets or Sets WithholdingTaxIncomeDescription
        /// </summary>
        [DataMember(Name = "withholdingTaxIncomeDescription", EmitDefaultValue = true)]
        public string WithholdingTaxIncomeDescription { get; set; }

        /// <summary>
        /// Gets or Sets WithholdingTaxEntity
        /// </summary>
        [DataMember(Name = "withholdingTaxEntity", EmitDefaultValue = true)]
        public OneOfEntity WithholdingTaxEntity { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRatio
        /// </summary>
        [DataMember(Name = "exchangeRatio", EmitDefaultValue = true)]
        public decimal? ExchangeRatio { get; set; }

        /// <summary>
        /// Gets or Sets IsManualRate
        /// </summary>
        [DataMember(Name = "isManualRate", EmitDefaultValue = true)]
        public bool? IsManualRate { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRateDate
        /// </summary>
        [DataMember(Name = "exchangeRateDate", EmitDefaultValue = true)]
        public DateTime? ExchangeRateDate { get; set; }

        /// <summary>
        /// Gets or Sets CompanyCurrencyId
        /// </summary>
        [DataMember(Name = "companyCurrencyId", EmitDefaultValue = true)]
        public long? CompanyCurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets ForeignInlineVatValue
        /// </summary>
        [DataMember(Name = "foreignInlineVatValue", EmitDefaultValue = true)]
        public decimal? ForeignInlineVatValue { get; set; }

        /// <summary>
        /// Gets or Sets ForeignInlineDiscountValue
        /// </summary>
        [DataMember(Name = "foreignInlineDiscountValue", EmitDefaultValue = true)]
        public decimal? ForeignInlineDiscountValue { get; set; }

        /// <summary>
        /// Gets or Sets ForeignVatAmount
        /// </summary>
        [DataMember(Name = "foreignVatAmount", EmitDefaultValue = true)]
        public decimal? ForeignVatAmount { get; set; }

        /// <summary>
        /// Gets or Sets ForeignDeductionAmount
        /// </summary>
        [DataMember(Name = "foreignDeductionAmount", EmitDefaultValue = true)]
        public decimal? ForeignDeductionAmount { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", EmitDefaultValue = true)]
        public long? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets IsManualVat
        /// </summary>
        [DataMember(Name = "isManualVat", EmitDefaultValue = true)]
        public bool? IsManualVat { get; set; }

        /// <summary>
        /// Gets or Sets ExternalDocumentId
        /// </summary>
        [DataMember(Name = "externalDocumentId", EmitDefaultValue = true)]
        public string ExternalDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name = "batchId", EmitDefaultValue = true)]
        public string BatchId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentReferences
        /// </summary>
        [DataMember(Name = "documentReferences", EmitDefaultValue = true)]
        public List<IDocumentReference> DocumentReferences { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedToMe
        /// </summary>
        [DataMember(Name = "referencedToMe", EmitDefaultValue = true)]
        public List<IDocumentReference> ReferencedToMe { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedByMe
        /// </summary>
        [DataMember(Name = "referencedByMe", EmitDefaultValue = true)]
        public List<IDocumentReference> ReferencedByMe { get; set; }

        /// <summary>
        /// Gets or Sets StatusInt
        /// </summary>
        [DataMember(Name = "statusInt", EmitDefaultValue = false)]
        public int StatusInt { get; set; }

        /// <summary>
        /// Gets or Sets PartialPaymentMethod
        /// </summary>
        [DataMember(Name = "partialPaymentMethod", EmitDefaultValue = true)]
        public OneOfPartialPaymentMethod PartialPaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets RefDocumentStatus
        /// </summary>
        [DataMember(Name = "refDocumentStatus", EmitDefaultValue = false)]
        public int RefDocumentStatus { get; set; }

        /// <summary>
        /// Gets or Sets RefDocumentStatusString
        /// </summary>
        [DataMember(Name = "refDocumentStatusString", EmitDefaultValue = true)]
        public string RefDocumentStatusString { get; set; }

        /// <summary>
        /// Gets or Sets IsReCalculate
        /// </summary>
        [DataMember(Name = "isReCalculate", EmitDefaultValue = true)]
        public bool IsReCalculate { get; set; }

        /// <summary>
        /// Gets or Sets InlineVatValue
        /// </summary>
        [DataMember(Name = "inlineVatValue", EmitDefaultValue = false)]
        public decimal InlineVatValue { get; set; }

        /// <summary>
        /// Gets or Sets InlineDiscountValue
        /// </summary>
        [DataMember(Name = "inlineDiscountValue", EmitDefaultValue = false)]
        public decimal InlineDiscountValue { get; set; }

        /// <summary>
        /// Gets or Sets IsMigrate
        /// </summary>
        [DataMember(Name = "isMigrate", EmitDefaultValue = true)]
        public bool IsMigrate { get; set; }

        /// <summary>
        /// Gets or Sets VatValue
        /// </summary>
        [DataMember(Name = "vatValue", EmitDefaultValue = true)]
        public decimal? VatValue { get; set; }

        /// <summary>
        /// Gets or Sets DeductionAmount
        /// </summary>
        [DataMember(Name = "deductionAmount", EmitDefaultValue = true)]
        public decimal? DeductionAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDeductionType
        /// </summary>
        [DataMember(Name = "paymentDeductionType", EmitDefaultValue = true)]
        public OneOfDeductionType PaymentDeductionType { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDeductionType
        /// </summary>
        [DataMember(Name = "documentDeductionType", EmitDefaultValue = true)]
        public OneOfDeductionType DocumentDeductionType { get; set; }

        /// <summary>
        /// Gets or Sets IsInlineDiscount
        /// </summary>
        [DataMember(Name = "isInlineDiscount", EmitDefaultValue = true)]
        public bool IsInlineDiscount { get; set; }

        /// <summary>
        /// Gets or Sets IsInlineVat
        /// </summary>
        [DataMember(Name = "isInlineVat", EmitDefaultValue = true)]
        public bool IsInlineVat { get; set; }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [DataMember(Name = "contactId", EmitDefaultValue = false)]
        public long ContactId { get; set; }

        /// <summary>
        /// Gets or Sets ValueExcludeVat
        /// </summary>
        [DataMember(Name = "valueExcludeVat", EmitDefaultValue = false)]
        public decimal ValueExcludeVat { get; set; }

        /// <summary>
        /// Gets or Sets RoundingAdjustment
        /// </summary>
        [DataMember(Name = "roundingAdjustment", EmitDefaultValue = false)]
        public decimal RoundingAdjustment { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets InternalNotes
        /// </summary>
        [DataMember(Name = "internalNotes", EmitDefaultValue = true)]
        public string InternalNotes { get; set; }

        /// <summary>
        /// Gets or Sets ProjectName
        /// </summary>
        [DataMember(Name = "projectName", EmitDefaultValue = true)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or Sets ProjectNameAndProjectDeatil
        /// </summary>
        [DataMember(Name = "projectNameAndProjectDeatil", EmitDefaultValue = true)]
        public string ProjectNameAndProjectDeatil { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExpenseListAllOf {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VendorCompanyId: ").Append(VendorCompanyId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ReceiptImage: ").Append(ReceiptImage).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpenseCategoryId: ").Append(ExpenseCategoryId).Append("\n");
            sb.Append("  DocumentSerial: ").Append(DocumentSerial).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  PublishedOn: ").Append(PublishedOn).Append("\n");
            sb.Append("  ExpenseDate: ").Append(ExpenseDate).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  ApprovedBy: ").Append(ApprovedBy).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  IsTax: ").Append(IsTax).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  TaxRefundable: ").Append(TaxRefundable).Append("\n");
            sb.Append("  GalleryId: ").Append(GalleryId).Append("\n");
            sb.Append("  Reconciled: ").Append(Reconciled).Append("\n");
            sb.Append("  NullableContactId: ").Append(NullableContactId).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  IsVatInclusive: ").Append(IsVatInclusive).Append("\n");
            sb.Append("  MethodPayment: ").Append(MethodPayment).Append("\n");
            sb.Append("  VendorName: ").Append(VendorName).Append("\n");
            sb.Append("  AddressLocal: ").Append(AddressLocal).Append("\n");
            sb.Append("  AddressLocalLine2: ").Append(AddressLocalLine2).Append("\n");
            sb.Append("  AddressLocalLine3: ").Append(AddressLocalLine3).Append("\n");
            sb.Append("  CompanyTaxId: ").Append(CompanyTaxId).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  ValueIncludeVat: ").Append(ValueIncludeVat).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  DocumentSerialNoPrefix: ").Append(DocumentSerialNoPrefix).Append("\n");
            sb.Append("  Withholding: ").Append(Withholding).Append("\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("  DatePayment: ").Append(DatePayment).Append("\n");
            sb.Append("  CheckNumber: ").Append(CheckNumber).Append("\n");
            sb.Append("  CheckBankId: ").Append(CheckBankId).Append("\n");
            sb.Append("  CheckDatePaid: ").Append(CheckDatePaid).Append("\n");
            sb.Append("  TransferBankId: ").Append(TransferBankId).Append("\n");
            sb.Append("  Collected: ").Append(Collected).Append("\n");
            sb.Append("  Outstanding: ").Append(Outstanding).Append("\n");
            sb.Append("  PaymentWithHeld: ").Append(PaymentWithHeld).Append("\n");
            sb.Append("  ResetTransactionId: ").Append(ResetTransactionId).Append("\n");
            sb.Append("  BankAccountId: ").Append(BankAccountId).Append("\n");
            sb.Append("  RuleCompileStatus: ").Append(RuleCompileStatus).Append("\n");
            sb.Append("  RemainingCollected: ").Append(RemainingCollected).Append("\n");
            sb.Append("  RemainingCollectedType: ").Append(RemainingCollectedType).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  VendorCompany: ").Append(VendorCompany).Append("\n");
            sb.Append("  ExpenseCategory: ").Append(ExpenseCategory).Append("\n");
            sb.Append("  Gallery: ").Append(Gallery).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  RunningNumberType: ").Append(RunningNumberType).Append("\n");
            sb.Append("  RunningModifiedOn: ").Append(RunningModifiedOn).Append("\n");
            sb.Append("  IsForeignCurrency: ").Append(IsForeignCurrency).Append("\n");
            sb.Append("  ForeignCurrency: ").Append(ForeignCurrency).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  ForeignValue: ").Append(ForeignValue).Append("\n");
            sb.Append("  ExemptAmount: ").Append(ExemptAmount).Append("\n");
            sb.Append("  VatableAmount: ").Append(VatableAmount).Append("\n");
            sb.Append("  TotalAfterDiscount: ").Append(TotalAfterDiscount).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  PayrollDetail: ").Append(PayrollDetail).Append("\n");
            sb.Append("  BatchTaxFilingId: ").Append(BatchTaxFilingId).Append("\n");
            sb.Append("  BatchTaxFiling: ").Append(BatchTaxFiling).Append("\n");
            sb.Append("  SupplierInvoiceStatus: ").Append(SupplierInvoiceStatus).Append("\n");
            sb.Append("  SaleAndPurchaseChannel: ").Append(SaleAndPurchaseChannel).Append("\n");
            sb.Append("  PettyCashName: ").Append(PettyCashName).Append("\n");
            sb.Append("  PettyCashId: ").Append(PettyCashId).Append("\n");
            sb.Append("  ChequeId: ").Append(ChequeId).Append("\n");
            sb.Append("  CreditCardId: ").Append(CreditCardId).Append("\n");
            sb.Append("  OtherChannelId: ").Append(OtherChannelId).Append("\n");
            sb.Append("  ChequeCashingDate: ").Append(ChequeCashingDate).Append("\n");
            sb.Append("  AutoCreateWithholdingTax: ").Append(AutoCreateWithholdingTax).Append("\n");
            sb.Append("  WithholdingTaxIncomeType: ").Append(WithholdingTaxIncomeType).Append("\n");
            sb.Append("  WithholdingTaxIncomeDescription: ").Append(WithholdingTaxIncomeDescription).Append("\n");
            sb.Append("  WithholdingTaxEntity: ").Append(WithholdingTaxEntity).Append("\n");
            sb.Append("  ExchangeRatio: ").Append(ExchangeRatio).Append("\n");
            sb.Append("  IsManualRate: ").Append(IsManualRate).Append("\n");
            sb.Append("  ExchangeRateDate: ").Append(ExchangeRateDate).Append("\n");
            sb.Append("  CompanyCurrencyId: ").Append(CompanyCurrencyId).Append("\n");
            sb.Append("  ForeignInlineVatValue: ").Append(ForeignInlineVatValue).Append("\n");
            sb.Append("  ForeignInlineDiscountValue: ").Append(ForeignInlineDiscountValue).Append("\n");
            sb.Append("  ForeignVatAmount: ").Append(ForeignVatAmount).Append("\n");
            sb.Append("  ForeignDeductionAmount: ").Append(ForeignDeductionAmount).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  IsManualVat: ").Append(IsManualVat).Append("\n");
            sb.Append("  ExternalDocumentId: ").Append(ExternalDocumentId).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  DocumentReferences: ").Append(DocumentReferences).Append("\n");
            sb.Append("  ReferencedToMe: ").Append(ReferencedToMe).Append("\n");
            sb.Append("  ReferencedByMe: ").Append(ReferencedByMe).Append("\n");
            sb.Append("  StatusInt: ").Append(StatusInt).Append("\n");
            sb.Append("  PartialPaymentMethod: ").Append(PartialPaymentMethod).Append("\n");
            sb.Append("  RefDocumentStatus: ").Append(RefDocumentStatus).Append("\n");
            sb.Append("  RefDocumentStatusString: ").Append(RefDocumentStatusString).Append("\n");
            sb.Append("  IsReCalculate: ").Append(IsReCalculate).Append("\n");
            sb.Append("  InlineVatValue: ").Append(InlineVatValue).Append("\n");
            sb.Append("  InlineDiscountValue: ").Append(InlineDiscountValue).Append("\n");
            sb.Append("  IsMigrate: ").Append(IsMigrate).Append("\n");
            sb.Append("  VatValue: ").Append(VatValue).Append("\n");
            sb.Append("  DeductionAmount: ").Append(DeductionAmount).Append("\n");
            sb.Append("  PaymentDeductionType: ").Append(PaymentDeductionType).Append("\n");
            sb.Append("  DocumentDeductionType: ").Append(DocumentDeductionType).Append("\n");
            sb.Append("  IsInlineDiscount: ").Append(IsInlineDiscount).Append("\n");
            sb.Append("  IsInlineVat: ").Append(IsInlineVat).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  ValueExcludeVat: ").Append(ValueExcludeVat).Append("\n");
            sb.Append("  RoundingAdjustment: ").Append(RoundingAdjustment).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  InternalNotes: ").Append(InternalNotes).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  ProjectNameAndProjectDeatil: ").Append(ProjectNameAndProjectDeatil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseListAllOf);
        }

        /// <summary>
        /// Returns true if ExpenseListAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseListAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseListAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.VendorCompanyId == input.VendorCompanyId ||
                    (this.VendorCompanyId != null &&
                    this.VendorCompanyId.Equals(input.VendorCompanyId))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ReceiptImage == input.ReceiptImage ||
                    (this.ReceiptImage != null &&
                    this.ReceiptImage.Equals(input.ReceiptImage))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExpenseCategoryId == input.ExpenseCategoryId ||
                    this.ExpenseCategoryId.Equals(input.ExpenseCategoryId)
                ) && 
                (
                    this.DocumentSerial == input.DocumentSerial ||
                    (this.DocumentSerial != null &&
                    this.DocumentSerial.Equals(input.DocumentSerial))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.PublishedOn == input.PublishedOn ||
                    (this.PublishedOn != null &&
                    this.PublishedOn.Equals(input.PublishedOn))
                ) && 
                (
                    this.ExpenseDate == input.ExpenseDate ||
                    (this.ExpenseDate != null &&
                    this.ExpenseDate.Equals(input.ExpenseDate))
                ) && 
                (
                    this.DocumentDate == input.DocumentDate ||
                    (this.DocumentDate != null &&
                    this.DocumentDate.Equals(input.DocumentDate))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.Published == input.Published ||
                    this.Published.Equals(input.Published)
                ) && 
                (
                    this.Approved == input.Approved ||
                    this.Approved.Equals(input.Approved)
                ) && 
                (
                    this.ApprovedBy == input.ApprovedBy ||
                    this.ApprovedBy.Equals(input.ApprovedBy)
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.IsTax == input.IsTax ||
                    this.IsTax.Equals(input.IsTax)
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.TaxRefundable == input.TaxRefundable ||
                    this.TaxRefundable.Equals(input.TaxRefundable)
                ) && 
                (
                    this.GalleryId == input.GalleryId ||
                    (this.GalleryId != null &&
                    this.GalleryId.Equals(input.GalleryId))
                ) && 
                (
                    this.Reconciled == input.Reconciled ||
                    this.Reconciled.Equals(input.Reconciled)
                ) && 
                (
                    this.NullableContactId == input.NullableContactId ||
                    (this.NullableContactId != null &&
                    this.NullableContactId.Equals(input.NullableContactId))
                ) && 
                (
                    this.BankAccountNumber == input.BankAccountNumber ||
                    (this.BankAccountNumber != null &&
                    this.BankAccountNumber.Equals(input.BankAccountNumber))
                ) && 
                (
                    this.IsVatInclusive == input.IsVatInclusive ||
                    this.IsVatInclusive.Equals(input.IsVatInclusive)
                ) && 
                (
                    this.MethodPayment == input.MethodPayment ||
                    (this.MethodPayment != null &&
                    this.MethodPayment.Equals(input.MethodPayment))
                ) && 
                (
                    this.VendorName == input.VendorName ||
                    (this.VendorName != null &&
                    this.VendorName.Equals(input.VendorName))
                ) && 
                (
                    this.AddressLocal == input.AddressLocal ||
                    (this.AddressLocal != null &&
                    this.AddressLocal.Equals(input.AddressLocal))
                ) && 
                (
                    this.AddressLocalLine2 == input.AddressLocalLine2 ||
                    (this.AddressLocalLine2 != null &&
                    this.AddressLocalLine2.Equals(input.AddressLocalLine2))
                ) && 
                (
                    this.AddressLocalLine3 == input.AddressLocalLine3 ||
                    (this.AddressLocalLine3 != null &&
                    this.AddressLocalLine3.Equals(input.AddressLocalLine3))
                ) && 
                (
                    this.CompanyTaxId == input.CompanyTaxId ||
                    (this.CompanyTaxId != null &&
                    this.CompanyTaxId.Equals(input.CompanyTaxId))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.VatRate == input.VatRate ||
                    this.VatRate.Equals(input.VatRate)
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.ValueIncludeVat == input.ValueIncludeVat ||
                    this.ValueIncludeVat.Equals(input.ValueIncludeVat)
                ) && 
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) && 
                (
                    this.DocumentSerialNoPrefix == input.DocumentSerialNoPrefix ||
                    (this.DocumentSerialNoPrefix != null &&
                    this.DocumentSerialNoPrefix.Equals(input.DocumentSerialNoPrefix))
                ) && 
                (
                    this.Withholding == input.Withholding ||
                    (this.Withholding != null &&
                    this.Withholding.Equals(input.Withholding))
                ) && 
                (
                    this.Charge == input.Charge ||
                    (this.Charge != null &&
                    this.Charge.Equals(input.Charge))
                ) && 
                (
                    this.DatePayment == input.DatePayment ||
                    (this.DatePayment != null &&
                    this.DatePayment.Equals(input.DatePayment))
                ) && 
                (
                    this.CheckNumber == input.CheckNumber ||
                    (this.CheckNumber != null &&
                    this.CheckNumber.Equals(input.CheckNumber))
                ) && 
                (
                    this.CheckBankId == input.CheckBankId ||
                    (this.CheckBankId != null &&
                    this.CheckBankId.Equals(input.CheckBankId))
                ) && 
                (
                    this.CheckDatePaid == input.CheckDatePaid ||
                    (this.CheckDatePaid != null &&
                    this.CheckDatePaid.Equals(input.CheckDatePaid))
                ) && 
                (
                    this.TransferBankId == input.TransferBankId ||
                    (this.TransferBankId != null &&
                    this.TransferBankId.Equals(input.TransferBankId))
                ) && 
                (
                    this.Collected == input.Collected ||
                    this.Collected.Equals(input.Collected)
                ) && 
                (
                    this.Outstanding == input.Outstanding ||
                    this.Outstanding.Equals(input.Outstanding)
                ) && 
                (
                    this.PaymentWithHeld == input.PaymentWithHeld ||
                    this.PaymentWithHeld.Equals(input.PaymentWithHeld)
                ) && 
                (
                    this.ResetTransactionId == input.ResetTransactionId ||
                    (this.ResetTransactionId != null &&
                    this.ResetTransactionId.Equals(input.ResetTransactionId))
                ) && 
                (
                    this.BankAccountId == input.BankAccountId ||
                    (this.BankAccountId != null &&
                    this.BankAccountId.Equals(input.BankAccountId))
                ) && 
                (
                    this.RuleCompileStatus == input.RuleCompileStatus ||
                    this.RuleCompileStatus.Equals(input.RuleCompileStatus)
                ) && 
                (
                    this.RemainingCollected == input.RemainingCollected ||
                    (this.RemainingCollected != null &&
                    this.RemainingCollected.Equals(input.RemainingCollected))
                ) && 
                (
                    this.RemainingCollectedType == input.RemainingCollectedType ||
                    (this.RemainingCollectedType != null &&
                    this.RemainingCollectedType.Equals(input.RemainingCollectedType))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.VendorCompany == input.VendorCompany ||
                    (this.VendorCompany != null &&
                    this.VendorCompany.Equals(input.VendorCompany))
                ) && 
                (
                    this.ExpenseCategory == input.ExpenseCategory ||
                    (this.ExpenseCategory != null &&
                    this.ExpenseCategory.Equals(input.ExpenseCategory))
                ) && 
                (
                    this.Gallery == input.Gallery ||
                    (this.Gallery != null &&
                    this.Gallery.Equals(input.Gallery))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.RunningNumberType == input.RunningNumberType ||
                    this.RunningNumberType.Equals(input.RunningNumberType)
                ) && 
                (
                    this.RunningModifiedOn == input.RunningModifiedOn ||
                    (this.RunningModifiedOn != null &&
                    this.RunningModifiedOn.Equals(input.RunningModifiedOn))
                ) && 
                (
                    this.IsForeignCurrency == input.IsForeignCurrency ||
                    this.IsForeignCurrency.Equals(input.IsForeignCurrency)
                ) && 
                (
                    this.ForeignCurrency == input.ForeignCurrency ||
                    (this.ForeignCurrency != null &&
                    this.ForeignCurrency.Equals(input.ForeignCurrency))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.ForeignValue == input.ForeignValue ||
                    (this.ForeignValue != null &&
                    this.ForeignValue.Equals(input.ForeignValue))
                ) && 
                (
                    this.ExemptAmount == input.ExemptAmount ||
                    this.ExemptAmount.Equals(input.ExemptAmount)
                ) && 
                (
                    this.VatableAmount == input.VatableAmount ||
                    this.VatableAmount.Equals(input.VatableAmount)
                ) && 
                (
                    this.TotalAfterDiscount == input.TotalAfterDiscount ||
                    this.TotalAfterDiscount.Equals(input.TotalAfterDiscount)
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.SubTotal == input.SubTotal ||
                    this.SubTotal.Equals(input.SubTotal)
                ) && 
                (
                    this.PayrollDetail == input.PayrollDetail ||
                    this.PayrollDetail != null &&
                    input.PayrollDetail != null &&
                    this.PayrollDetail.SequenceEqual(input.PayrollDetail)
                ) && 
                (
                    this.BatchTaxFilingId == input.BatchTaxFilingId ||
                    (this.BatchTaxFilingId != null &&
                    this.BatchTaxFilingId.Equals(input.BatchTaxFilingId))
                ) && 
                (
                    this.BatchTaxFiling == input.BatchTaxFiling ||
                    (this.BatchTaxFiling != null &&
                    this.BatchTaxFiling.Equals(input.BatchTaxFiling))
                ) && 
                (
                    this.SupplierInvoiceStatus == input.SupplierInvoiceStatus ||
                    (this.SupplierInvoiceStatus != null &&
                    this.SupplierInvoiceStatus.Equals(input.SupplierInvoiceStatus))
                ) && 
                (
                    this.SaleAndPurchaseChannel == input.SaleAndPurchaseChannel ||
                    (this.SaleAndPurchaseChannel != null &&
                    this.SaleAndPurchaseChannel.Equals(input.SaleAndPurchaseChannel))
                ) && 
                (
                    this.PettyCashName == input.PettyCashName ||
                    (this.PettyCashName != null &&
                    this.PettyCashName.Equals(input.PettyCashName))
                ) && 
                (
                    this.PettyCashId == input.PettyCashId ||
                    (this.PettyCashId != null &&
                    this.PettyCashId.Equals(input.PettyCashId))
                ) && 
                (
                    this.ChequeId == input.ChequeId ||
                    (this.ChequeId != null &&
                    this.ChequeId.Equals(input.ChequeId))
                ) && 
                (
                    this.CreditCardId == input.CreditCardId ||
                    (this.CreditCardId != null &&
                    this.CreditCardId.Equals(input.CreditCardId))
                ) && 
                (
                    this.OtherChannelId == input.OtherChannelId ||
                    (this.OtherChannelId != null &&
                    this.OtherChannelId.Equals(input.OtherChannelId))
                ) && 
                (
                    this.ChequeCashingDate == input.ChequeCashingDate ||
                    (this.ChequeCashingDate != null &&
                    this.ChequeCashingDate.Equals(input.ChequeCashingDate))
                ) && 
                (
                    this.AutoCreateWithholdingTax == input.AutoCreateWithholdingTax ||
                    (this.AutoCreateWithholdingTax != null &&
                    this.AutoCreateWithholdingTax.Equals(input.AutoCreateWithholdingTax))
                ) && 
                (
                    this.WithholdingTaxIncomeType == input.WithholdingTaxIncomeType ||
                    (this.WithholdingTaxIncomeType != null &&
                    this.WithholdingTaxIncomeType.Equals(input.WithholdingTaxIncomeType))
                ) && 
                (
                    this.WithholdingTaxIncomeDescription == input.WithholdingTaxIncomeDescription ||
                    (this.WithholdingTaxIncomeDescription != null &&
                    this.WithholdingTaxIncomeDescription.Equals(input.WithholdingTaxIncomeDescription))
                ) && 
                (
                    this.WithholdingTaxEntity == input.WithholdingTaxEntity ||
                    (this.WithholdingTaxEntity != null &&
                    this.WithholdingTaxEntity.Equals(input.WithholdingTaxEntity))
                ) && 
                (
                    this.ExchangeRatio == input.ExchangeRatio ||
                    (this.ExchangeRatio != null &&
                    this.ExchangeRatio.Equals(input.ExchangeRatio))
                ) && 
                (
                    this.IsManualRate == input.IsManualRate ||
                    (this.IsManualRate != null &&
                    this.IsManualRate.Equals(input.IsManualRate))
                ) && 
                (
                    this.ExchangeRateDate == input.ExchangeRateDate ||
                    (this.ExchangeRateDate != null &&
                    this.ExchangeRateDate.Equals(input.ExchangeRateDate))
                ) && 
                (
                    this.CompanyCurrencyId == input.CompanyCurrencyId ||
                    (this.CompanyCurrencyId != null &&
                    this.CompanyCurrencyId.Equals(input.CompanyCurrencyId))
                ) && 
                (
                    this.ForeignInlineVatValue == input.ForeignInlineVatValue ||
                    (this.ForeignInlineVatValue != null &&
                    this.ForeignInlineVatValue.Equals(input.ForeignInlineVatValue))
                ) && 
                (
                    this.ForeignInlineDiscountValue == input.ForeignInlineDiscountValue ||
                    (this.ForeignInlineDiscountValue != null &&
                    this.ForeignInlineDiscountValue.Equals(input.ForeignInlineDiscountValue))
                ) && 
                (
                    this.ForeignVatAmount == input.ForeignVatAmount ||
                    (this.ForeignVatAmount != null &&
                    this.ForeignVatAmount.Equals(input.ForeignVatAmount))
                ) && 
                (
                    this.ForeignDeductionAmount == input.ForeignDeductionAmount ||
                    (this.ForeignDeductionAmount != null &&
                    this.ForeignDeductionAmount.Equals(input.ForeignDeductionAmount))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.IsManualVat == input.IsManualVat ||
                    (this.IsManualVat != null &&
                    this.IsManualVat.Equals(input.IsManualVat))
                ) && 
                (
                    this.ExternalDocumentId == input.ExternalDocumentId ||
                    (this.ExternalDocumentId != null &&
                    this.ExternalDocumentId.Equals(input.ExternalDocumentId))
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.DocumentReferences == input.DocumentReferences ||
                    this.DocumentReferences != null &&
                    input.DocumentReferences != null &&
                    this.DocumentReferences.SequenceEqual(input.DocumentReferences)
                ) && 
                (
                    this.ReferencedToMe == input.ReferencedToMe ||
                    this.ReferencedToMe != null &&
                    input.ReferencedToMe != null &&
                    this.ReferencedToMe.SequenceEqual(input.ReferencedToMe)
                ) && 
                (
                    this.ReferencedByMe == input.ReferencedByMe ||
                    this.ReferencedByMe != null &&
                    input.ReferencedByMe != null &&
                    this.ReferencedByMe.SequenceEqual(input.ReferencedByMe)
                ) && 
                (
                    this.StatusInt == input.StatusInt ||
                    this.StatusInt.Equals(input.StatusInt)
                ) && 
                (
                    this.PartialPaymentMethod == input.PartialPaymentMethod ||
                    (this.PartialPaymentMethod != null &&
                    this.PartialPaymentMethod.Equals(input.PartialPaymentMethod))
                ) && 
                (
                    this.RefDocumentStatus == input.RefDocumentStatus ||
                    this.RefDocumentStatus.Equals(input.RefDocumentStatus)
                ) && 
                (
                    this.RefDocumentStatusString == input.RefDocumentStatusString ||
                    (this.RefDocumentStatusString != null &&
                    this.RefDocumentStatusString.Equals(input.RefDocumentStatusString))
                ) && 
                (
                    this.IsReCalculate == input.IsReCalculate ||
                    this.IsReCalculate.Equals(input.IsReCalculate)
                ) && 
                (
                    this.InlineVatValue == input.InlineVatValue ||
                    this.InlineVatValue.Equals(input.InlineVatValue)
                ) && 
                (
                    this.InlineDiscountValue == input.InlineDiscountValue ||
                    this.InlineDiscountValue.Equals(input.InlineDiscountValue)
                ) && 
                (
                    this.IsMigrate == input.IsMigrate ||
                    this.IsMigrate.Equals(input.IsMigrate)
                ) && 
                (
                    this.VatValue == input.VatValue ||
                    (this.VatValue != null &&
                    this.VatValue.Equals(input.VatValue))
                ) && 
                (
                    this.DeductionAmount == input.DeductionAmount ||
                    (this.DeductionAmount != null &&
                    this.DeductionAmount.Equals(input.DeductionAmount))
                ) && 
                (
                    this.PaymentDeductionType == input.PaymentDeductionType ||
                    (this.PaymentDeductionType != null &&
                    this.PaymentDeductionType.Equals(input.PaymentDeductionType))
                ) && 
                (
                    this.DocumentDeductionType == input.DocumentDeductionType ||
                    (this.DocumentDeductionType != null &&
                    this.DocumentDeductionType.Equals(input.DocumentDeductionType))
                ) && 
                (
                    this.IsInlineDiscount == input.IsInlineDiscount ||
                    this.IsInlineDiscount.Equals(input.IsInlineDiscount)
                ) && 
                (
                    this.IsInlineVat == input.IsInlineVat ||
                    this.IsInlineVat.Equals(input.IsInlineVat)
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    this.ContactId.Equals(input.ContactId)
                ) && 
                (
                    this.ValueExcludeVat == input.ValueExcludeVat ||
                    this.ValueExcludeVat.Equals(input.ValueExcludeVat)
                ) && 
                (
                    this.RoundingAdjustment == input.RoundingAdjustment ||
                    this.RoundingAdjustment.Equals(input.RoundingAdjustment)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.InternalNotes == input.InternalNotes ||
                    (this.InternalNotes != null &&
                    this.InternalNotes.Equals(input.InternalNotes))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.ProjectNameAndProjectDeatil == input.ProjectNameAndProjectDeatil ||
                    (this.ProjectNameAndProjectDeatil != null &&
                    this.ProjectNameAndProjectDeatil.Equals(input.ProjectNameAndProjectDeatil))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.VendorCompanyId != null)
                {
                    hashCode = (hashCode * 59) + this.VendorCompanyId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.ReceiptImage != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptImage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpenseCategoryId.GetHashCode();
                if (this.DocumentSerial != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentSerial.GetHashCode();
                }
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                if (this.PublishedOn != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedOn.GetHashCode();
                }
                if (this.ExpenseDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseDate.GetHashCode();
                }
                if (this.DocumentDate != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentDate.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Published.GetHashCode();
                hashCode = (hashCode * 59) + this.Approved.GetHashCode();
                hashCode = (hashCode * 59) + this.ApprovedBy.GetHashCode();
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsTax.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                hashCode = (hashCode * 59) + this.TaxRefundable.GetHashCode();
                if (this.GalleryId != null)
                {
                    hashCode = (hashCode * 59) + this.GalleryId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Reconciled.GetHashCode();
                if (this.NullableContactId != null)
                {
                    hashCode = (hashCode * 59) + this.NullableContactId.GetHashCode();
                }
                if (this.BankAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsVatInclusive.GetHashCode();
                if (this.MethodPayment != null)
                {
                    hashCode = (hashCode * 59) + this.MethodPayment.GetHashCode();
                }
                if (this.VendorName != null)
                {
                    hashCode = (hashCode * 59) + this.VendorName.GetHashCode();
                }
                if (this.AddressLocal != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLocal.GetHashCode();
                }
                if (this.AddressLocalLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLocalLine2.GetHashCode();
                }
                if (this.AddressLocalLine3 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLocalLine3.GetHashCode();
                }
                if (this.CompanyTaxId != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyTaxId.GetHashCode();
                }
                if (this.Branch != null)
                {
                    hashCode = (hashCode * 59) + this.Branch.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VatRate.GetHashCode();
                if (this.Tax != null)
                {
                    hashCode = (hashCode * 59) + this.Tax.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ValueIncludeVat.GetHashCode();
                if (this.VatAmount != null)
                {
                    hashCode = (hashCode * 59) + this.VatAmount.GetHashCode();
                }
                if (this.DocumentSerialNoPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentSerialNoPrefix.GetHashCode();
                }
                if (this.Withholding != null)
                {
                    hashCode = (hashCode * 59) + this.Withholding.GetHashCode();
                }
                if (this.Charge != null)
                {
                    hashCode = (hashCode * 59) + this.Charge.GetHashCode();
                }
                if (this.DatePayment != null)
                {
                    hashCode = (hashCode * 59) + this.DatePayment.GetHashCode();
                }
                if (this.CheckNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CheckNumber.GetHashCode();
                }
                if (this.CheckBankId != null)
                {
                    hashCode = (hashCode * 59) + this.CheckBankId.GetHashCode();
                }
                if (this.CheckDatePaid != null)
                {
                    hashCode = (hashCode * 59) + this.CheckDatePaid.GetHashCode();
                }
                if (this.TransferBankId != null)
                {
                    hashCode = (hashCode * 59) + this.TransferBankId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Collected.GetHashCode();
                hashCode = (hashCode * 59) + this.Outstanding.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentWithHeld.GetHashCode();
                if (this.ResetTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.ResetTransactionId.GetHashCode();
                }
                if (this.BankAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RuleCompileStatus.GetHashCode();
                if (this.RemainingCollected != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingCollected.GetHashCode();
                }
                if (this.RemainingCollectedType != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingCollectedType.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.VendorCompany != null)
                {
                    hashCode = (hashCode * 59) + this.VendorCompany.GetHashCode();
                }
                if (this.ExpenseCategory != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseCategory.GetHashCode();
                }
                if (this.Gallery != null)
                {
                    hashCode = (hashCode * 59) + this.Gallery.GetHashCode();
                }
                if (this.Contact != null)
                {
                    hashCode = (hashCode * 59) + this.Contact.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RunningNumberType.GetHashCode();
                if (this.RunningModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.RunningModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsForeignCurrency.GetHashCode();
                if (this.ForeignCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignCurrency.GetHashCode();
                }
                if (this.ExchangeRate != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeRate.GetHashCode();
                }
                if (this.ForeignValue != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExemptAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.VatableAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalAfterDiscount.GetHashCode();
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SubTotal.GetHashCode();
                if (this.PayrollDetail != null)
                {
                    hashCode = (hashCode * 59) + this.PayrollDetail.GetHashCode();
                }
                if (this.BatchTaxFilingId != null)
                {
                    hashCode = (hashCode * 59) + this.BatchTaxFilingId.GetHashCode();
                }
                if (this.BatchTaxFiling != null)
                {
                    hashCode = (hashCode * 59) + this.BatchTaxFiling.GetHashCode();
                }
                if (this.SupplierInvoiceStatus != null)
                {
                    hashCode = (hashCode * 59) + this.SupplierInvoiceStatus.GetHashCode();
                }
                if (this.SaleAndPurchaseChannel != null)
                {
                    hashCode = (hashCode * 59) + this.SaleAndPurchaseChannel.GetHashCode();
                }
                if (this.PettyCashName != null)
                {
                    hashCode = (hashCode * 59) + this.PettyCashName.GetHashCode();
                }
                if (this.PettyCashId != null)
                {
                    hashCode = (hashCode * 59) + this.PettyCashId.GetHashCode();
                }
                if (this.ChequeId != null)
                {
                    hashCode = (hashCode * 59) + this.ChequeId.GetHashCode();
                }
                if (this.CreditCardId != null)
                {
                    hashCode = (hashCode * 59) + this.CreditCardId.GetHashCode();
                }
                if (this.OtherChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.OtherChannelId.GetHashCode();
                }
                if (this.ChequeCashingDate != null)
                {
                    hashCode = (hashCode * 59) + this.ChequeCashingDate.GetHashCode();
                }
                if (this.AutoCreateWithholdingTax != null)
                {
                    hashCode = (hashCode * 59) + this.AutoCreateWithholdingTax.GetHashCode();
                }
                if (this.WithholdingTaxIncomeType != null)
                {
                    hashCode = (hashCode * 59) + this.WithholdingTaxIncomeType.GetHashCode();
                }
                if (this.WithholdingTaxIncomeDescription != null)
                {
                    hashCode = (hashCode * 59) + this.WithholdingTaxIncomeDescription.GetHashCode();
                }
                if (this.WithholdingTaxEntity != null)
                {
                    hashCode = (hashCode * 59) + this.WithholdingTaxEntity.GetHashCode();
                }
                if (this.ExchangeRatio != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeRatio.GetHashCode();
                }
                if (this.IsManualRate != null)
                {
                    hashCode = (hashCode * 59) + this.IsManualRate.GetHashCode();
                }
                if (this.ExchangeRateDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeRateDate.GetHashCode();
                }
                if (this.CompanyCurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyCurrencyId.GetHashCode();
                }
                if (this.ForeignInlineVatValue != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignInlineVatValue.GetHashCode();
                }
                if (this.ForeignInlineDiscountValue != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignInlineDiscountValue.GetHashCode();
                }
                if (this.ForeignVatAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignVatAmount.GetHashCode();
                }
                if (this.ForeignDeductionAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignDeductionAmount.GetHashCode();
                }
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.IsManualVat != null)
                {
                    hashCode = (hashCode * 59) + this.IsManualVat.GetHashCode();
                }
                if (this.ExternalDocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalDocumentId.GetHashCode();
                }
                if (this.BatchId != null)
                {
                    hashCode = (hashCode * 59) + this.BatchId.GetHashCode();
                }
                if (this.DocumentReferences != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentReferences.GetHashCode();
                }
                if (this.ReferencedToMe != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedToMe.GetHashCode();
                }
                if (this.ReferencedByMe != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedByMe.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusInt.GetHashCode();
                if (this.PartialPaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PartialPaymentMethod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RefDocumentStatus.GetHashCode();
                if (this.RefDocumentStatusString != null)
                {
                    hashCode = (hashCode * 59) + this.RefDocumentStatusString.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsReCalculate.GetHashCode();
                hashCode = (hashCode * 59) + this.InlineVatValue.GetHashCode();
                hashCode = (hashCode * 59) + this.InlineDiscountValue.GetHashCode();
                hashCode = (hashCode * 59) + this.IsMigrate.GetHashCode();
                if (this.VatValue != null)
                {
                    hashCode = (hashCode * 59) + this.VatValue.GetHashCode();
                }
                if (this.DeductionAmount != null)
                {
                    hashCode = (hashCode * 59) + this.DeductionAmount.GetHashCode();
                }
                if (this.PaymentDeductionType != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDeductionType.GetHashCode();
                }
                if (this.DocumentDeductionType != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentDeductionType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsInlineDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.IsInlineVat.GetHashCode();
                hashCode = (hashCode * 59) + this.ContactId.GetHashCode();
                hashCode = (hashCode * 59) + this.ValueExcludeVat.GetHashCode();
                hashCode = (hashCode * 59) + this.RoundingAdjustment.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.InternalNotes != null)
                {
                    hashCode = (hashCode * 59) + this.InternalNotes.GetHashCode();
                }
                if (this.ProjectName != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectName.GetHashCode();
                }
                if (this.ProjectNameAndProjectDeatil != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectNameAndProjectDeatil.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // BankAccountNumber (string) maxLength
            if (this.BankAccountNumber != null && this.BankAccountNumber.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankAccountNumber, length must be less than 50.", new [] { "BankAccountNumber" });
            }

            // BankAccountNumber (string) minLength
            if (this.BankAccountNumber != null && this.BankAccountNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankAccountNumber, length must be greater than 0.", new [] { "BankAccountNumber" });
            }

            // CheckNumber (string) maxLength
            if (this.CheckNumber != null && this.CheckNumber.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CheckNumber, length must be less than 50.", new [] { "CheckNumber" });
            }

            // CheckNumber (string) minLength
            if (this.CheckNumber != null && this.CheckNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CheckNumber, length must be greater than 0.", new [] { "CheckNumber" });
            }

            // CheckBankId (string) maxLength
            if (this.CheckBankId != null && this.CheckBankId.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CheckBankId, length must be less than 2147483647.", new [] { "CheckBankId" });
            }

            // CheckBankId (string) minLength
            if (this.CheckBankId != null && this.CheckBankId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CheckBankId, length must be greater than 0.", new [] { "CheckBankId" });
            }

            // TransferBankId (string) maxLength
            if (this.TransferBankId != null && this.TransferBankId.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransferBankId, length must be less than 2147483647.", new [] { "TransferBankId" });
            }

            // TransferBankId (string) minLength
            if (this.TransferBankId != null && this.TransferBankId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransferBankId, length must be greater than 0.", new [] { "TransferBankId" });
            }

            // ExternalDocumentId (string) maxLength
            if (this.ExternalDocumentId != null && this.ExternalDocumentId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalDocumentId, length must be less than 36.", new [] { "ExternalDocumentId" });
            }

            // BatchId (string) maxLength
            if (this.BatchId != null && this.BatchId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BatchId, length must be less than 36.", new [] { "BatchId" });
            }

            yield break;
        }
    }

}

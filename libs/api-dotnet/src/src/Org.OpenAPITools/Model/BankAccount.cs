/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BankAccount
    /// </summary>
    [DataContract(Name = "BankAccount")]
    public partial class BankAccount : IEquatable<BankAccount>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public BankingChannelsStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccount" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyId">companyId (required).</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="bankId">bankId.</param>
        /// <param name="branch">branch.</param>
        /// <param name="accountName">accountName.</param>
        /// <param name="accountType">accountType.</param>
        /// <param name="lastReconciledDate">lastReconciledDate.</param>
        /// <param name="lastOutstandingBalanceDate">lastOutstandingBalanceDate.</param>
        /// <param name="lastStatementDate">lastStatementDate.</param>
        /// <param name="lastStatementDocumentId">lastStatementDocumentId.</param>
        /// <param name="synced">synced.</param>
        /// <param name="outstandingBalance">outstandingBalance.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="modifiedOn">modifiedOn.</param>
        /// <param name="isDefault">isDefault.</param>
        /// <param name="isDelete">isDelete (default to false).</param>
        /// <param name="lastAvailableBalance">lastAvailableBalance.</param>
        /// <param name="lastOutstandingBalance">lastOutstandingBalance.</param>
        /// <param name="chartOfAccountId">chartOfAccountId.</param>
        /// <param name="chartOfAccount">chartOfAccount.</param>
        /// <param name="bank">bank.</param>
        /// <param name="company">company.</param>
        /// <param name="status">status.</param>
        /// <param name="bankName">bankName.</param>
        /// <param name="qrCode">qrCode.</param>
        public BankAccount(long id = default(long), long companyId = default(long), string accountNumber = default(string), int bankId = default(int), string branch = default(string), string accountName = default(string), int accountType = default(int), DateTime? lastReconciledDate = default(DateTime?), DateTime? lastOutstandingBalanceDate = default(DateTime?), DateTime? lastStatementDate = default(DateTime?), string lastStatementDocumentId = default(string), bool synced = default(bool), decimal outstandingBalance = default(decimal), DateTime createdOn = default(DateTime), DateTime modifiedOn = default(DateTime), bool isDefault = default(bool), bool isDelete = false, decimal lastAvailableBalance = default(decimal), decimal lastOutstandingBalance = default(decimal), long? chartOfAccountId = default(long?), OneOfChartOfAccount chartOfAccount = default(OneOfChartOfAccount), OneOfBank bank = default(OneOfBank), OneOfCompany company = default(OneOfCompany), BankingChannelsStatus? status = default(BankingChannelsStatus?), string bankName = default(string), string qrCode = default(string))
        {
            this.CompanyId = companyId;
            this.Id = id;
            this.AccountNumber = accountNumber;
            this.BankId = bankId;
            this.Branch = branch;
            this.AccountName = accountName;
            this.AccountType = accountType;
            this.LastReconciledDate = lastReconciledDate;
            this.LastOutstandingBalanceDate = lastOutstandingBalanceDate;
            this.LastStatementDate = lastStatementDate;
            this.LastStatementDocumentId = lastStatementDocumentId;
            this.Synced = synced;
            this.OutstandingBalance = outstandingBalance;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.IsDefault = isDefault;
            this.IsDelete = isDelete;
            this.LastAvailableBalance = lastAvailableBalance;
            this.LastOutstandingBalance = lastOutstandingBalance;
            this.ChartOfAccountId = chartOfAccountId;
            this.ChartOfAccount = chartOfAccount;
            this.Bank = bank;
            this.Company = company;
            this.Status = status;
            this.BankName = bankName;
            this.QrCode = qrCode;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", IsRequired = true, EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name = "accountNumber", EmitDefaultValue = true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets BankId
        /// </summary>
        [DataMember(Name = "bankId", EmitDefaultValue = false)]
        public int BankId { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name = "branch", EmitDefaultValue = true)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name = "accountName", EmitDefaultValue = true)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name = "accountType", EmitDefaultValue = false)]
        public int AccountType { get; set; }

        /// <summary>
        /// Gets or Sets LastReconciledDate
        /// </summary>
        [DataMember(Name = "lastReconciledDate", EmitDefaultValue = true)]
        public DateTime? LastReconciledDate { get; set; }

        /// <summary>
        /// Gets or Sets LastOutstandingBalanceDate
        /// </summary>
        [DataMember(Name = "lastOutstandingBalanceDate", EmitDefaultValue = true)]
        public DateTime? LastOutstandingBalanceDate { get; set; }

        /// <summary>
        /// Gets or Sets LastStatementDate
        /// </summary>
        [DataMember(Name = "lastStatementDate", EmitDefaultValue = true)]
        public DateTime? LastStatementDate { get; set; }

        /// <summary>
        /// Gets or Sets LastStatementDocumentId
        /// </summary>
        [DataMember(Name = "lastStatementDocumentId", EmitDefaultValue = true)]
        public string LastStatementDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets Synced
        /// </summary>
        [DataMember(Name = "synced", EmitDefaultValue = true)]
        public bool Synced { get; set; }

        /// <summary>
        /// Gets or Sets OutstandingBalance
        /// </summary>
        [DataMember(Name = "outstandingBalance", EmitDefaultValue = false)]
        public decimal OutstandingBalance { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets LastAvailableBalance
        /// </summary>
        [DataMember(Name = "lastAvailableBalance", EmitDefaultValue = false)]
        public decimal LastAvailableBalance { get; set; }

        /// <summary>
        /// Gets or Sets LastOutstandingBalance
        /// </summary>
        [DataMember(Name = "lastOutstandingBalance", EmitDefaultValue = false)]
        public decimal LastOutstandingBalance { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccountId
        /// </summary>
        [DataMember(Name = "chartOfAccountId", EmitDefaultValue = true)]
        public long? ChartOfAccountId { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccount
        /// </summary>
        [DataMember(Name = "chartOfAccount", EmitDefaultValue = true)]
        public OneOfChartOfAccount ChartOfAccount { get; set; }

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>
        [DataMember(Name = "bank", EmitDefaultValue = true)]
        public OneOfBank Bank { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public OneOfCompany Company { get; set; }

        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name = "bankName", EmitDefaultValue = true)]
        public string BankName { get; set; }

        /// <summary>
        /// Gets or Sets QrCode
        /// </summary>
        [DataMember(Name = "qrCode", EmitDefaultValue = true)]
        public string QrCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankAccount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  BankId: ").Append(BankId).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  LastReconciledDate: ").Append(LastReconciledDate).Append("\n");
            sb.Append("  LastOutstandingBalanceDate: ").Append(LastOutstandingBalanceDate).Append("\n");
            sb.Append("  LastStatementDate: ").Append(LastStatementDate).Append("\n");
            sb.Append("  LastStatementDocumentId: ").Append(LastStatementDocumentId).Append("\n");
            sb.Append("  Synced: ").Append(Synced).Append("\n");
            sb.Append("  OutstandingBalance: ").Append(OutstandingBalance).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  LastAvailableBalance: ").Append(LastAvailableBalance).Append("\n");
            sb.Append("  LastOutstandingBalance: ").Append(LastOutstandingBalance).Append("\n");
            sb.Append("  ChartOfAccountId: ").Append(ChartOfAccountId).Append("\n");
            sb.Append("  ChartOfAccount: ").Append(ChartOfAccount).Append("\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  QrCode: ").Append(QrCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankAccount);
        }

        /// <summary>
        /// Returns true if BankAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of BankAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankAccount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.BankId == input.BankId ||
                    this.BankId.Equals(input.BankId)
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    this.AccountType.Equals(input.AccountType)
                ) && 
                (
                    this.LastReconciledDate == input.LastReconciledDate ||
                    (this.LastReconciledDate != null &&
                    this.LastReconciledDate.Equals(input.LastReconciledDate))
                ) && 
                (
                    this.LastOutstandingBalanceDate == input.LastOutstandingBalanceDate ||
                    (this.LastOutstandingBalanceDate != null &&
                    this.LastOutstandingBalanceDate.Equals(input.LastOutstandingBalanceDate))
                ) && 
                (
                    this.LastStatementDate == input.LastStatementDate ||
                    (this.LastStatementDate != null &&
                    this.LastStatementDate.Equals(input.LastStatementDate))
                ) && 
                (
                    this.LastStatementDocumentId == input.LastStatementDocumentId ||
                    (this.LastStatementDocumentId != null &&
                    this.LastStatementDocumentId.Equals(input.LastStatementDocumentId))
                ) && 
                (
                    this.Synced == input.Synced ||
                    this.Synced.Equals(input.Synced)
                ) && 
                (
                    this.OutstandingBalance == input.OutstandingBalance ||
                    this.OutstandingBalance.Equals(input.OutstandingBalance)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    this.IsDefault.Equals(input.IsDefault)
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.LastAvailableBalance == input.LastAvailableBalance ||
                    this.LastAvailableBalance.Equals(input.LastAvailableBalance)
                ) && 
                (
                    this.LastOutstandingBalance == input.LastOutstandingBalance ||
                    this.LastOutstandingBalance.Equals(input.LastOutstandingBalance)
                ) && 
                (
                    this.ChartOfAccountId == input.ChartOfAccountId ||
                    (this.ChartOfAccountId != null &&
                    this.ChartOfAccountId.Equals(input.ChartOfAccountId))
                ) && 
                (
                    this.ChartOfAccount == input.ChartOfAccount ||
                    (this.ChartOfAccount != null &&
                    this.ChartOfAccount.Equals(input.ChartOfAccount))
                ) && 
                (
                    this.Bank == input.Bank ||
                    (this.Bank != null &&
                    this.Bank.Equals(input.Bank))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.QrCode == input.QrCode ||
                    (this.QrCode != null &&
                    this.QrCode.Equals(input.QrCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BankId.GetHashCode();
                if (this.Branch != null)
                {
                    hashCode = (hashCode * 59) + this.Branch.GetHashCode();
                }
                if (this.AccountName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                if (this.LastReconciledDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastReconciledDate.GetHashCode();
                }
                if (this.LastOutstandingBalanceDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastOutstandingBalanceDate.GetHashCode();
                }
                if (this.LastStatementDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastStatementDate.GetHashCode();
                }
                if (this.LastStatementDocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.LastStatementDocumentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Synced.GetHashCode();
                hashCode = (hashCode * 59) + this.OutstandingBalance.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDefault.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                hashCode = (hashCode * 59) + this.LastAvailableBalance.GetHashCode();
                hashCode = (hashCode * 59) + this.LastOutstandingBalance.GetHashCode();
                if (this.ChartOfAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.ChartOfAccountId.GetHashCode();
                }
                if (this.ChartOfAccount != null)
                {
                    hashCode = (hashCode * 59) + this.ChartOfAccount.GetHashCode();
                }
                if (this.Bank != null)
                {
                    hashCode = (hashCode * 59) + this.Bank.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.BankName != null)
                {
                    hashCode = (hashCode * 59) + this.BankName.GetHashCode();
                }
                if (this.QrCode != null)
                {
                    hashCode = (hashCode * 59) + this.QrCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // AccountNumber (string) maxLength
            if (this.AccountNumber != null && this.AccountNumber.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountNumber, length must be less than 50.", new [] { "AccountNumber" });
            }

            // AccountNumber (string) minLength
            if (this.AccountNumber != null && this.AccountNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountNumber, length must be greater than 0.", new [] { "AccountNumber" });
            }

            yield break;
        }
    }

}

/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Company
    /// </summary>
    [DataContract(Name = "Company")]
    public partial class Company : IEquatable<Company>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CompanyType
        /// </summary>
        [DataMember(Name = "companyType", EmitDefaultValue = false)]
        public CompanyTypeEnum? CompanyType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Company" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Company() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Company" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="nameLocal">nameLocal (required).</param>
        /// <param name="nameForeign">nameForeign.</param>
        /// <param name="addressLocal">addressLocal.</param>
        /// <param name="addressForeign">addressForeign.</param>
        /// <param name="companyTaxId">companyTaxId.</param>
        /// <param name="logoImage">logoImage.</param>
        /// <param name="fax">fax.</param>
        /// <param name="phone1">phone1.</param>
        /// <param name="phone2">phone2.</param>
        /// <param name="phone3">phone3.</param>
        /// <param name="websites">websites.</param>
        /// <param name="companyType">companyType.</param>
        /// <param name="createdOn">createdOn (required).</param>
        /// <param name="modifiedOn">modifiedOn (required).</param>
        /// <param name="isDefault">isDefault.</param>
        /// <param name="addressLocalLine2">addressLocalLine2.</param>
        /// <param name="addressForeignLine2">addressForeignLine2.</param>
        /// <param name="vatRate">vatRate.</param>
        /// <param name="isVat">isVat (default to false).</param>
        /// <param name="email">email.</param>
        /// <param name="branch">branch.</param>
        /// <param name="addressLocalLine3">addressLocalLine3.</param>
        /// <param name="addressForeignLine3">addressForeignLine3.</param>
        /// <param name="contactPerson">contactPerson.</param>
        /// <param name="isActive">isActive (default to false).</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="galleryId">galleryId.</param>
        /// <param name="branchForeign">branchForeign.</param>
        /// <param name="branchCode">branchCode.</param>
        /// <param name="contactType">contactType (required).</param>
        /// <param name="defaultCreditDays">defaultCreditDays.</param>
        /// <param name="logoType">logoType (required).</param>
        /// <param name="isRegistered">isRegistered (default to false).</param>
        /// <param name="isAdvance">isAdvance (required).</param>
        /// <param name="address">address.</param>
        /// <param name="provinceId">provinceId.</param>
        /// <param name="amphurId">amphurId.</param>
        /// <param name="districtId">districtId.</param>
        /// <param name="zipCode">zipCode.</param>
        /// <param name="supportCode">supportCode.</param>
        /// <param name="salesType">salesType.</param>
        /// <param name="companyPreferences">companyPreferences.</param>
        /// <param name="payrollPreferences">payrollPreferences.</param>
        /// <param name="companySubscription">companySubscription.</param>
        public Company(long id = default(long), string nameLocal = default(string), string nameForeign = default(string), string addressLocal = default(string), string addressForeign = default(string), string companyTaxId = default(string), string logoImage = default(string), string fax = default(string), string phone1 = default(string), string phone2 = default(string), string phone3 = default(string), string websites = default(string), CompanyTypeEnum? companyType = default(CompanyTypeEnum?), DateTime createdOn = default(DateTime), DateTime modifiedOn = default(DateTime), bool isDefault = default(bool), string addressLocalLine2 = default(string), string addressForeignLine2 = default(string), int vatRate = default(int), bool isVat = false, string email = default(string), string branch = default(string), string addressLocalLine3 = default(string), string addressForeignLine3 = default(string), string contactPerson = default(string), bool isActive = false, string remarks = default(string), long? galleryId = default(long?), string branchForeign = default(string), string branchCode = default(string), int contactType = default(int), int? defaultCreditDays = default(int?), int logoType = default(int), bool isRegistered = false, bool isAdvance = default(bool), string address = default(string), int? provinceId = default(int?), int? amphurId = default(int?), int? districtId = default(int?), string zipCode = default(string), string supportCode = default(string), OneOfSalesType salesType = default(OneOfSalesType), OneOfCompanyPreferences companyPreferences = default(OneOfCompanyPreferences), OneOfPayrollPreferences payrollPreferences = default(OneOfPayrollPreferences), List<CompanySubscription> companySubscription = default(List<CompanySubscription>))
        {
            // to ensure "nameLocal" is required (not null)
            if (nameLocal == null) {
                throw new ArgumentNullException("nameLocal is a required property for Company and cannot be null");
            }
            this.NameLocal = nameLocal;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.ContactType = contactType;
            this.LogoType = logoType;
            this.IsAdvance = isAdvance;
            this.Id = id;
            this.NameForeign = nameForeign;
            this.AddressLocal = addressLocal;
            this.AddressForeign = addressForeign;
            this.CompanyTaxId = companyTaxId;
            this.LogoImage = logoImage;
            this.Fax = fax;
            this.Phone1 = phone1;
            this.Phone2 = phone2;
            this.Phone3 = phone3;
            this.Websites = websites;
            this.CompanyType = companyType;
            this.IsDefault = isDefault;
            this.AddressLocalLine2 = addressLocalLine2;
            this.AddressForeignLine2 = addressForeignLine2;
            this.VatRate = vatRate;
            this.IsVat = isVat;
            this.Email = email;
            this.Branch = branch;
            this.AddressLocalLine3 = addressLocalLine3;
            this.AddressForeignLine3 = addressForeignLine3;
            this.ContactPerson = contactPerson;
            this.IsActive = isActive;
            this.Remarks = remarks;
            this.GalleryId = galleryId;
            this.BranchForeign = branchForeign;
            this.BranchCode = branchCode;
            this.DefaultCreditDays = defaultCreditDays;
            this.IsRegistered = isRegistered;
            this.Address = address;
            this.ProvinceId = provinceId;
            this.AmphurId = amphurId;
            this.DistrictId = districtId;
            this.ZipCode = zipCode;
            this.SupportCode = supportCode;
            this.SalesType = salesType;
            this.CompanyPreferences = companyPreferences;
            this.PayrollPreferences = payrollPreferences;
            this.CompanySubscription = companySubscription;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets NameLocal
        /// </summary>
        [DataMember(Name = "nameLocal", IsRequired = true, EmitDefaultValue = false)]
        public string NameLocal { get; set; }

        /// <summary>
        /// Gets or Sets NameForeign
        /// </summary>
        [DataMember(Name = "nameForeign", EmitDefaultValue = true)]
        public string NameForeign { get; set; }

        /// <summary>
        /// Gets or Sets AddressLocal
        /// </summary>
        [DataMember(Name = "addressLocal", EmitDefaultValue = true)]
        public string AddressLocal { get; set; }

        /// <summary>
        /// Gets or Sets AddressForeign
        /// </summary>
        [DataMember(Name = "addressForeign", EmitDefaultValue = true)]
        public string AddressForeign { get; set; }

        /// <summary>
        /// Gets or Sets CompanyTaxId
        /// </summary>
        [DataMember(Name = "companyTaxId", EmitDefaultValue = true)]
        public string CompanyTaxId { get; set; }

        /// <summary>
        /// Gets or Sets LogoImage
        /// </summary>
        [DataMember(Name = "logoImage", EmitDefaultValue = true)]
        public string LogoImage { get; set; }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name = "fax", EmitDefaultValue = true)]
        public string Fax { get; set; }

        /// <summary>
        /// Gets or Sets Phone1
        /// </summary>
        [DataMember(Name = "phone1", EmitDefaultValue = true)]
        public string Phone1 { get; set; }

        /// <summary>
        /// Gets or Sets Phone2
        /// </summary>
        [DataMember(Name = "phone2", EmitDefaultValue = true)]
        public string Phone2 { get; set; }

        /// <summary>
        /// Gets or Sets Phone3
        /// </summary>
        [DataMember(Name = "phone3", EmitDefaultValue = true)]
        public string Phone3 { get; set; }

        /// <summary>
        /// Gets or Sets Websites
        /// </summary>
        [DataMember(Name = "websites", EmitDefaultValue = true)]
        public string Websites { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets AddressLocalLine2
        /// </summary>
        [DataMember(Name = "addressLocalLine2", EmitDefaultValue = true)]
        public string AddressLocalLine2 { get; set; }

        /// <summary>
        /// Gets or Sets AddressForeignLine2
        /// </summary>
        [DataMember(Name = "addressForeignLine2", EmitDefaultValue = true)]
        public string AddressForeignLine2 { get; set; }

        /// <summary>
        /// Gets or Sets VatRate
        /// </summary>
        [DataMember(Name = "vatRate", EmitDefaultValue = false)]
        public int VatRate { get; set; }

        /// <summary>
        /// Gets or Sets IsVat
        /// </summary>
        [DataMember(Name = "isVat", EmitDefaultValue = true)]
        public bool IsVat { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name = "branch", EmitDefaultValue = true)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets AddressLocalLine3
        /// </summary>
        [DataMember(Name = "addressLocalLine3", EmitDefaultValue = true)]
        public string AddressLocalLine3 { get; set; }

        /// <summary>
        /// Gets or Sets AddressForeignLine3
        /// </summary>
        [DataMember(Name = "addressForeignLine3", EmitDefaultValue = true)]
        public string AddressForeignLine3 { get; set; }

        /// <summary>
        /// Gets or Sets ContactPerson
        /// </summary>
        [DataMember(Name = "contactPerson", EmitDefaultValue = true)]
        public string ContactPerson { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name = "remarks", EmitDefaultValue = true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets GalleryId
        /// </summary>
        [DataMember(Name = "galleryId", EmitDefaultValue = true)]
        public long? GalleryId { get; set; }

        /// <summary>
        /// Gets or Sets BranchForeign
        /// </summary>
        [DataMember(Name = "branchForeign", EmitDefaultValue = true)]
        public string BranchForeign { get; set; }

        /// <summary>
        /// Gets or Sets BranchCode
        /// </summary>
        [DataMember(Name = "branchCode", EmitDefaultValue = true)]
        public string BranchCode { get; set; }

        /// <summary>
        /// Gets or Sets ContactType
        /// </summary>
        [DataMember(Name = "contactType", IsRequired = true, EmitDefaultValue = false)]
        public int ContactType { get; set; }

        /// <summary>
        /// Gets or Sets DefaultCreditDays
        /// </summary>
        [DataMember(Name = "defaultCreditDays", EmitDefaultValue = true)]
        public int? DefaultCreditDays { get; set; }

        /// <summary>
        /// Gets or Sets LogoType
        /// </summary>
        [DataMember(Name = "logoType", IsRequired = true, EmitDefaultValue = false)]
        public int LogoType { get; set; }

        /// <summary>
        /// Gets or Sets IsRegistered
        /// </summary>
        [DataMember(Name = "isRegistered", EmitDefaultValue = true)]
        public bool IsRegistered { get; set; }

        /// <summary>
        /// Gets or Sets IsAdvance
        /// </summary>
        [DataMember(Name = "isAdvance", IsRequired = true, EmitDefaultValue = true)]
        public bool IsAdvance { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets ProvinceId
        /// </summary>
        [DataMember(Name = "provinceId", EmitDefaultValue = true)]
        public int? ProvinceId { get; set; }

        /// <summary>
        /// Gets or Sets AmphurId
        /// </summary>
        [DataMember(Name = "amphurId", EmitDefaultValue = true)]
        public int? AmphurId { get; set; }

        /// <summary>
        /// Gets or Sets DistrictId
        /// </summary>
        [DataMember(Name = "districtId", EmitDefaultValue = true)]
        public int? DistrictId { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [DataMember(Name = "zipCode", EmitDefaultValue = true)]
        public string ZipCode { get; set; }

        /// <summary>
        /// Gets or Sets SupportCode
        /// </summary>
        [DataMember(Name = "supportCode", EmitDefaultValue = true)]
        public string SupportCode { get; set; }

        /// <summary>
        /// Gets or Sets SalesType
        /// </summary>
        [DataMember(Name = "salesType", EmitDefaultValue = true)]
        public OneOfSalesType SalesType { get; set; }

        /// <summary>
        /// Gets or Sets CompanyPreferences
        /// </summary>
        [DataMember(Name = "companyPreferences", EmitDefaultValue = true)]
        public OneOfCompanyPreferences CompanyPreferences { get; set; }

        /// <summary>
        /// Gets or Sets PayrollPreferences
        /// </summary>
        [DataMember(Name = "payrollPreferences", EmitDefaultValue = true)]
        public OneOfPayrollPreferences PayrollPreferences { get; set; }

        /// <summary>
        /// Gets or Sets CompanySubscription
        /// </summary>
        [DataMember(Name = "companySubscription", EmitDefaultValue = true)]
        public List<CompanySubscription> CompanySubscription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Company {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NameLocal: ").Append(NameLocal).Append("\n");
            sb.Append("  NameForeign: ").Append(NameForeign).Append("\n");
            sb.Append("  AddressLocal: ").Append(AddressLocal).Append("\n");
            sb.Append("  AddressForeign: ").Append(AddressForeign).Append("\n");
            sb.Append("  CompanyTaxId: ").Append(CompanyTaxId).Append("\n");
            sb.Append("  LogoImage: ").Append(LogoImage).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Phone1: ").Append(Phone1).Append("\n");
            sb.Append("  Phone2: ").Append(Phone2).Append("\n");
            sb.Append("  Phone3: ").Append(Phone3).Append("\n");
            sb.Append("  Websites: ").Append(Websites).Append("\n");
            sb.Append("  CompanyType: ").Append(CompanyType).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  AddressLocalLine2: ").Append(AddressLocalLine2).Append("\n");
            sb.Append("  AddressForeignLine2: ").Append(AddressForeignLine2).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  IsVat: ").Append(IsVat).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  AddressLocalLine3: ").Append(AddressLocalLine3).Append("\n");
            sb.Append("  AddressForeignLine3: ").Append(AddressForeignLine3).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  GalleryId: ").Append(GalleryId).Append("\n");
            sb.Append("  BranchForeign: ").Append(BranchForeign).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  ContactType: ").Append(ContactType).Append("\n");
            sb.Append("  DefaultCreditDays: ").Append(DefaultCreditDays).Append("\n");
            sb.Append("  LogoType: ").Append(LogoType).Append("\n");
            sb.Append("  IsRegistered: ").Append(IsRegistered).Append("\n");
            sb.Append("  IsAdvance: ").Append(IsAdvance).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ProvinceId: ").Append(ProvinceId).Append("\n");
            sb.Append("  AmphurId: ").Append(AmphurId).Append("\n");
            sb.Append("  DistrictId: ").Append(DistrictId).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  SupportCode: ").Append(SupportCode).Append("\n");
            sb.Append("  SalesType: ").Append(SalesType).Append("\n");
            sb.Append("  CompanyPreferences: ").Append(CompanyPreferences).Append("\n");
            sb.Append("  PayrollPreferences: ").Append(PayrollPreferences).Append("\n");
            sb.Append("  CompanySubscription: ").Append(CompanySubscription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Company);
        }

        /// <summary>
        /// Returns true if Company instances are equal
        /// </summary>
        /// <param name="input">Instance of Company to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Company input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.NameLocal == input.NameLocal ||
                    (this.NameLocal != null &&
                    this.NameLocal.Equals(input.NameLocal))
                ) && 
                (
                    this.NameForeign == input.NameForeign ||
                    (this.NameForeign != null &&
                    this.NameForeign.Equals(input.NameForeign))
                ) && 
                (
                    this.AddressLocal == input.AddressLocal ||
                    (this.AddressLocal != null &&
                    this.AddressLocal.Equals(input.AddressLocal))
                ) && 
                (
                    this.AddressForeign == input.AddressForeign ||
                    (this.AddressForeign != null &&
                    this.AddressForeign.Equals(input.AddressForeign))
                ) && 
                (
                    this.CompanyTaxId == input.CompanyTaxId ||
                    (this.CompanyTaxId != null &&
                    this.CompanyTaxId.Equals(input.CompanyTaxId))
                ) && 
                (
                    this.LogoImage == input.LogoImage ||
                    (this.LogoImage != null &&
                    this.LogoImage.Equals(input.LogoImage))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.Phone1 == input.Phone1 ||
                    (this.Phone1 != null &&
                    this.Phone1.Equals(input.Phone1))
                ) && 
                (
                    this.Phone2 == input.Phone2 ||
                    (this.Phone2 != null &&
                    this.Phone2.Equals(input.Phone2))
                ) && 
                (
                    this.Phone3 == input.Phone3 ||
                    (this.Phone3 != null &&
                    this.Phone3.Equals(input.Phone3))
                ) && 
                (
                    this.Websites == input.Websites ||
                    (this.Websites != null &&
                    this.Websites.Equals(input.Websites))
                ) && 
                (
                    this.CompanyType == input.CompanyType ||
                    this.CompanyType.Equals(input.CompanyType)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    this.IsDefault.Equals(input.IsDefault)
                ) && 
                (
                    this.AddressLocalLine2 == input.AddressLocalLine2 ||
                    (this.AddressLocalLine2 != null &&
                    this.AddressLocalLine2.Equals(input.AddressLocalLine2))
                ) && 
                (
                    this.AddressForeignLine2 == input.AddressForeignLine2 ||
                    (this.AddressForeignLine2 != null &&
                    this.AddressForeignLine2.Equals(input.AddressForeignLine2))
                ) && 
                (
                    this.VatRate == input.VatRate ||
                    this.VatRate.Equals(input.VatRate)
                ) && 
                (
                    this.IsVat == input.IsVat ||
                    this.IsVat.Equals(input.IsVat)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.AddressLocalLine3 == input.AddressLocalLine3 ||
                    (this.AddressLocalLine3 != null &&
                    this.AddressLocalLine3.Equals(input.AddressLocalLine3))
                ) && 
                (
                    this.AddressForeignLine3 == input.AddressForeignLine3 ||
                    (this.AddressForeignLine3 != null &&
                    this.AddressForeignLine3.Equals(input.AddressForeignLine3))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.GalleryId == input.GalleryId ||
                    (this.GalleryId != null &&
                    this.GalleryId.Equals(input.GalleryId))
                ) && 
                (
                    this.BranchForeign == input.BranchForeign ||
                    (this.BranchForeign != null &&
                    this.BranchForeign.Equals(input.BranchForeign))
                ) && 
                (
                    this.BranchCode == input.BranchCode ||
                    (this.BranchCode != null &&
                    this.BranchCode.Equals(input.BranchCode))
                ) && 
                (
                    this.ContactType == input.ContactType ||
                    this.ContactType.Equals(input.ContactType)
                ) && 
                (
                    this.DefaultCreditDays == input.DefaultCreditDays ||
                    (this.DefaultCreditDays != null &&
                    this.DefaultCreditDays.Equals(input.DefaultCreditDays))
                ) && 
                (
                    this.LogoType == input.LogoType ||
                    this.LogoType.Equals(input.LogoType)
                ) && 
                (
                    this.IsRegistered == input.IsRegistered ||
                    this.IsRegistered.Equals(input.IsRegistered)
                ) && 
                (
                    this.IsAdvance == input.IsAdvance ||
                    this.IsAdvance.Equals(input.IsAdvance)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.ProvinceId == input.ProvinceId ||
                    (this.ProvinceId != null &&
                    this.ProvinceId.Equals(input.ProvinceId))
                ) && 
                (
                    this.AmphurId == input.AmphurId ||
                    (this.AmphurId != null &&
                    this.AmphurId.Equals(input.AmphurId))
                ) && 
                (
                    this.DistrictId == input.DistrictId ||
                    (this.DistrictId != null &&
                    this.DistrictId.Equals(input.DistrictId))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.SupportCode == input.SupportCode ||
                    (this.SupportCode != null &&
                    this.SupportCode.Equals(input.SupportCode))
                ) && 
                (
                    this.SalesType == input.SalesType ||
                    (this.SalesType != null &&
                    this.SalesType.Equals(input.SalesType))
                ) && 
                (
                    this.CompanyPreferences == input.CompanyPreferences ||
                    (this.CompanyPreferences != null &&
                    this.CompanyPreferences.Equals(input.CompanyPreferences))
                ) && 
                (
                    this.PayrollPreferences == input.PayrollPreferences ||
                    (this.PayrollPreferences != null &&
                    this.PayrollPreferences.Equals(input.PayrollPreferences))
                ) && 
                (
                    this.CompanySubscription == input.CompanySubscription ||
                    this.CompanySubscription != null &&
                    input.CompanySubscription != null &&
                    this.CompanySubscription.SequenceEqual(input.CompanySubscription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.NameLocal != null)
                {
                    hashCode = (hashCode * 59) + this.NameLocal.GetHashCode();
                }
                if (this.NameForeign != null)
                {
                    hashCode = (hashCode * 59) + this.NameForeign.GetHashCode();
                }
                if (this.AddressLocal != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLocal.GetHashCode();
                }
                if (this.AddressForeign != null)
                {
                    hashCode = (hashCode * 59) + this.AddressForeign.GetHashCode();
                }
                if (this.CompanyTaxId != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyTaxId.GetHashCode();
                }
                if (this.LogoImage != null)
                {
                    hashCode = (hashCode * 59) + this.LogoImage.GetHashCode();
                }
                if (this.Fax != null)
                {
                    hashCode = (hashCode * 59) + this.Fax.GetHashCode();
                }
                if (this.Phone1 != null)
                {
                    hashCode = (hashCode * 59) + this.Phone1.GetHashCode();
                }
                if (this.Phone2 != null)
                {
                    hashCode = (hashCode * 59) + this.Phone2.GetHashCode();
                }
                if (this.Phone3 != null)
                {
                    hashCode = (hashCode * 59) + this.Phone3.GetHashCode();
                }
                if (this.Websites != null)
                {
                    hashCode = (hashCode * 59) + this.Websites.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CompanyType.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDefault.GetHashCode();
                if (this.AddressLocalLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLocalLine2.GetHashCode();
                }
                if (this.AddressForeignLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressForeignLine2.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VatRate.GetHashCode();
                hashCode = (hashCode * 59) + this.IsVat.GetHashCode();
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Branch != null)
                {
                    hashCode = (hashCode * 59) + this.Branch.GetHashCode();
                }
                if (this.AddressLocalLine3 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLocalLine3.GetHashCode();
                }
                if (this.AddressForeignLine3 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressForeignLine3.GetHashCode();
                }
                if (this.ContactPerson != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPerson.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                if (this.GalleryId != null)
                {
                    hashCode = (hashCode * 59) + this.GalleryId.GetHashCode();
                }
                if (this.BranchForeign != null)
                {
                    hashCode = (hashCode * 59) + this.BranchForeign.GetHashCode();
                }
                if (this.BranchCode != null)
                {
                    hashCode = (hashCode * 59) + this.BranchCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContactType.GetHashCode();
                if (this.DefaultCreditDays != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultCreditDays.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LogoType.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRegistered.GetHashCode();
                hashCode = (hashCode * 59) + this.IsAdvance.GetHashCode();
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.ProvinceId != null)
                {
                    hashCode = (hashCode * 59) + this.ProvinceId.GetHashCode();
                }
                if (this.AmphurId != null)
                {
                    hashCode = (hashCode * 59) + this.AmphurId.GetHashCode();
                }
                if (this.DistrictId != null)
                {
                    hashCode = (hashCode * 59) + this.DistrictId.GetHashCode();
                }
                if (this.ZipCode != null)
                {
                    hashCode = (hashCode * 59) + this.ZipCode.GetHashCode();
                }
                if (this.SupportCode != null)
                {
                    hashCode = (hashCode * 59) + this.SupportCode.GetHashCode();
                }
                if (this.SalesType != null)
                {
                    hashCode = (hashCode * 59) + this.SalesType.GetHashCode();
                }
                if (this.CompanyPreferences != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyPreferences.GetHashCode();
                }
                if (this.PayrollPreferences != null)
                {
                    hashCode = (hashCode * 59) + this.PayrollPreferences.GetHashCode();
                }
                if (this.CompanySubscription != null)
                {
                    hashCode = (hashCode * 59) + this.CompanySubscription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // NameLocal (string) minLength
            if (this.NameLocal != null && this.NameLocal.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameLocal, length must be greater than 1.", new [] { "NameLocal" });
            }

            // Fax (string) maxLength
            if (this.Fax != null && this.Fax.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Fax, length must be less than 50.", new [] { "Fax" });
            }

            // Fax (string) minLength
            if (this.Fax != null && this.Fax.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Fax, length must be greater than 0.", new [] { "Fax" });
            }

            // Phone1 (string) maxLength
            if (this.Phone1 != null && this.Phone1.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone1, length must be less than 50.", new [] { "Phone1" });
            }

            // Phone1 (string) minLength
            if (this.Phone1 != null && this.Phone1.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone1, length must be greater than 0.", new [] { "Phone1" });
            }

            // Phone2 (string) maxLength
            if (this.Phone2 != null && this.Phone2.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone2, length must be less than 50.", new [] { "Phone2" });
            }

            // Phone2 (string) minLength
            if (this.Phone2 != null && this.Phone2.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone2, length must be greater than 0.", new [] { "Phone2" });
            }

            // Phone3 (string) maxLength
            if (this.Phone3 != null && this.Phone3.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone3, length must be less than 50.", new [] { "Phone3" });
            }

            // Phone3 (string) minLength
            if (this.Phone3 != null && this.Phone3.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone3, length must be greater than 0.", new [] { "Phone3" });
            }

            // Websites (string) maxLength
            if (this.Websites != null && this.Websites.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Websites, length must be less than 2147483647.", new [] { "Websites" });
            }

            // Websites (string) minLength
            if (this.Websites != null && this.Websites.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Websites, length must be greater than 0.", new [] { "Websites" });
            }

            // CreatedOn (DateTime) minLength
            if (this.CreatedOn != null && this.CreatedOn.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedOn, length must be greater than 1.", new [] { "CreatedOn" });
            }

            // ModifiedOn (DateTime) minLength
            if (this.ModifiedOn != null && this.ModifiedOn.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifiedOn, length must be greater than 1.", new [] { "ModifiedOn" });
            }

            // BranchForeign (string) maxLength
            if (this.BranchForeign != null && this.BranchForeign.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BranchForeign, length must be less than 2147483647.", new [] { "BranchForeign" });
            }

            // BranchForeign (string) minLength
            if (this.BranchForeign != null && this.BranchForeign.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BranchForeign, length must be greater than 0.", new [] { "BranchForeign" });
            }

            // BranchCode (string) maxLength
            if (this.BranchCode != null && this.BranchCode.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BranchCode, length must be less than 50.", new [] { "BranchCode" });
            }

            // BranchCode (string) minLength
            if (this.BranchCode != null && this.BranchCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BranchCode, length must be greater than 0.", new [] { "BranchCode" });
            }

            yield break;
        }
    }

}

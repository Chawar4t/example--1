/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProductCategory
    /// </summary>
    [DataContract(Name = "ProductCategory")]
    public partial class ProductCategory : IEquatable<ProductCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCategory" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="isDelete">isDelete.</param>
        /// <param name="isShare">isShare.</param>
        /// <param name="resetTransactionId">resetTransactionId.</param>
        public ProductCategory(long id = default(long), string name = default(string), bool isDelete = default(bool), bool isShare = default(bool), long? resetTransactionId = default(long?))
        {
            this.Id = id;
            this.Name = name;
            this.IsDelete = isDelete;
            this.IsShare = isShare;
            this.ResetTransactionId = resetTransactionId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets IsShare
        /// </summary>
        [DataMember(Name = "isShare", EmitDefaultValue = true)]
        public bool IsShare { get; set; }

        /// <summary>
        /// Gets or Sets ResetTransactionId
        /// </summary>
        [DataMember(Name = "resetTransactionId", EmitDefaultValue = true)]
        public long? ResetTransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductCategory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  IsShare: ").Append(IsShare).Append("\n");
            sb.Append("  ResetTransactionId: ").Append(ResetTransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductCategory);
        }

        /// <summary>
        /// Returns true if ProductCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductCategory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.IsShare == input.IsShare ||
                    this.IsShare.Equals(input.IsShare)
                ) && 
                (
                    this.ResetTransactionId == input.ResetTransactionId ||
                    (this.ResetTransactionId != null &&
                    this.ResetTransactionId.Equals(input.ResetTransactionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                hashCode = (hashCode * 59) + this.IsShare.GetHashCode();
                if (this.ResetTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.ResetTransactionId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

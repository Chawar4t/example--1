/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentQueryAllOf
    /// </summary>
    [DataContract(Name = "DocumentQuery_allOf")]
    public partial class DocumentQueryAllOf : IEquatable<DocumentQueryAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentQueryAllOf" /> class.
        /// </summary>
        /// <param name="totalValue">totalValue.</param>
        /// <param name="totalVAT">totalVAT.</param>
        /// <param name="isReceived">isReceived.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="revenue">revenue.</param>
        /// <param name="expenses">expenses.</param>
        /// <param name="previousMonths">previousMonths.</param>
        /// <param name="previousYears">previousYears.</param>
        /// <param name="customDocumentModels">customDocumentModels.</param>
        public DocumentQueryAllOf(decimal totalValue = default(decimal), decimal totalVAT = default(decimal), bool isReceived = default(bool), List<DocumentTypes> documentType = default(List<DocumentTypes>), List<ListItem> revenue = default(List<ListItem>), List<ListItem> expenses = default(List<ListItem>), List<ListItem> previousMonths = default(List<ListItem>), List<ListItem> previousYears = default(List<ListItem>), List<CustomDocumentModel> customDocumentModels = default(List<CustomDocumentModel>))
        {
            this.TotalValue = totalValue;
            this.TotalVAT = totalVAT;
            this.IsReceived = isReceived;
            this.DocumentType = documentType;
            this.Revenue = revenue;
            this.Expenses = expenses;
            this.PreviousMonths = previousMonths;
            this.PreviousYears = previousYears;
            this.CustomDocumentModels = customDocumentModels;
        }

        /// <summary>
        /// Gets or Sets TotalValue
        /// </summary>
        [DataMember(Name = "totalValue", EmitDefaultValue = false)]
        public decimal TotalValue { get; set; }

        /// <summary>
        /// Gets or Sets TotalVAT
        /// </summary>
        [DataMember(Name = "totalVAT", EmitDefaultValue = false)]
        public decimal TotalVAT { get; set; }

        /// <summary>
        /// Gets or Sets IsReceived
        /// </summary>
        [DataMember(Name = "isReceived", EmitDefaultValue = true)]
        public bool IsReceived { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name = "documentType", EmitDefaultValue = true)]
        public List<DocumentTypes> DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets Revenue
        /// </summary>
        [DataMember(Name = "revenue", EmitDefaultValue = true)]
        public List<ListItem> Revenue { get; set; }

        /// <summary>
        /// Gets or Sets Expenses
        /// </summary>
        [DataMember(Name = "expenses", EmitDefaultValue = true)]
        public List<ListItem> Expenses { get; set; }

        /// <summary>
        /// Gets or Sets PreviousMonths
        /// </summary>
        [DataMember(Name = "previousMonths", EmitDefaultValue = true)]
        public List<ListItem> PreviousMonths { get; set; }

        /// <summary>
        /// Gets or Sets PreviousYears
        /// </summary>
        [DataMember(Name = "previousYears", EmitDefaultValue = true)]
        public List<ListItem> PreviousYears { get; set; }

        /// <summary>
        /// Gets or Sets CustomDocumentModels
        /// </summary>
        [DataMember(Name = "customDocumentModels", EmitDefaultValue = true)]
        public List<CustomDocumentModel> CustomDocumentModels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentQueryAllOf {\n");
            sb.Append("  TotalValue: ").Append(TotalValue).Append("\n");
            sb.Append("  TotalVAT: ").Append(TotalVAT).Append("\n");
            sb.Append("  IsReceived: ").Append(IsReceived).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  Expenses: ").Append(Expenses).Append("\n");
            sb.Append("  PreviousMonths: ").Append(PreviousMonths).Append("\n");
            sb.Append("  PreviousYears: ").Append(PreviousYears).Append("\n");
            sb.Append("  CustomDocumentModels: ").Append(CustomDocumentModels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentQueryAllOf);
        }

        /// <summary>
        /// Returns true if DocumentQueryAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentQueryAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentQueryAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalValue == input.TotalValue ||
                    this.TotalValue.Equals(input.TotalValue)
                ) && 
                (
                    this.TotalVAT == input.TotalVAT ||
                    this.TotalVAT.Equals(input.TotalVAT)
                ) && 
                (
                    this.IsReceived == input.IsReceived ||
                    this.IsReceived.Equals(input.IsReceived)
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    this.DocumentType != null &&
                    input.DocumentType != null &&
                    this.DocumentType.SequenceEqual(input.DocumentType)
                ) && 
                (
                    this.Revenue == input.Revenue ||
                    this.Revenue != null &&
                    input.Revenue != null &&
                    this.Revenue.SequenceEqual(input.Revenue)
                ) && 
                (
                    this.Expenses == input.Expenses ||
                    this.Expenses != null &&
                    input.Expenses != null &&
                    this.Expenses.SequenceEqual(input.Expenses)
                ) && 
                (
                    this.PreviousMonths == input.PreviousMonths ||
                    this.PreviousMonths != null &&
                    input.PreviousMonths != null &&
                    this.PreviousMonths.SequenceEqual(input.PreviousMonths)
                ) && 
                (
                    this.PreviousYears == input.PreviousYears ||
                    this.PreviousYears != null &&
                    input.PreviousYears != null &&
                    this.PreviousYears.SequenceEqual(input.PreviousYears)
                ) && 
                (
                    this.CustomDocumentModels == input.CustomDocumentModels ||
                    this.CustomDocumentModels != null &&
                    input.CustomDocumentModels != null &&
                    this.CustomDocumentModels.SequenceEqual(input.CustomDocumentModels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TotalValue.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalVAT.GetHashCode();
                hashCode = (hashCode * 59) + this.IsReceived.GetHashCode();
                if (this.DocumentType != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentType.GetHashCode();
                }
                if (this.Revenue != null)
                {
                    hashCode = (hashCode * 59) + this.Revenue.GetHashCode();
                }
                if (this.Expenses != null)
                {
                    hashCode = (hashCode * 59) + this.Expenses.GetHashCode();
                }
                if (this.PreviousMonths != null)
                {
                    hashCode = (hashCode * 59) + this.PreviousMonths.GetHashCode();
                }
                if (this.PreviousYears != null)
                {
                    hashCode = (hashCode * 59) + this.PreviousYears.GetHashCode();
                }
                if (this.CustomDocumentModels != null)
                {
                    hashCode = (hashCode * 59) + this.CustomDocumentModels.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

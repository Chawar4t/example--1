/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ReceivableInvoiceAllOf
    /// </summary>
    [DataContract(Name = "ReceivableInvoice_allOf")]
    public partial class ReceivableInvoiceAllOf : IEquatable<ReceivableInvoiceAllOf>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public ReceivableInvoiceStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets RuleCompileStatus
        /// </summary>
        [DataMember(Name = "ruleCompileStatus", EmitDefaultValue = false)]
        public RuleCompileStatus? RuleCompileStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivableInvoiceAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReceivableInvoiceAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivableInvoiceAllOf" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="contactId">contactId.</param>
        /// <param name="companyId">companyId (required).</param>
        /// <param name="status">status.</param>
        /// <param name="createdOn">createdOn (required).</param>
        /// <param name="modifiedOn">modifiedOn (required).</param>
        /// <param name="publishedOn">publishedOn (required).</param>
        /// <param name="documentDate">documentDate (required).</param>
        /// <param name="published">published.</param>
        /// <param name="approved">approved.</param>
        /// <param name="approvedBy">approvedBy.</param>
        /// <param name="approvedByClientId">approvedByClientId.</param>
        /// <param name="approvedImageUrl">approvedImageUrl.</param>
        /// <param name="documentSerial">documentSerial.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="name">name.</param>
        /// <param name="value">value.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="expectedDate">expectedDate.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="isDelete">isDelete.</param>
        /// <param name="vatRate">vatRate.</param>
        /// <param name="internalNotes">internalNotes.</param>
        /// <param name="galleryId">galleryId.</param>
        /// <param name="isVatInclusive">isVatInclusive.</param>
        /// <param name="salesId">salesId.</param>
        /// <param name="salesName">salesName.</param>
        /// <param name="roundingAdjustment">roundingAdjustment.</param>
        /// <param name="isInlineDiscount">isInlineDiscount (default to false).</param>
        /// <param name="isInlineVat">isInlineVat (default to false).</param>
        /// <param name="tax">tax.</param>
        /// <param name="documentSerialNoPrefix">documentSerialNoPrefix.</param>
        /// <param name="vatValue">vatValue.</param>
        /// <param name="resetTransactionId">resetTransactionId.</param>
        /// <param name="contact">contact.</param>
        /// <param name="approvedByClient">approvedByClient.</param>
        /// <param name="company">company.</param>
        /// <param name="createdByUser">createdByUser.</param>
        /// <param name="approvedByUser">approvedByUser.</param>
        /// <param name="sales">sales.</param>
        /// <param name="gallery">gallery.</param>
        /// <param name="inlineVatValue">inlineVatValue.</param>
        /// <param name="inlineDiscountValue">inlineDiscountValue.</param>
        /// <param name="ruleCompileStatus">ruleCompileStatus.</param>
        /// <param name="runningNumberType">runningNumberType.</param>
        /// <param name="runningModifiedOn">runningModifiedOn.</param>
        /// <param name="exemptAmount">exemptAmount.</param>
        /// <param name="vatableAmount">vatableAmount.</param>
        /// <param name="totalAfterDiscount">totalAfterDiscount.</param>
        /// <param name="subTotal">subTotal.</param>
        /// <param name="documentReferences">documentReferences.</param>
        /// <param name="referencedToMe">referencedToMe.</param>
        /// <param name="referencedByMe">referencedByMe.</param>
        /// <param name="statusInt">statusInt.</param>
        /// <param name="isReCalculate">isReCalculate.</param>
        /// <param name="partialPaymentMethod">partialPaymentMethod.</param>
        /// <param name="vatAmount">vatAmount.</param>
        /// <param name="isMigrate">isMigrate.</param>
        public ReceivableInvoiceAllOf(long id = default(long), long contactId = default(long), long companyId = default(long), ReceivableInvoiceStatus? status = default(ReceivableInvoiceStatus?), DateTime createdOn = default(DateTime), DateTime modifiedOn = default(DateTime), DateTime publishedOn = default(DateTime), DateTime documentDate = default(DateTime), bool published = default(bool), bool approved = default(bool), long? approvedBy = default(long?), long? approvedByClientId = default(long?), string approvedImageUrl = default(string), string documentSerial = default(string), string remarks = default(string), string name = default(string), decimal value = default(decimal), DateTime? dueDate = default(DateTime?), DateTime? expectedDate = default(DateTime?), long createdBy = default(long), string documentId = default(string), bool isDelete = default(bool), int vatRate = default(int), string internalNotes = default(string), long? galleryId = default(long?), bool isVatInclusive = default(bool), long? salesId = default(long?), string salesName = default(string), decimal roundingAdjustment = default(decimal), bool isInlineDiscount = false, bool isInlineVat = false, decimal? tax = default(decimal?), long? documentSerialNoPrefix = default(long?), decimal? vatValue = default(decimal?), long? resetTransactionId = default(long?), OneOfContact contact = default(OneOfContact), OneOfUser approvedByClient = default(OneOfUser), OneOfCompany company = default(OneOfCompany), OneOfUser createdByUser = default(OneOfUser), OneOfUser approvedByUser = default(OneOfUser), OneOfUser sales = default(OneOfUser), OneOfGallery gallery = default(OneOfGallery), decimal inlineVatValue = default(decimal), decimal inlineDiscountValue = default(decimal), RuleCompileStatus? ruleCompileStatus = default(RuleCompileStatus?), int runningNumberType = default(int), DateTime? runningModifiedOn = default(DateTime?), decimal exemptAmount = default(decimal), decimal vatableAmount = default(decimal), decimal totalAfterDiscount = default(decimal), decimal subTotal = default(decimal), List<IDocumentReference> documentReferences = default(List<IDocumentReference>), List<IDocumentReference> referencedToMe = default(List<IDocumentReference>), List<IDocumentReference> referencedByMe = default(List<IDocumentReference>), int statusInt = default(int), bool isReCalculate = default(bool), OneOfPartialPaymentMethod partialPaymentMethod = default(OneOfPartialPaymentMethod), decimal? vatAmount = default(decimal?), bool isMigrate = default(bool))
        {
            this.CompanyId = companyId;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.PublishedOn = publishedOn;
            this.DocumentDate = documentDate;
            this.Id = id;
            this.ContactId = contactId;
            this.Status = status;
            this.Published = published;
            this.Approved = approved;
            this.ApprovedBy = approvedBy;
            this.ApprovedByClientId = approvedByClientId;
            this.ApprovedImageUrl = approvedImageUrl;
            this.DocumentSerial = documentSerial;
            this.Remarks = remarks;
            this.Name = name;
            this.Value = value;
            this.DueDate = dueDate;
            this.ExpectedDate = expectedDate;
            this.CreatedBy = createdBy;
            this.DocumentId = documentId;
            this.IsDelete = isDelete;
            this.VatRate = vatRate;
            this.InternalNotes = internalNotes;
            this.GalleryId = galleryId;
            this.IsVatInclusive = isVatInclusive;
            this.SalesId = salesId;
            this.SalesName = salesName;
            this.RoundingAdjustment = roundingAdjustment;
            this.IsInlineDiscount = isInlineDiscount;
            this.IsInlineVat = isInlineVat;
            this.Tax = tax;
            this.DocumentSerialNoPrefix = documentSerialNoPrefix;
            this.VatValue = vatValue;
            this.ResetTransactionId = resetTransactionId;
            this.Contact = contact;
            this.ApprovedByClient = approvedByClient;
            this.Company = company;
            this.CreatedByUser = createdByUser;
            this.ApprovedByUser = approvedByUser;
            this.Sales = sales;
            this.Gallery = gallery;
            this.InlineVatValue = inlineVatValue;
            this.InlineDiscountValue = inlineDiscountValue;
            this.RuleCompileStatus = ruleCompileStatus;
            this.RunningNumberType = runningNumberType;
            this.RunningModifiedOn = runningModifiedOn;
            this.ExemptAmount = exemptAmount;
            this.VatableAmount = vatableAmount;
            this.TotalAfterDiscount = totalAfterDiscount;
            this.SubTotal = subTotal;
            this.DocumentReferences = documentReferences;
            this.ReferencedToMe = referencedToMe;
            this.ReferencedByMe = referencedByMe;
            this.StatusInt = statusInt;
            this.IsReCalculate = isReCalculate;
            this.PartialPaymentMethod = partialPaymentMethod;
            this.VatAmount = vatAmount;
            this.IsMigrate = isMigrate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [DataMember(Name = "contactId", EmitDefaultValue = false)]
        public long ContactId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", IsRequired = true, EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets PublishedOn
        /// </summary>
        [DataMember(Name = "publishedOn", IsRequired = true, EmitDefaultValue = false)]
        public DateTime PublishedOn { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDate
        /// </summary>
        [DataMember(Name = "documentDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime DocumentDate { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name = "published", EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [DataMember(Name = "approved", EmitDefaultValue = true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedBy
        /// </summary>
        [DataMember(Name = "approvedBy", EmitDefaultValue = true)]
        public long? ApprovedBy { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedByClientId
        /// </summary>
        [DataMember(Name = "approvedByClientId", EmitDefaultValue = true)]
        public long? ApprovedByClientId { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedImageUrl
        /// </summary>
        [DataMember(Name = "approvedImageUrl", EmitDefaultValue = true)]
        public string ApprovedImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSerial
        /// </summary>
        [DataMember(Name = "documentSerial", EmitDefaultValue = true)]
        public string DocumentSerial { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name = "remarks", EmitDefaultValue = true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name = "dueDate", EmitDefaultValue = true)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedDate
        /// </summary>
        [DataMember(Name = "expectedDate", EmitDefaultValue = true)]
        public DateTime? ExpectedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public long CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name = "documentId", EmitDefaultValue = true)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets VatRate
        /// </summary>
        [DataMember(Name = "vatRate", EmitDefaultValue = false)]
        public int VatRate { get; set; }

        /// <summary>
        /// Gets or Sets InternalNotes
        /// </summary>
        [DataMember(Name = "internalNotes", EmitDefaultValue = true)]
        public string InternalNotes { get; set; }

        /// <summary>
        /// Gets or Sets GalleryId
        /// </summary>
        [DataMember(Name = "galleryId", EmitDefaultValue = true)]
        public long? GalleryId { get; set; }

        /// <summary>
        /// Gets or Sets IsVatInclusive
        /// </summary>
        [DataMember(Name = "isVatInclusive", EmitDefaultValue = true)]
        public bool IsVatInclusive { get; set; }

        /// <summary>
        /// Gets or Sets SalesId
        /// </summary>
        [DataMember(Name = "salesId", EmitDefaultValue = true)]
        public long? SalesId { get; set; }

        /// <summary>
        /// Gets or Sets SalesName
        /// </summary>
        [DataMember(Name = "salesName", EmitDefaultValue = true)]
        public string SalesName { get; set; }

        /// <summary>
        /// Gets or Sets RoundingAdjustment
        /// </summary>
        [DataMember(Name = "roundingAdjustment", EmitDefaultValue = false)]
        public decimal RoundingAdjustment { get; set; }

        /// <summary>
        /// Gets or Sets IsInlineDiscount
        /// </summary>
        [DataMember(Name = "isInlineDiscount", EmitDefaultValue = true)]
        public bool IsInlineDiscount { get; set; }

        /// <summary>
        /// Gets or Sets IsInlineVat
        /// </summary>
        [DataMember(Name = "isInlineVat", EmitDefaultValue = true)]
        public bool IsInlineVat { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name = "tax", EmitDefaultValue = true)]
        public decimal? Tax { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSerialNoPrefix
        /// </summary>
        [DataMember(Name = "documentSerialNoPrefix", EmitDefaultValue = true)]
        public long? DocumentSerialNoPrefix { get; set; }

        /// <summary>
        /// Gets or Sets VatValue
        /// </summary>
        [DataMember(Name = "vatValue", EmitDefaultValue = true)]
        public decimal? VatValue { get; set; }

        /// <summary>
        /// Gets or Sets ResetTransactionId
        /// </summary>
        [DataMember(Name = "resetTransactionId", EmitDefaultValue = true)]
        public long? ResetTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "contact", EmitDefaultValue = true)]
        public OneOfContact Contact { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedByClient
        /// </summary>
        [DataMember(Name = "approvedByClient", EmitDefaultValue = true)]
        public OneOfUser ApprovedByClient { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public OneOfCompany Company { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUser
        /// </summary>
        [DataMember(Name = "createdByUser", EmitDefaultValue = true)]
        public OneOfUser CreatedByUser { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedByUser
        /// </summary>
        [DataMember(Name = "approvedByUser", EmitDefaultValue = true)]
        public OneOfUser ApprovedByUser { get; set; }

        /// <summary>
        /// Gets or Sets Sales
        /// </summary>
        [DataMember(Name = "sales", EmitDefaultValue = true)]
        public OneOfUser Sales { get; set; }

        /// <summary>
        /// Gets or Sets Gallery
        /// </summary>
        [DataMember(Name = "gallery", EmitDefaultValue = true)]
        public OneOfGallery Gallery { get; set; }

        /// <summary>
        /// Gets or Sets InlineVatValue
        /// </summary>
        [DataMember(Name = "inlineVatValue", EmitDefaultValue = false)]
        public decimal InlineVatValue { get; set; }

        /// <summary>
        /// Gets or Sets InlineDiscountValue
        /// </summary>
        [DataMember(Name = "inlineDiscountValue", EmitDefaultValue = false)]
        public decimal InlineDiscountValue { get; set; }

        /// <summary>
        /// Gets or Sets RunningNumberType
        /// </summary>
        [DataMember(Name = "runningNumberType", EmitDefaultValue = false)]
        public int RunningNumberType { get; set; }

        /// <summary>
        /// Gets or Sets RunningModifiedOn
        /// </summary>
        [DataMember(Name = "runningModifiedOn", EmitDefaultValue = true)]
        public DateTime? RunningModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets ExemptAmount
        /// </summary>
        [DataMember(Name = "exemptAmount", EmitDefaultValue = false)]
        public decimal ExemptAmount { get; set; }

        /// <summary>
        /// Gets or Sets VatableAmount
        /// </summary>
        [DataMember(Name = "vatableAmount", EmitDefaultValue = false)]
        public decimal VatableAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalAfterDiscount
        /// </summary>
        [DataMember(Name = "totalAfterDiscount", EmitDefaultValue = false)]
        public decimal TotalAfterDiscount { get; set; }

        /// <summary>
        /// Gets or Sets SubTotal
        /// </summary>
        [DataMember(Name = "subTotal", EmitDefaultValue = false)]
        public decimal SubTotal { get; set; }

        /// <summary>
        /// Gets or Sets DocumentReferences
        /// </summary>
        [DataMember(Name = "documentReferences", EmitDefaultValue = true)]
        public List<IDocumentReference> DocumentReferences { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedToMe
        /// </summary>
        [DataMember(Name = "referencedToMe", EmitDefaultValue = true)]
        public List<IDocumentReference> ReferencedToMe { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedByMe
        /// </summary>
        [DataMember(Name = "referencedByMe", EmitDefaultValue = true)]
        public List<IDocumentReference> ReferencedByMe { get; set; }

        /// <summary>
        /// Gets or Sets StatusInt
        /// </summary>
        [DataMember(Name = "statusInt", EmitDefaultValue = false)]
        public int StatusInt { get; set; }

        /// <summary>
        /// Gets or Sets IsReCalculate
        /// </summary>
        [DataMember(Name = "isReCalculate", EmitDefaultValue = true)]
        public bool IsReCalculate { get; set; }

        /// <summary>
        /// Gets or Sets PartialPaymentMethod
        /// </summary>
        [DataMember(Name = "partialPaymentMethod", EmitDefaultValue = true)]
        public OneOfPartialPaymentMethod PartialPaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets VatAmount
        /// </summary>
        [DataMember(Name = "vatAmount", EmitDefaultValue = true)]
        public decimal? VatAmount { get; set; }

        /// <summary>
        /// Gets or Sets IsMigrate
        /// </summary>
        [DataMember(Name = "isMigrate", EmitDefaultValue = true)]
        public bool IsMigrate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceivableInvoiceAllOf {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  PublishedOn: ").Append(PublishedOn).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  ApprovedBy: ").Append(ApprovedBy).Append("\n");
            sb.Append("  ApprovedByClientId: ").Append(ApprovedByClientId).Append("\n");
            sb.Append("  ApprovedImageUrl: ").Append(ApprovedImageUrl).Append("\n");
            sb.Append("  DocumentSerial: ").Append(DocumentSerial).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  ExpectedDate: ").Append(ExpectedDate).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  InternalNotes: ").Append(InternalNotes).Append("\n");
            sb.Append("  GalleryId: ").Append(GalleryId).Append("\n");
            sb.Append("  IsVatInclusive: ").Append(IsVatInclusive).Append("\n");
            sb.Append("  SalesId: ").Append(SalesId).Append("\n");
            sb.Append("  SalesName: ").Append(SalesName).Append("\n");
            sb.Append("  RoundingAdjustment: ").Append(RoundingAdjustment).Append("\n");
            sb.Append("  IsInlineDiscount: ").Append(IsInlineDiscount).Append("\n");
            sb.Append("  IsInlineVat: ").Append(IsInlineVat).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  DocumentSerialNoPrefix: ").Append(DocumentSerialNoPrefix).Append("\n");
            sb.Append("  VatValue: ").Append(VatValue).Append("\n");
            sb.Append("  ResetTransactionId: ").Append(ResetTransactionId).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  ApprovedByClient: ").Append(ApprovedByClient).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  ApprovedByUser: ").Append(ApprovedByUser).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  Gallery: ").Append(Gallery).Append("\n");
            sb.Append("  InlineVatValue: ").Append(InlineVatValue).Append("\n");
            sb.Append("  InlineDiscountValue: ").Append(InlineDiscountValue).Append("\n");
            sb.Append("  RuleCompileStatus: ").Append(RuleCompileStatus).Append("\n");
            sb.Append("  RunningNumberType: ").Append(RunningNumberType).Append("\n");
            sb.Append("  RunningModifiedOn: ").Append(RunningModifiedOn).Append("\n");
            sb.Append("  ExemptAmount: ").Append(ExemptAmount).Append("\n");
            sb.Append("  VatableAmount: ").Append(VatableAmount).Append("\n");
            sb.Append("  TotalAfterDiscount: ").Append(TotalAfterDiscount).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  DocumentReferences: ").Append(DocumentReferences).Append("\n");
            sb.Append("  ReferencedToMe: ").Append(ReferencedToMe).Append("\n");
            sb.Append("  ReferencedByMe: ").Append(ReferencedByMe).Append("\n");
            sb.Append("  StatusInt: ").Append(StatusInt).Append("\n");
            sb.Append("  IsReCalculate: ").Append(IsReCalculate).Append("\n");
            sb.Append("  PartialPaymentMethod: ").Append(PartialPaymentMethod).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  IsMigrate: ").Append(IsMigrate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceivableInvoiceAllOf);
        }

        /// <summary>
        /// Returns true if ReceivableInvoiceAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceivableInvoiceAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceivableInvoiceAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    this.ContactId.Equals(input.ContactId)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.PublishedOn == input.PublishedOn ||
                    (this.PublishedOn != null &&
                    this.PublishedOn.Equals(input.PublishedOn))
                ) && 
                (
                    this.DocumentDate == input.DocumentDate ||
                    (this.DocumentDate != null &&
                    this.DocumentDate.Equals(input.DocumentDate))
                ) && 
                (
                    this.Published == input.Published ||
                    this.Published.Equals(input.Published)
                ) && 
                (
                    this.Approved == input.Approved ||
                    this.Approved.Equals(input.Approved)
                ) && 
                (
                    this.ApprovedBy == input.ApprovedBy ||
                    (this.ApprovedBy != null &&
                    this.ApprovedBy.Equals(input.ApprovedBy))
                ) && 
                (
                    this.ApprovedByClientId == input.ApprovedByClientId ||
                    (this.ApprovedByClientId != null &&
                    this.ApprovedByClientId.Equals(input.ApprovedByClientId))
                ) && 
                (
                    this.ApprovedImageUrl == input.ApprovedImageUrl ||
                    (this.ApprovedImageUrl != null &&
                    this.ApprovedImageUrl.Equals(input.ApprovedImageUrl))
                ) && 
                (
                    this.DocumentSerial == input.DocumentSerial ||
                    (this.DocumentSerial != null &&
                    this.DocumentSerial.Equals(input.DocumentSerial))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.ExpectedDate == input.ExpectedDate ||
                    (this.ExpectedDate != null &&
                    this.ExpectedDate.Equals(input.ExpectedDate))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.VatRate == input.VatRate ||
                    this.VatRate.Equals(input.VatRate)
                ) && 
                (
                    this.InternalNotes == input.InternalNotes ||
                    (this.InternalNotes != null &&
                    this.InternalNotes.Equals(input.InternalNotes))
                ) && 
                (
                    this.GalleryId == input.GalleryId ||
                    (this.GalleryId != null &&
                    this.GalleryId.Equals(input.GalleryId))
                ) && 
                (
                    this.IsVatInclusive == input.IsVatInclusive ||
                    this.IsVatInclusive.Equals(input.IsVatInclusive)
                ) && 
                (
                    this.SalesId == input.SalesId ||
                    (this.SalesId != null &&
                    this.SalesId.Equals(input.SalesId))
                ) && 
                (
                    this.SalesName == input.SalesName ||
                    (this.SalesName != null &&
                    this.SalesName.Equals(input.SalesName))
                ) && 
                (
                    this.RoundingAdjustment == input.RoundingAdjustment ||
                    this.RoundingAdjustment.Equals(input.RoundingAdjustment)
                ) && 
                (
                    this.IsInlineDiscount == input.IsInlineDiscount ||
                    this.IsInlineDiscount.Equals(input.IsInlineDiscount)
                ) && 
                (
                    this.IsInlineVat == input.IsInlineVat ||
                    this.IsInlineVat.Equals(input.IsInlineVat)
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.DocumentSerialNoPrefix == input.DocumentSerialNoPrefix ||
                    (this.DocumentSerialNoPrefix != null &&
                    this.DocumentSerialNoPrefix.Equals(input.DocumentSerialNoPrefix))
                ) && 
                (
                    this.VatValue == input.VatValue ||
                    (this.VatValue != null &&
                    this.VatValue.Equals(input.VatValue))
                ) && 
                (
                    this.ResetTransactionId == input.ResetTransactionId ||
                    (this.ResetTransactionId != null &&
                    this.ResetTransactionId.Equals(input.ResetTransactionId))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.ApprovedByClient == input.ApprovedByClient ||
                    (this.ApprovedByClient != null &&
                    this.ApprovedByClient.Equals(input.ApprovedByClient))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.ApprovedByUser == input.ApprovedByUser ||
                    (this.ApprovedByUser != null &&
                    this.ApprovedByUser.Equals(input.ApprovedByUser))
                ) && 
                (
                    this.Sales == input.Sales ||
                    (this.Sales != null &&
                    this.Sales.Equals(input.Sales))
                ) && 
                (
                    this.Gallery == input.Gallery ||
                    (this.Gallery != null &&
                    this.Gallery.Equals(input.Gallery))
                ) && 
                (
                    this.InlineVatValue == input.InlineVatValue ||
                    this.InlineVatValue.Equals(input.InlineVatValue)
                ) && 
                (
                    this.InlineDiscountValue == input.InlineDiscountValue ||
                    this.InlineDiscountValue.Equals(input.InlineDiscountValue)
                ) && 
                (
                    this.RuleCompileStatus == input.RuleCompileStatus ||
                    this.RuleCompileStatus.Equals(input.RuleCompileStatus)
                ) && 
                (
                    this.RunningNumberType == input.RunningNumberType ||
                    this.RunningNumberType.Equals(input.RunningNumberType)
                ) && 
                (
                    this.RunningModifiedOn == input.RunningModifiedOn ||
                    (this.RunningModifiedOn != null &&
                    this.RunningModifiedOn.Equals(input.RunningModifiedOn))
                ) && 
                (
                    this.ExemptAmount == input.ExemptAmount ||
                    this.ExemptAmount.Equals(input.ExemptAmount)
                ) && 
                (
                    this.VatableAmount == input.VatableAmount ||
                    this.VatableAmount.Equals(input.VatableAmount)
                ) && 
                (
                    this.TotalAfterDiscount == input.TotalAfterDiscount ||
                    this.TotalAfterDiscount.Equals(input.TotalAfterDiscount)
                ) && 
                (
                    this.SubTotal == input.SubTotal ||
                    this.SubTotal.Equals(input.SubTotal)
                ) && 
                (
                    this.DocumentReferences == input.DocumentReferences ||
                    this.DocumentReferences != null &&
                    input.DocumentReferences != null &&
                    this.DocumentReferences.SequenceEqual(input.DocumentReferences)
                ) && 
                (
                    this.ReferencedToMe == input.ReferencedToMe ||
                    this.ReferencedToMe != null &&
                    input.ReferencedToMe != null &&
                    this.ReferencedToMe.SequenceEqual(input.ReferencedToMe)
                ) && 
                (
                    this.ReferencedByMe == input.ReferencedByMe ||
                    this.ReferencedByMe != null &&
                    input.ReferencedByMe != null &&
                    this.ReferencedByMe.SequenceEqual(input.ReferencedByMe)
                ) && 
                (
                    this.StatusInt == input.StatusInt ||
                    this.StatusInt.Equals(input.StatusInt)
                ) && 
                (
                    this.IsReCalculate == input.IsReCalculate ||
                    this.IsReCalculate.Equals(input.IsReCalculate)
                ) && 
                (
                    this.PartialPaymentMethod == input.PartialPaymentMethod ||
                    (this.PartialPaymentMethod != null &&
                    this.PartialPaymentMethod.Equals(input.PartialPaymentMethod))
                ) && 
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) && 
                (
                    this.IsMigrate == input.IsMigrate ||
                    this.IsMigrate.Equals(input.IsMigrate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.ContactId.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                if (this.PublishedOn != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedOn.GetHashCode();
                }
                if (this.DocumentDate != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Published.GetHashCode();
                hashCode = (hashCode * 59) + this.Approved.GetHashCode();
                if (this.ApprovedBy != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedBy.GetHashCode();
                }
                if (this.ApprovedByClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedByClientId.GetHashCode();
                }
                if (this.ApprovedImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedImageUrl.GetHashCode();
                }
                if (this.DocumentSerial != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentSerial.GetHashCode();
                }
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                if (this.ExpectedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                hashCode = (hashCode * 59) + this.VatRate.GetHashCode();
                if (this.InternalNotes != null)
                {
                    hashCode = (hashCode * 59) + this.InternalNotes.GetHashCode();
                }
                if (this.GalleryId != null)
                {
                    hashCode = (hashCode * 59) + this.GalleryId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsVatInclusive.GetHashCode();
                if (this.SalesId != null)
                {
                    hashCode = (hashCode * 59) + this.SalesId.GetHashCode();
                }
                if (this.SalesName != null)
                {
                    hashCode = (hashCode * 59) + this.SalesName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RoundingAdjustment.GetHashCode();
                hashCode = (hashCode * 59) + this.IsInlineDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.IsInlineVat.GetHashCode();
                if (this.Tax != null)
                {
                    hashCode = (hashCode * 59) + this.Tax.GetHashCode();
                }
                if (this.DocumentSerialNoPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentSerialNoPrefix.GetHashCode();
                }
                if (this.VatValue != null)
                {
                    hashCode = (hashCode * 59) + this.VatValue.GetHashCode();
                }
                if (this.ResetTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.ResetTransactionId.GetHashCode();
                }
                if (this.Contact != null)
                {
                    hashCode = (hashCode * 59) + this.Contact.GetHashCode();
                }
                if (this.ApprovedByClient != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedByClient.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.CreatedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedByUser.GetHashCode();
                }
                if (this.ApprovedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedByUser.GetHashCode();
                }
                if (this.Sales != null)
                {
                    hashCode = (hashCode * 59) + this.Sales.GetHashCode();
                }
                if (this.Gallery != null)
                {
                    hashCode = (hashCode * 59) + this.Gallery.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InlineVatValue.GetHashCode();
                hashCode = (hashCode * 59) + this.InlineDiscountValue.GetHashCode();
                hashCode = (hashCode * 59) + this.RuleCompileStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.RunningNumberType.GetHashCode();
                if (this.RunningModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.RunningModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExemptAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.VatableAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalAfterDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.SubTotal.GetHashCode();
                if (this.DocumentReferences != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentReferences.GetHashCode();
                }
                if (this.ReferencedToMe != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedToMe.GetHashCode();
                }
                if (this.ReferencedByMe != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedByMe.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusInt.GetHashCode();
                hashCode = (hashCode * 59) + this.IsReCalculate.GetHashCode();
                if (this.PartialPaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PartialPaymentMethod.GetHashCode();
                }
                if (this.VatAmount != null)
                {
                    hashCode = (hashCode * 59) + this.VatAmount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMigrate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CreatedOn (DateTime) minLength
            if (this.CreatedOn != null && this.CreatedOn.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedOn, length must be greater than 1.", new [] { "CreatedOn" });
            }

            // ModifiedOn (DateTime) minLength
            if (this.ModifiedOn != null && this.ModifiedOn.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifiedOn, length must be greater than 1.", new [] { "ModifiedOn" });
            }

            // PublishedOn (DateTime) minLength
            if (this.PublishedOn != null && this.PublishedOn.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PublishedOn, length must be greater than 1.", new [] { "PublishedOn" });
            }

            // DocumentDate (DateTime) minLength
            if (this.DocumentDate != null && this.DocumentDate.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentDate, length must be greater than 1.", new [] { "DocumentDate" });
            }

            yield break;
        }
    }

}

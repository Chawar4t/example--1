/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PettyCash
    /// </summary>
    [DataContract(Name = "PettyCash")]
    public partial class PettyCash : IEquatable<PettyCash>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public BankingChannelsStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PettyCash" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PettyCash() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PettyCash" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyId">companyId (required).</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="modifiedOn">modifiedOn.</param>
        /// <param name="isDelete">isDelete (default to false).</param>
        /// <param name="description">description.</param>
        /// <param name="name">name.</param>
        /// <param name="cashLimit">cashLimit.</param>
        /// <param name="chartOfAccountId">chartOfAccountId.</param>
        /// <param name="chartOfAccount">chartOfAccount.</param>
        /// <param name="cashHolderId">cashHolderId.</param>
        /// <param name="cashHolder">cashHolder.</param>
        /// <param name="status">status.</param>
        /// <param name="cashHolderName">cashHolderName.</param>
        /// <param name="remainingBalance">remainingBalance.</param>
        public PettyCash(long id = default(long), long companyId = default(long), DateTime createdOn = default(DateTime), DateTime modifiedOn = default(DateTime), bool isDelete = false, string description = default(string), string name = default(string), decimal cashLimit = default(decimal), long? chartOfAccountId = default(long?), OneOfChartOfAccount chartOfAccount = default(OneOfChartOfAccount), long cashHolderId = default(long), OneOfUser cashHolder = default(OneOfUser), BankingChannelsStatus? status = default(BankingChannelsStatus?), string cashHolderName = default(string), decimal remainingBalance = default(decimal))
        {
            this.CompanyId = companyId;
            this.Id = id;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.IsDelete = isDelete;
            this.Description = description;
            this.Name = name;
            this.CashLimit = cashLimit;
            this.ChartOfAccountId = chartOfAccountId;
            this.ChartOfAccount = chartOfAccount;
            this.CashHolderId = cashHolderId;
            this.CashHolder = cashHolder;
            this.Status = status;
            this.CashHolderName = cashHolderName;
            this.RemainingBalance = remainingBalance;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", IsRequired = true, EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CashLimit
        /// </summary>
        [DataMember(Name = "cashLimit", EmitDefaultValue = false)]
        public decimal CashLimit { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccountId
        /// </summary>
        [DataMember(Name = "chartOfAccountId", EmitDefaultValue = true)]
        public long? ChartOfAccountId { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccount
        /// </summary>
        [DataMember(Name = "chartOfAccount", EmitDefaultValue = true)]
        public OneOfChartOfAccount ChartOfAccount { get; set; }

        /// <summary>
        /// Gets or Sets CashHolderId
        /// </summary>
        [DataMember(Name = "cashHolderId", EmitDefaultValue = false)]
        public long CashHolderId { get; set; }

        /// <summary>
        /// Gets or Sets CashHolder
        /// </summary>
        [DataMember(Name = "cashHolder", EmitDefaultValue = true)]
        public OneOfUser CashHolder { get; set; }

        /// <summary>
        /// Gets or Sets CashHolderName
        /// </summary>
        [DataMember(Name = "cashHolderName", EmitDefaultValue = true)]
        public string CashHolderName { get; set; }

        /// <summary>
        /// Gets or Sets RemainingBalance
        /// </summary>
        [DataMember(Name = "remainingBalance", EmitDefaultValue = false)]
        public decimal RemainingBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PettyCash {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CashLimit: ").Append(CashLimit).Append("\n");
            sb.Append("  ChartOfAccountId: ").Append(ChartOfAccountId).Append("\n");
            sb.Append("  ChartOfAccount: ").Append(ChartOfAccount).Append("\n");
            sb.Append("  CashHolderId: ").Append(CashHolderId).Append("\n");
            sb.Append("  CashHolder: ").Append(CashHolder).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CashHolderName: ").Append(CashHolderName).Append("\n");
            sb.Append("  RemainingBalance: ").Append(RemainingBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PettyCash);
        }

        /// <summary>
        /// Returns true if PettyCash instances are equal
        /// </summary>
        /// <param name="input">Instance of PettyCash to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PettyCash input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CashLimit == input.CashLimit ||
                    this.CashLimit.Equals(input.CashLimit)
                ) && 
                (
                    this.ChartOfAccountId == input.ChartOfAccountId ||
                    (this.ChartOfAccountId != null &&
                    this.ChartOfAccountId.Equals(input.ChartOfAccountId))
                ) && 
                (
                    this.ChartOfAccount == input.ChartOfAccount ||
                    (this.ChartOfAccount != null &&
                    this.ChartOfAccount.Equals(input.ChartOfAccount))
                ) && 
                (
                    this.CashHolderId == input.CashHolderId ||
                    this.CashHolderId.Equals(input.CashHolderId)
                ) && 
                (
                    this.CashHolder == input.CashHolder ||
                    (this.CashHolder != null &&
                    this.CashHolder.Equals(input.CashHolder))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CashHolderName == input.CashHolderName ||
                    (this.CashHolderName != null &&
                    this.CashHolderName.Equals(input.CashHolderName))
                ) && 
                (
                    this.RemainingBalance == input.RemainingBalance ||
                    this.RemainingBalance.Equals(input.RemainingBalance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CashLimit.GetHashCode();
                if (this.ChartOfAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.ChartOfAccountId.GetHashCode();
                }
                if (this.ChartOfAccount != null)
                {
                    hashCode = (hashCode * 59) + this.ChartOfAccount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CashHolderId.GetHashCode();
                if (this.CashHolder != null)
                {
                    hashCode = (hashCode * 59) + this.CashHolder.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CashHolderName != null)
                {
                    hashCode = (hashCode * 59) + this.CashHolderName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RemainingBalance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

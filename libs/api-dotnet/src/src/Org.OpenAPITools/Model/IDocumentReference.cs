/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IDocumentReference
    /// </summary>
    [DataContract(Name = "IDocumentReference")]
    public partial class IDocumentReference : IEquatable<IDocumentReference>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ReferenceDocumentType
        /// </summary>
        [DataMember(Name = "referenceDocumentType", EmitDefaultValue = false)]
        public DocumentTypes? ReferenceDocumentType { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name = "documentType", EmitDefaultValue = false)]
        public DocumentTypes? DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public DocumentReferenceTypes? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IDocumentReference" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyId">companyId.</param>
        /// <param name="referenceId">referenceId.</param>
        /// <param name="referenceDocumentType">referenceDocumentType.</param>
        /// <param name="referenceDocumentSerial">referenceDocumentSerial.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="documentSerial">documentSerial.</param>
        /// <param name="isDelete">isDelete.</param>
        /// <param name="type">type.</param>
        /// <param name="documentStatus">documentStatus.</param>
        /// <param name="documentStatusString">documentStatusString.</param>
        /// <param name="documentDate">documentDate.</param>
        /// <param name="documentAmount">documentAmount.</param>
        /// <param name="documentAmountWithVat">documentAmountWithVat.</param>
        /// <param name="refDocumentStatus">refDocumentStatus.</param>
        /// <param name="refDocumentStatusString">refDocumentStatusString.</param>
        /// <param name="refDocumentDate">refDocumentDate.</param>
        /// <param name="refDocumentAmount">refDocumentAmount.</param>
        /// <param name="refDocumentAmountWithVat">refDocumentAmountWithVat.</param>
        /// <param name="partialPaymentTotalAmount">partialPaymentTotalAmount.</param>
        /// <param name="partialPaymentTotalPercent">partialPaymentTotalPercent.</param>
        /// <param name="refCreatedOn">refCreatedOn.</param>
        /// <param name="refModifiedOn">refModifiedOn.</param>
        /// <param name="refIsMigrate">refIsMigrate.</param>
        /// <param name="isCompileRule">isCompileRule.</param>
        /// <param name="documentCollected">documentCollected.</param>
        public IDocumentReference(long id = default(long), long companyId = default(long), long referenceId = default(long), DocumentTypes? referenceDocumentType = default(DocumentTypes?), string referenceDocumentSerial = default(string), long documentId = default(long), DocumentTypes? documentType = default(DocumentTypes?), string documentSerial = default(string), bool isDelete = default(bool), DocumentReferenceTypes? type = default(DocumentReferenceTypes?), int documentStatus = default(int), string documentStatusString = default(string), DateTime documentDate = default(DateTime), decimal documentAmount = default(decimal), decimal documentAmountWithVat = default(decimal), int refDocumentStatus = default(int), string refDocumentStatusString = default(string), DateTime refDocumentDate = default(DateTime), decimal refDocumentAmount = default(decimal), decimal refDocumentAmountWithVat = default(decimal), decimal partialPaymentTotalAmount = default(decimal), decimal partialPaymentTotalPercent = default(decimal), DateTime refCreatedOn = default(DateTime), DateTime refModifiedOn = default(DateTime), bool refIsMigrate = default(bool), bool isCompileRule = default(bool), decimal documentCollected = default(decimal))
        {
            this.Id = id;
            this.CompanyId = companyId;
            this.ReferenceId = referenceId;
            this.ReferenceDocumentType = referenceDocumentType;
            this.ReferenceDocumentSerial = referenceDocumentSerial;
            this.DocumentId = documentId;
            this.DocumentType = documentType;
            this.DocumentSerial = documentSerial;
            this.IsDelete = isDelete;
            this.Type = type;
            this.DocumentStatus = documentStatus;
            this.DocumentStatusString = documentStatusString;
            this.DocumentDate = documentDate;
            this.DocumentAmount = documentAmount;
            this.DocumentAmountWithVat = documentAmountWithVat;
            this.RefDocumentStatus = refDocumentStatus;
            this.RefDocumentStatusString = refDocumentStatusString;
            this.RefDocumentDate = refDocumentDate;
            this.RefDocumentAmount = refDocumentAmount;
            this.RefDocumentAmountWithVat = refDocumentAmountWithVat;
            this.PartialPaymentTotalAmount = partialPaymentTotalAmount;
            this.PartialPaymentTotalPercent = partialPaymentTotalPercent;
            this.RefCreatedOn = refCreatedOn;
            this.RefModifiedOn = refModifiedOn;
            this.RefIsMigrate = refIsMigrate;
            this.IsCompileRule = isCompileRule;
            this.DocumentCollected = documentCollected;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceId
        /// </summary>
        [DataMember(Name = "referenceId", EmitDefaultValue = false)]
        public long ReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceDocumentSerial
        /// </summary>
        [DataMember(Name = "referenceDocumentSerial", EmitDefaultValue = true)]
        public string ReferenceDocumentSerial { get; set; }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name = "documentId", EmitDefaultValue = false)]
        public long DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSerial
        /// </summary>
        [DataMember(Name = "documentSerial", EmitDefaultValue = true)]
        public string DocumentSerial { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatus
        /// </summary>
        [DataMember(Name = "documentStatus", EmitDefaultValue = false)]
        public int DocumentStatus { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatusString
        /// </summary>
        [DataMember(Name = "documentStatusString", EmitDefaultValue = true)]
        public string DocumentStatusString { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDate
        /// </summary>
        [DataMember(Name = "documentDate", EmitDefaultValue = false)]
        public DateTime DocumentDate { get; set; }

        /// <summary>
        /// Gets or Sets DocumentAmount
        /// </summary>
        [DataMember(Name = "documentAmount", EmitDefaultValue = false)]
        public decimal DocumentAmount { get; set; }

        /// <summary>
        /// Gets or Sets DocumentAmountWithVat
        /// </summary>
        [DataMember(Name = "documentAmountWithVat", EmitDefaultValue = false)]
        public decimal DocumentAmountWithVat { get; set; }

        /// <summary>
        /// Gets or Sets RefDocumentStatus
        /// </summary>
        [DataMember(Name = "refDocumentStatus", EmitDefaultValue = false)]
        public int RefDocumentStatus { get; set; }

        /// <summary>
        /// Gets or Sets RefDocumentStatusString
        /// </summary>
        [DataMember(Name = "refDocumentStatusString", EmitDefaultValue = true)]
        public string RefDocumentStatusString { get; set; }

        /// <summary>
        /// Gets or Sets RefDocumentDate
        /// </summary>
        [DataMember(Name = "refDocumentDate", EmitDefaultValue = false)]
        public DateTime RefDocumentDate { get; set; }

        /// <summary>
        /// Gets or Sets RefDocumentAmount
        /// </summary>
        [DataMember(Name = "refDocumentAmount", EmitDefaultValue = false)]
        public decimal RefDocumentAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefDocumentAmountWithVat
        /// </summary>
        [DataMember(Name = "refDocumentAmountWithVat", EmitDefaultValue = false)]
        public decimal RefDocumentAmountWithVat { get; set; }

        /// <summary>
        /// Gets or Sets PartialPaymentTotalAmount
        /// </summary>
        [DataMember(Name = "partialPaymentTotalAmount", EmitDefaultValue = false)]
        public decimal PartialPaymentTotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets PartialPaymentTotalPercent
        /// </summary>
        [DataMember(Name = "partialPaymentTotalPercent", EmitDefaultValue = false)]
        public decimal PartialPaymentTotalPercent { get; set; }

        /// <summary>
        /// Gets or Sets RefCreatedOn
        /// </summary>
        [DataMember(Name = "refCreatedOn", EmitDefaultValue = false)]
        public DateTime RefCreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets RefModifiedOn
        /// </summary>
        [DataMember(Name = "refModifiedOn", EmitDefaultValue = false)]
        public DateTime RefModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets RefIsMigrate
        /// </summary>
        [DataMember(Name = "refIsMigrate", EmitDefaultValue = true)]
        public bool RefIsMigrate { get; set; }

        /// <summary>
        /// Gets or Sets IsCompileRule
        /// </summary>
        [DataMember(Name = "isCompileRule", EmitDefaultValue = true)]
        public bool IsCompileRule { get; set; }

        /// <summary>
        /// Gets or Sets DocumentCollected
        /// </summary>
        [DataMember(Name = "documentCollected", EmitDefaultValue = false)]
        public decimal DocumentCollected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IDocumentReference {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  ReferenceDocumentType: ").Append(ReferenceDocumentType).Append("\n");
            sb.Append("  ReferenceDocumentSerial: ").Append(ReferenceDocumentSerial).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  DocumentSerial: ").Append(DocumentSerial).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DocumentStatus: ").Append(DocumentStatus).Append("\n");
            sb.Append("  DocumentStatusString: ").Append(DocumentStatusString).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  DocumentAmount: ").Append(DocumentAmount).Append("\n");
            sb.Append("  DocumentAmountWithVat: ").Append(DocumentAmountWithVat).Append("\n");
            sb.Append("  RefDocumentStatus: ").Append(RefDocumentStatus).Append("\n");
            sb.Append("  RefDocumentStatusString: ").Append(RefDocumentStatusString).Append("\n");
            sb.Append("  RefDocumentDate: ").Append(RefDocumentDate).Append("\n");
            sb.Append("  RefDocumentAmount: ").Append(RefDocumentAmount).Append("\n");
            sb.Append("  RefDocumentAmountWithVat: ").Append(RefDocumentAmountWithVat).Append("\n");
            sb.Append("  PartialPaymentTotalAmount: ").Append(PartialPaymentTotalAmount).Append("\n");
            sb.Append("  PartialPaymentTotalPercent: ").Append(PartialPaymentTotalPercent).Append("\n");
            sb.Append("  RefCreatedOn: ").Append(RefCreatedOn).Append("\n");
            sb.Append("  RefModifiedOn: ").Append(RefModifiedOn).Append("\n");
            sb.Append("  RefIsMigrate: ").Append(RefIsMigrate).Append("\n");
            sb.Append("  IsCompileRule: ").Append(IsCompileRule).Append("\n");
            sb.Append("  DocumentCollected: ").Append(DocumentCollected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IDocumentReference);
        }

        /// <summary>
        /// Returns true if IDocumentReference instances are equal
        /// </summary>
        /// <param name="input">Instance of IDocumentReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IDocumentReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.ReferenceId == input.ReferenceId ||
                    this.ReferenceId.Equals(input.ReferenceId)
                ) && 
                (
                    this.ReferenceDocumentType == input.ReferenceDocumentType ||
                    this.ReferenceDocumentType.Equals(input.ReferenceDocumentType)
                ) && 
                (
                    this.ReferenceDocumentSerial == input.ReferenceDocumentSerial ||
                    (this.ReferenceDocumentSerial != null &&
                    this.ReferenceDocumentSerial.Equals(input.ReferenceDocumentSerial))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    this.DocumentId.Equals(input.DocumentId)
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    this.DocumentType.Equals(input.DocumentType)
                ) && 
                (
                    this.DocumentSerial == input.DocumentSerial ||
                    (this.DocumentSerial != null &&
                    this.DocumentSerial.Equals(input.DocumentSerial))
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.DocumentStatus == input.DocumentStatus ||
                    this.DocumentStatus.Equals(input.DocumentStatus)
                ) && 
                (
                    this.DocumentStatusString == input.DocumentStatusString ||
                    (this.DocumentStatusString != null &&
                    this.DocumentStatusString.Equals(input.DocumentStatusString))
                ) && 
                (
                    this.DocumentDate == input.DocumentDate ||
                    (this.DocumentDate != null &&
                    this.DocumentDate.Equals(input.DocumentDate))
                ) && 
                (
                    this.DocumentAmount == input.DocumentAmount ||
                    this.DocumentAmount.Equals(input.DocumentAmount)
                ) && 
                (
                    this.DocumentAmountWithVat == input.DocumentAmountWithVat ||
                    this.DocumentAmountWithVat.Equals(input.DocumentAmountWithVat)
                ) && 
                (
                    this.RefDocumentStatus == input.RefDocumentStatus ||
                    this.RefDocumentStatus.Equals(input.RefDocumentStatus)
                ) && 
                (
                    this.RefDocumentStatusString == input.RefDocumentStatusString ||
                    (this.RefDocumentStatusString != null &&
                    this.RefDocumentStatusString.Equals(input.RefDocumentStatusString))
                ) && 
                (
                    this.RefDocumentDate == input.RefDocumentDate ||
                    (this.RefDocumentDate != null &&
                    this.RefDocumentDate.Equals(input.RefDocumentDate))
                ) && 
                (
                    this.RefDocumentAmount == input.RefDocumentAmount ||
                    this.RefDocumentAmount.Equals(input.RefDocumentAmount)
                ) && 
                (
                    this.RefDocumentAmountWithVat == input.RefDocumentAmountWithVat ||
                    this.RefDocumentAmountWithVat.Equals(input.RefDocumentAmountWithVat)
                ) && 
                (
                    this.PartialPaymentTotalAmount == input.PartialPaymentTotalAmount ||
                    this.PartialPaymentTotalAmount.Equals(input.PartialPaymentTotalAmount)
                ) && 
                (
                    this.PartialPaymentTotalPercent == input.PartialPaymentTotalPercent ||
                    this.PartialPaymentTotalPercent.Equals(input.PartialPaymentTotalPercent)
                ) && 
                (
                    this.RefCreatedOn == input.RefCreatedOn ||
                    (this.RefCreatedOn != null &&
                    this.RefCreatedOn.Equals(input.RefCreatedOn))
                ) && 
                (
                    this.RefModifiedOn == input.RefModifiedOn ||
                    (this.RefModifiedOn != null &&
                    this.RefModifiedOn.Equals(input.RefModifiedOn))
                ) && 
                (
                    this.RefIsMigrate == input.RefIsMigrate ||
                    this.RefIsMigrate.Equals(input.RefIsMigrate)
                ) && 
                (
                    this.IsCompileRule == input.IsCompileRule ||
                    this.IsCompileRule.Equals(input.IsCompileRule)
                ) && 
                (
                    this.DocumentCollected == input.DocumentCollected ||
                    this.DocumentCollected.Equals(input.DocumentCollected)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.ReferenceId.GetHashCode();
                hashCode = (hashCode * 59) + this.ReferenceDocumentType.GetHashCode();
                if (this.ReferenceDocumentSerial != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceDocumentSerial.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                hashCode = (hashCode * 59) + this.DocumentType.GetHashCode();
                if (this.DocumentSerial != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentSerial.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.DocumentStatus.GetHashCode();
                if (this.DocumentStatusString != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentStatusString.GetHashCode();
                }
                if (this.DocumentDate != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DocumentAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.DocumentAmountWithVat.GetHashCode();
                hashCode = (hashCode * 59) + this.RefDocumentStatus.GetHashCode();
                if (this.RefDocumentStatusString != null)
                {
                    hashCode = (hashCode * 59) + this.RefDocumentStatusString.GetHashCode();
                }
                if (this.RefDocumentDate != null)
                {
                    hashCode = (hashCode * 59) + this.RefDocumentDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RefDocumentAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.RefDocumentAmountWithVat.GetHashCode();
                hashCode = (hashCode * 59) + this.PartialPaymentTotalAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.PartialPaymentTotalPercent.GetHashCode();
                if (this.RefCreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.RefCreatedOn.GetHashCode();
                }
                if (this.RefModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.RefModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RefIsMigrate.GetHashCode();
                hashCode = (hashCode * 59) + this.IsCompileRule.GetHashCode();
                hashCode = (hashCode * 59) + this.DocumentCollected.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

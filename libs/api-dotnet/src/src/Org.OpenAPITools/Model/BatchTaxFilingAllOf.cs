/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BatchTaxFilingAllOf
    /// </summary>
    [DataContract(Name = "BatchTaxFiling_allOf")]
    public partial class BatchTaxFilingAllOf : IEquatable<BatchTaxFilingAllOf>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public BatchTaxFilingStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchTaxFilingAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchTaxFilingAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchTaxFilingAllOf" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyId">companyId (required).</param>
        /// <param name="status">status.</param>
        /// <param name="claimDate">claimDate (required).</param>
        /// <param name="totalBuyValue">totalBuyValue.</param>
        /// <param name="totalBuyVatValue">totalBuyVatValue.</param>
        /// <param name="totalSellValue">totalSellValue.</param>
        /// <param name="totalSellVatValue">totalSellVatValue.</param>
        /// <param name="broughtForward">broughtForward.</param>
        /// <param name="value">value.</param>
        /// <param name="isDelete">isDelete.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="modifiedBy">modifiedBy.</param>
        /// <param name="createdOn">createdOn (required).</param>
        /// <param name="modifiedOn">modifiedOn (required).</param>
        /// <param name="company">company.</param>
        /// <param name="createdByUser">createdByUser.</param>
        /// <param name="modifiedByUser">modifiedByUser.</param>
        /// <param name="datePayment">datePayment.</param>
        /// <param name="charge">charge.</param>
        /// <param name="collected">collected.</param>
        /// <param name="tax">tax.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="paymentWithHeld">paymentWithHeld.</param>
        /// <param name="remainingCollected">remainingCollected.</param>
        /// <param name="remainingCollectedType">remainingCollectedType.</param>
        /// <param name="deductionAmount">deductionAmount.</param>
        /// <param name="paymentDeductionType">paymentDeductionType.</param>
        /// <param name="bankAccountId">bankAccountId.</param>
        /// <param name="checkNumber">checkNumber.</param>
        /// <param name="checkBankId">checkBankId.</param>
        /// <param name="transferBankId">transferBankId.</param>
        /// <param name="bankAccountNumber">bankAccountNumber.</param>
        /// <param name="checkDatePaid">checkDatePaid.</param>
        /// <param name="methodPayment">methodPayment.</param>
        /// <param name="no">no.</param>
        /// <param name="pettyCashName">pettyCashName.</param>
        /// <param name="pettyCashId">pettyCashId.</param>
        /// <param name="chequeId">chequeId.</param>
        /// <param name="creditCardId">creditCardId.</param>
        /// <param name="otherChannelId">otherChannelId.</param>
        /// <param name="documentSerial">documentSerial.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="approved">approved.</param>
        /// <param name="publishedOn">publishedOn.</param>
        /// <param name="documentDate">documentDate.</param>
        /// <param name="vatRate">vatRate.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="name">name.</param>
        /// <param name="internalNotes">internalNotes.</param>
        /// <param name="roundingAdjustment">roundingAdjustment.</param>
        /// <param name="gallery">gallery.</param>
        /// <param name="galleryId">galleryId.</param>
        /// <param name="contact">contact.</param>
        /// <param name="contactId">contactId.</param>
        /// <param name="documentReferences">documentReferences.</param>
        /// <param name="referencedToMe">referencedToMe.</param>
        /// <param name="referencedByMe">referencedByMe.</param>
        /// <param name="statusInt">statusInt.</param>
        /// <param name="isInlineDiscount">isInlineDiscount.</param>
        /// <param name="isInlineVat">isInlineVat.</param>
        /// <param name="vatValue">vatValue.</param>
        /// <param name="documentSerialNoPrefix">documentSerialNoPrefix.</param>
        /// <param name="inlineVatValue">inlineVatValue.</param>
        /// <param name="inlineDiscountValue">inlineDiscountValue.</param>
        /// <param name="published">published.</param>
        /// <param name="isVatInclusive">isVatInclusive.</param>
        /// <param name="runningNumberType">runningNumberType.</param>
        /// <param name="runningModifiedOn">runningModifiedOn.</param>
        /// <param name="exemptAmount">exemptAmount.</param>
        /// <param name="vatableAmount">vatableAmount.</param>
        /// <param name="totalAfterDiscount">totalAfterDiscount.</param>
        /// <param name="subTotal">subTotal.</param>
        /// <param name="isReCalculate">isReCalculate.</param>
        /// <param name="partialPaymentMethod">partialPaymentMethod.</param>
        /// <param name="vatAmount">vatAmount.</param>
        /// <param name="isMigrate">isMigrate.</param>
        /// <param name="resetTransactionId">resetTransactionId.</param>
        /// <param name="ruleCompileStatus">ruleCompileStatus.</param>
        /// <param name="chequeCashingDate">chequeCashingDate.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="projectName">projectName.</param>
        /// <param name="projectNameAndProjectDeatil">projectNameAndProjectDeatil.</param>
        /// <param name="reconciled">reconciled.</param>
        /// <param name="outstanding">outstanding.</param>
        /// <param name="withholding">withholding.</param>
        /// <param name="refDocumentStatus">refDocumentStatus.</param>
        /// <param name="refDocumentStatusString">refDocumentStatusString.</param>
        /// <param name="documentDeductionType">documentDeductionType.</param>
        public BatchTaxFilingAllOf(long id = default(long), long companyId = default(long), BatchTaxFilingStatus? status = default(BatchTaxFilingStatus?), DateTime claimDate = default(DateTime), decimal totalBuyValue = default(decimal), decimal totalBuyVatValue = default(decimal), decimal totalSellValue = default(decimal), decimal totalSellVatValue = default(decimal), decimal broughtForward = default(decimal), decimal value = default(decimal), bool isDelete = default(bool), long createdBy = default(long), long modifiedBy = default(long), DateTime createdOn = default(DateTime), DateTime modifiedOn = default(DateTime), OneOfCompany company = default(OneOfCompany), OneOfUser createdByUser = default(OneOfUser), OneOfUser modifiedByUser = default(OneOfUser), DateTime? datePayment = default(DateTime?), decimal? charge = default(decimal?), decimal? collected = default(decimal?), decimal? tax = default(decimal?), string remarks = default(string), decimal paymentWithHeld = default(decimal), decimal? remainingCollected = default(decimal?), OneOfRemainingCollectedType remainingCollectedType = default(OneOfRemainingCollectedType), decimal? deductionAmount = default(decimal?), OneOfDeductionType paymentDeductionType = default(OneOfDeductionType), long? bankAccountId = default(long?), string checkNumber = default(string), string checkBankId = default(string), string transferBankId = default(string), string bankAccountNumber = default(string), DateTime? checkDatePaid = default(DateTime?), OneOfPaymentMethod methodPayment = default(OneOfPaymentMethod), int no = default(int), string pettyCashName = default(string), long? pettyCashId = default(long?), long? chequeId = default(long?), long? creditCardId = default(long?), long? otherChannelId = default(long?), string documentSerial = default(string), string documentId = default(string), bool approved = default(bool), DateTime publishedOn = default(DateTime), DateTime documentDate = default(DateTime), int vatRate = default(int), DateTime? dueDate = default(DateTime?), string name = default(string), string internalNotes = default(string), decimal roundingAdjustment = default(decimal), OneOfGallery gallery = default(OneOfGallery), long? galleryId = default(long?), OneOfContact contact = default(OneOfContact), long contactId = default(long), List<IDocumentReference> documentReferences = default(List<IDocumentReference>), List<IDocumentReference> referencedToMe = default(List<IDocumentReference>), List<IDocumentReference> referencedByMe = default(List<IDocumentReference>), int statusInt = default(int), bool isInlineDiscount = default(bool), bool isInlineVat = default(bool), decimal? vatValue = default(decimal?), long? documentSerialNoPrefix = default(long?), decimal inlineVatValue = default(decimal), decimal inlineDiscountValue = default(decimal), bool published = default(bool), bool isVatInclusive = default(bool), int runningNumberType = default(int), DateTime? runningModifiedOn = default(DateTime?), decimal exemptAmount = default(decimal), decimal vatableAmount = default(decimal), decimal totalAfterDiscount = default(decimal), decimal subTotal = default(decimal), bool isReCalculate = default(bool), OneOfPartialPaymentMethod partialPaymentMethod = default(OneOfPartialPaymentMethod), decimal? vatAmount = default(decimal?), bool isMigrate = default(bool), long? resetTransactionId = default(long?), OneOfRuleCompileStatus ruleCompileStatus = default(OneOfRuleCompileStatus), DateTime? chequeCashingDate = default(DateTime?), long? projectId = default(long?), string projectName = default(string), string projectNameAndProjectDeatil = default(string), bool reconciled = default(bool), decimal outstanding = default(decimal), int? withholding = default(int?), int refDocumentStatus = default(int), string refDocumentStatusString = default(string), OneOfDeductionType documentDeductionType = default(OneOfDeductionType))
        {
            this.CompanyId = companyId;
            this.ClaimDate = claimDate;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.Id = id;
            this.Status = status;
            this.TotalBuyValue = totalBuyValue;
            this.TotalBuyVatValue = totalBuyVatValue;
            this.TotalSellValue = totalSellValue;
            this.TotalSellVatValue = totalSellVatValue;
            this.BroughtForward = broughtForward;
            this.Value = value;
            this.IsDelete = isDelete;
            this.CreatedBy = createdBy;
            this.ModifiedBy = modifiedBy;
            this.Company = company;
            this.CreatedByUser = createdByUser;
            this.ModifiedByUser = modifiedByUser;
            this.DatePayment = datePayment;
            this.Charge = charge;
            this.Collected = collected;
            this.Tax = tax;
            this.Remarks = remarks;
            this.PaymentWithHeld = paymentWithHeld;
            this.RemainingCollected = remainingCollected;
            this.RemainingCollectedType = remainingCollectedType;
            this.DeductionAmount = deductionAmount;
            this.PaymentDeductionType = paymentDeductionType;
            this.BankAccountId = bankAccountId;
            this.CheckNumber = checkNumber;
            this.CheckBankId = checkBankId;
            this.TransferBankId = transferBankId;
            this.BankAccountNumber = bankAccountNumber;
            this.CheckDatePaid = checkDatePaid;
            this.MethodPayment = methodPayment;
            this.No = no;
            this.PettyCashName = pettyCashName;
            this.PettyCashId = pettyCashId;
            this.ChequeId = chequeId;
            this.CreditCardId = creditCardId;
            this.OtherChannelId = otherChannelId;
            this.DocumentSerial = documentSerial;
            this.DocumentId = documentId;
            this.Approved = approved;
            this.PublishedOn = publishedOn;
            this.DocumentDate = documentDate;
            this.VatRate = vatRate;
            this.DueDate = dueDate;
            this.Name = name;
            this.InternalNotes = internalNotes;
            this.RoundingAdjustment = roundingAdjustment;
            this.Gallery = gallery;
            this.GalleryId = galleryId;
            this.Contact = contact;
            this.ContactId = contactId;
            this.DocumentReferences = documentReferences;
            this.ReferencedToMe = referencedToMe;
            this.ReferencedByMe = referencedByMe;
            this.StatusInt = statusInt;
            this.IsInlineDiscount = isInlineDiscount;
            this.IsInlineVat = isInlineVat;
            this.VatValue = vatValue;
            this.DocumentSerialNoPrefix = documentSerialNoPrefix;
            this.InlineVatValue = inlineVatValue;
            this.InlineDiscountValue = inlineDiscountValue;
            this.Published = published;
            this.IsVatInclusive = isVatInclusive;
            this.RunningNumberType = runningNumberType;
            this.RunningModifiedOn = runningModifiedOn;
            this.ExemptAmount = exemptAmount;
            this.VatableAmount = vatableAmount;
            this.TotalAfterDiscount = totalAfterDiscount;
            this.SubTotal = subTotal;
            this.IsReCalculate = isReCalculate;
            this.PartialPaymentMethod = partialPaymentMethod;
            this.VatAmount = vatAmount;
            this.IsMigrate = isMigrate;
            this.ResetTransactionId = resetTransactionId;
            this.RuleCompileStatus = ruleCompileStatus;
            this.ChequeCashingDate = chequeCashingDate;
            this.ProjectId = projectId;
            this.ProjectName = projectName;
            this.ProjectNameAndProjectDeatil = projectNameAndProjectDeatil;
            this.Reconciled = reconciled;
            this.Outstanding = outstanding;
            this.Withholding = withholding;
            this.RefDocumentStatus = refDocumentStatus;
            this.RefDocumentStatusString = refDocumentStatusString;
            this.DocumentDeductionType = documentDeductionType;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", IsRequired = true, EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets ClaimDate
        /// </summary>
        [DataMember(Name = "claimDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ClaimDate { get; set; }

        /// <summary>
        /// Gets or Sets TotalBuyValue
        /// </summary>
        [DataMember(Name = "totalBuyValue", EmitDefaultValue = false)]
        public decimal TotalBuyValue { get; set; }

        /// <summary>
        /// Gets or Sets TotalBuyVatValue
        /// </summary>
        [DataMember(Name = "totalBuyVatValue", EmitDefaultValue = false)]
        public decimal TotalBuyVatValue { get; set; }

        /// <summary>
        /// Gets or Sets TotalSellValue
        /// </summary>
        [DataMember(Name = "totalSellValue", EmitDefaultValue = false)]
        public decimal TotalSellValue { get; set; }

        /// <summary>
        /// Gets or Sets TotalSellVatValue
        /// </summary>
        [DataMember(Name = "totalSellVatValue", EmitDefaultValue = false)]
        public decimal TotalSellVatValue { get; set; }

        /// <summary>
        /// Gets or Sets BroughtForward
        /// </summary>
        [DataMember(Name = "broughtForward", EmitDefaultValue = false)]
        public decimal BroughtForward { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public long CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name = "modifiedBy", EmitDefaultValue = false)]
        public long ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public OneOfCompany Company { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUser
        /// </summary>
        [DataMember(Name = "createdByUser", EmitDefaultValue = true)]
        public OneOfUser CreatedByUser { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedByUser
        /// </summary>
        [DataMember(Name = "modifiedByUser", EmitDefaultValue = true)]
        public OneOfUser ModifiedByUser { get; set; }

        /// <summary>
        /// Gets or Sets DatePayment
        /// </summary>
        [DataMember(Name = "datePayment", EmitDefaultValue = true)]
        public DateTime? DatePayment { get; set; }

        /// <summary>
        /// Gets or Sets Charge
        /// </summary>
        [DataMember(Name = "charge", EmitDefaultValue = true)]
        public decimal? Charge { get; set; }

        /// <summary>
        /// Gets or Sets Collected
        /// </summary>
        [DataMember(Name = "collected", EmitDefaultValue = true)]
        public decimal? Collected { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name = "tax", EmitDefaultValue = true)]
        public decimal? Tax { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name = "remarks", EmitDefaultValue = true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets PaymentWithHeld
        /// </summary>
        [DataMember(Name = "paymentWithHeld", EmitDefaultValue = false)]
        public decimal PaymentWithHeld { get; set; }

        /// <summary>
        /// Gets or Sets RemainingCollected
        /// </summary>
        [DataMember(Name = "remainingCollected", EmitDefaultValue = true)]
        public decimal? RemainingCollected { get; set; }

        /// <summary>
        /// Gets or Sets RemainingCollectedType
        /// </summary>
        [DataMember(Name = "remainingCollectedType", EmitDefaultValue = true)]
        public OneOfRemainingCollectedType RemainingCollectedType { get; set; }

        /// <summary>
        /// Gets or Sets DeductionAmount
        /// </summary>
        [DataMember(Name = "deductionAmount", EmitDefaultValue = true)]
        public decimal? DeductionAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDeductionType
        /// </summary>
        [DataMember(Name = "paymentDeductionType", EmitDefaultValue = true)]
        public OneOfDeductionType PaymentDeductionType { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountId
        /// </summary>
        [DataMember(Name = "bankAccountId", EmitDefaultValue = true)]
        public long? BankAccountId { get; set; }

        /// <summary>
        /// Gets or Sets CheckNumber
        /// </summary>
        [DataMember(Name = "checkNumber", EmitDefaultValue = true)]
        public string CheckNumber { get; set; }

        /// <summary>
        /// Gets or Sets CheckBankId
        /// </summary>
        [DataMember(Name = "checkBankId", EmitDefaultValue = true)]
        public string CheckBankId { get; set; }

        /// <summary>
        /// Gets or Sets TransferBankId
        /// </summary>
        [DataMember(Name = "transferBankId", EmitDefaultValue = true)]
        public string TransferBankId { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountNumber
        /// </summary>
        [DataMember(Name = "bankAccountNumber", EmitDefaultValue = true)]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets CheckDatePaid
        /// </summary>
        [DataMember(Name = "checkDatePaid", EmitDefaultValue = true)]
        public DateTime? CheckDatePaid { get; set; }

        /// <summary>
        /// Gets or Sets MethodPayment
        /// </summary>
        [DataMember(Name = "methodPayment", EmitDefaultValue = true)]
        public OneOfPaymentMethod MethodPayment { get; set; }

        /// <summary>
        /// Gets or Sets No
        /// </summary>
        [DataMember(Name = "no", EmitDefaultValue = false)]
        public int No { get; set; }

        /// <summary>
        /// Gets or Sets PettyCashName
        /// </summary>
        [DataMember(Name = "pettyCashName", EmitDefaultValue = true)]
        public string PettyCashName { get; set; }

        /// <summary>
        /// Gets or Sets PettyCashId
        /// </summary>
        [DataMember(Name = "pettyCashId", EmitDefaultValue = true)]
        public long? PettyCashId { get; set; }

        /// <summary>
        /// Gets or Sets ChequeId
        /// </summary>
        [DataMember(Name = "chequeId", EmitDefaultValue = true)]
        public long? ChequeId { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardId
        /// </summary>
        [DataMember(Name = "creditCardId", EmitDefaultValue = true)]
        public long? CreditCardId { get; set; }

        /// <summary>
        /// Gets or Sets OtherChannelId
        /// </summary>
        [DataMember(Name = "otherChannelId", EmitDefaultValue = true)]
        public long? OtherChannelId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSerial
        /// </summary>
        [DataMember(Name = "documentSerial", EmitDefaultValue = true)]
        public string DocumentSerial { get; set; }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name = "documentId", EmitDefaultValue = true)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [DataMember(Name = "approved", EmitDefaultValue = true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Gets or Sets PublishedOn
        /// </summary>
        [DataMember(Name = "publishedOn", EmitDefaultValue = false)]
        public DateTime PublishedOn { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDate
        /// </summary>
        [DataMember(Name = "documentDate", EmitDefaultValue = false)]
        public DateTime DocumentDate { get; set; }

        /// <summary>
        /// Gets or Sets VatRate
        /// </summary>
        [DataMember(Name = "vatRate", EmitDefaultValue = false)]
        public int VatRate { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name = "dueDate", EmitDefaultValue = true)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets InternalNotes
        /// </summary>
        [DataMember(Name = "internalNotes", EmitDefaultValue = true)]
        public string InternalNotes { get; set; }

        /// <summary>
        /// Gets or Sets RoundingAdjustment
        /// </summary>
        [DataMember(Name = "roundingAdjustment", EmitDefaultValue = false)]
        public decimal RoundingAdjustment { get; set; }

        /// <summary>
        /// Gets or Sets Gallery
        /// </summary>
        [DataMember(Name = "gallery", EmitDefaultValue = true)]
        public OneOfGallery Gallery { get; set; }

        /// <summary>
        /// Gets or Sets GalleryId
        /// </summary>
        [DataMember(Name = "galleryId", EmitDefaultValue = true)]
        public long? GalleryId { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "contact", EmitDefaultValue = true)]
        public OneOfContact Contact { get; set; }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [DataMember(Name = "contactId", EmitDefaultValue = false)]
        public long ContactId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentReferences
        /// </summary>
        [DataMember(Name = "documentReferences", EmitDefaultValue = true)]
        public List<IDocumentReference> DocumentReferences { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedToMe
        /// </summary>
        [DataMember(Name = "referencedToMe", EmitDefaultValue = true)]
        public List<IDocumentReference> ReferencedToMe { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedByMe
        /// </summary>
        [DataMember(Name = "referencedByMe", EmitDefaultValue = true)]
        public List<IDocumentReference> ReferencedByMe { get; set; }

        /// <summary>
        /// Gets or Sets StatusInt
        /// </summary>
        [DataMember(Name = "statusInt", EmitDefaultValue = false)]
        public int StatusInt { get; set; }

        /// <summary>
        /// Gets or Sets IsInlineDiscount
        /// </summary>
        [DataMember(Name = "isInlineDiscount", EmitDefaultValue = true)]
        public bool IsInlineDiscount { get; set; }

        /// <summary>
        /// Gets or Sets IsInlineVat
        /// </summary>
        [DataMember(Name = "isInlineVat", EmitDefaultValue = true)]
        public bool IsInlineVat { get; set; }

        /// <summary>
        /// Gets or Sets VatValue
        /// </summary>
        [DataMember(Name = "vatValue", EmitDefaultValue = true)]
        public decimal? VatValue { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSerialNoPrefix
        /// </summary>
        [DataMember(Name = "documentSerialNoPrefix", EmitDefaultValue = true)]
        public long? DocumentSerialNoPrefix { get; set; }

        /// <summary>
        /// Gets or Sets InlineVatValue
        /// </summary>
        [DataMember(Name = "inlineVatValue", EmitDefaultValue = false)]
        public decimal InlineVatValue { get; set; }

        /// <summary>
        /// Gets or Sets InlineDiscountValue
        /// </summary>
        [DataMember(Name = "inlineDiscountValue", EmitDefaultValue = false)]
        public decimal InlineDiscountValue { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name = "published", EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// Gets or Sets IsVatInclusive
        /// </summary>
        [DataMember(Name = "isVatInclusive", EmitDefaultValue = true)]
        public bool IsVatInclusive { get; set; }

        /// <summary>
        /// Gets or Sets RunningNumberType
        /// </summary>
        [DataMember(Name = "runningNumberType", EmitDefaultValue = false)]
        public int RunningNumberType { get; set; }

        /// <summary>
        /// Gets or Sets RunningModifiedOn
        /// </summary>
        [DataMember(Name = "runningModifiedOn", EmitDefaultValue = true)]
        public DateTime? RunningModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets ExemptAmount
        /// </summary>
        [DataMember(Name = "exemptAmount", EmitDefaultValue = false)]
        public decimal ExemptAmount { get; set; }

        /// <summary>
        /// Gets or Sets VatableAmount
        /// </summary>
        [DataMember(Name = "vatableAmount", EmitDefaultValue = false)]
        public decimal VatableAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalAfterDiscount
        /// </summary>
        [DataMember(Name = "totalAfterDiscount", EmitDefaultValue = false)]
        public decimal TotalAfterDiscount { get; set; }

        /// <summary>
        /// Gets or Sets SubTotal
        /// </summary>
        [DataMember(Name = "subTotal", EmitDefaultValue = false)]
        public decimal SubTotal { get; set; }

        /// <summary>
        /// Gets or Sets IsReCalculate
        /// </summary>
        [DataMember(Name = "isReCalculate", EmitDefaultValue = true)]
        public bool IsReCalculate { get; set; }

        /// <summary>
        /// Gets or Sets PartialPaymentMethod
        /// </summary>
        [DataMember(Name = "partialPaymentMethod", EmitDefaultValue = true)]
        public OneOfPartialPaymentMethod PartialPaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets VatAmount
        /// </summary>
        [DataMember(Name = "vatAmount", EmitDefaultValue = true)]
        public decimal? VatAmount { get; set; }

        /// <summary>
        /// Gets or Sets IsMigrate
        /// </summary>
        [DataMember(Name = "isMigrate", EmitDefaultValue = true)]
        public bool IsMigrate { get; set; }

        /// <summary>
        /// Gets or Sets ResetTransactionId
        /// </summary>
        [DataMember(Name = "resetTransactionId", EmitDefaultValue = true)]
        public long? ResetTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets RuleCompileStatus
        /// </summary>
        [DataMember(Name = "ruleCompileStatus", EmitDefaultValue = true)]
        public OneOfRuleCompileStatus RuleCompileStatus { get; set; }

        /// <summary>
        /// Gets or Sets ChequeCashingDate
        /// </summary>
        [DataMember(Name = "chequeCashingDate", EmitDefaultValue = true)]
        public DateTime? ChequeCashingDate { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", EmitDefaultValue = true)]
        public long? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectName
        /// </summary>
        [DataMember(Name = "projectName", EmitDefaultValue = true)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or Sets ProjectNameAndProjectDeatil
        /// </summary>
        [DataMember(Name = "projectNameAndProjectDeatil", EmitDefaultValue = true)]
        public string ProjectNameAndProjectDeatil { get; set; }

        /// <summary>
        /// Gets or Sets Reconciled
        /// </summary>
        [DataMember(Name = "reconciled", EmitDefaultValue = true)]
        public bool Reconciled { get; set; }

        /// <summary>
        /// Gets or Sets Outstanding
        /// </summary>
        [DataMember(Name = "outstanding", EmitDefaultValue = false)]
        public decimal Outstanding { get; set; }

        /// <summary>
        /// Gets or Sets Withholding
        /// </summary>
        [DataMember(Name = "withholding", EmitDefaultValue = true)]
        public int? Withholding { get; set; }

        /// <summary>
        /// Gets or Sets RefDocumentStatus
        /// </summary>
        [DataMember(Name = "refDocumentStatus", EmitDefaultValue = false)]
        public int RefDocumentStatus { get; set; }

        /// <summary>
        /// Gets or Sets RefDocumentStatusString
        /// </summary>
        [DataMember(Name = "refDocumentStatusString", EmitDefaultValue = true)]
        public string RefDocumentStatusString { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDeductionType
        /// </summary>
        [DataMember(Name = "documentDeductionType", EmitDefaultValue = true)]
        public OneOfDeductionType DocumentDeductionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchTaxFilingAllOf {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ClaimDate: ").Append(ClaimDate).Append("\n");
            sb.Append("  TotalBuyValue: ").Append(TotalBuyValue).Append("\n");
            sb.Append("  TotalBuyVatValue: ").Append(TotalBuyVatValue).Append("\n");
            sb.Append("  TotalSellValue: ").Append(TotalSellValue).Append("\n");
            sb.Append("  TotalSellVatValue: ").Append(TotalSellVatValue).Append("\n");
            sb.Append("  BroughtForward: ").Append(BroughtForward).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  ModifiedByUser: ").Append(ModifiedByUser).Append("\n");
            sb.Append("  DatePayment: ").Append(DatePayment).Append("\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("  Collected: ").Append(Collected).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  PaymentWithHeld: ").Append(PaymentWithHeld).Append("\n");
            sb.Append("  RemainingCollected: ").Append(RemainingCollected).Append("\n");
            sb.Append("  RemainingCollectedType: ").Append(RemainingCollectedType).Append("\n");
            sb.Append("  DeductionAmount: ").Append(DeductionAmount).Append("\n");
            sb.Append("  PaymentDeductionType: ").Append(PaymentDeductionType).Append("\n");
            sb.Append("  BankAccountId: ").Append(BankAccountId).Append("\n");
            sb.Append("  CheckNumber: ").Append(CheckNumber).Append("\n");
            sb.Append("  CheckBankId: ").Append(CheckBankId).Append("\n");
            sb.Append("  TransferBankId: ").Append(TransferBankId).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  CheckDatePaid: ").Append(CheckDatePaid).Append("\n");
            sb.Append("  MethodPayment: ").Append(MethodPayment).Append("\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  PettyCashName: ").Append(PettyCashName).Append("\n");
            sb.Append("  PettyCashId: ").Append(PettyCashId).Append("\n");
            sb.Append("  ChequeId: ").Append(ChequeId).Append("\n");
            sb.Append("  CreditCardId: ").Append(CreditCardId).Append("\n");
            sb.Append("  OtherChannelId: ").Append(OtherChannelId).Append("\n");
            sb.Append("  DocumentSerial: ").Append(DocumentSerial).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  PublishedOn: ").Append(PublishedOn).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  InternalNotes: ").Append(InternalNotes).Append("\n");
            sb.Append("  RoundingAdjustment: ").Append(RoundingAdjustment).Append("\n");
            sb.Append("  Gallery: ").Append(Gallery).Append("\n");
            sb.Append("  GalleryId: ").Append(GalleryId).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  DocumentReferences: ").Append(DocumentReferences).Append("\n");
            sb.Append("  ReferencedToMe: ").Append(ReferencedToMe).Append("\n");
            sb.Append("  ReferencedByMe: ").Append(ReferencedByMe).Append("\n");
            sb.Append("  StatusInt: ").Append(StatusInt).Append("\n");
            sb.Append("  IsInlineDiscount: ").Append(IsInlineDiscount).Append("\n");
            sb.Append("  IsInlineVat: ").Append(IsInlineVat).Append("\n");
            sb.Append("  VatValue: ").Append(VatValue).Append("\n");
            sb.Append("  DocumentSerialNoPrefix: ").Append(DocumentSerialNoPrefix).Append("\n");
            sb.Append("  InlineVatValue: ").Append(InlineVatValue).Append("\n");
            sb.Append("  InlineDiscountValue: ").Append(InlineDiscountValue).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  IsVatInclusive: ").Append(IsVatInclusive).Append("\n");
            sb.Append("  RunningNumberType: ").Append(RunningNumberType).Append("\n");
            sb.Append("  RunningModifiedOn: ").Append(RunningModifiedOn).Append("\n");
            sb.Append("  ExemptAmount: ").Append(ExemptAmount).Append("\n");
            sb.Append("  VatableAmount: ").Append(VatableAmount).Append("\n");
            sb.Append("  TotalAfterDiscount: ").Append(TotalAfterDiscount).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  IsReCalculate: ").Append(IsReCalculate).Append("\n");
            sb.Append("  PartialPaymentMethod: ").Append(PartialPaymentMethod).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  IsMigrate: ").Append(IsMigrate).Append("\n");
            sb.Append("  ResetTransactionId: ").Append(ResetTransactionId).Append("\n");
            sb.Append("  RuleCompileStatus: ").Append(RuleCompileStatus).Append("\n");
            sb.Append("  ChequeCashingDate: ").Append(ChequeCashingDate).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  ProjectNameAndProjectDeatil: ").Append(ProjectNameAndProjectDeatil).Append("\n");
            sb.Append("  Reconciled: ").Append(Reconciled).Append("\n");
            sb.Append("  Outstanding: ").Append(Outstanding).Append("\n");
            sb.Append("  Withholding: ").Append(Withholding).Append("\n");
            sb.Append("  RefDocumentStatus: ").Append(RefDocumentStatus).Append("\n");
            sb.Append("  RefDocumentStatusString: ").Append(RefDocumentStatusString).Append("\n");
            sb.Append("  DocumentDeductionType: ").Append(DocumentDeductionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchTaxFilingAllOf);
        }

        /// <summary>
        /// Returns true if BatchTaxFilingAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchTaxFilingAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchTaxFilingAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ClaimDate == input.ClaimDate ||
                    (this.ClaimDate != null &&
                    this.ClaimDate.Equals(input.ClaimDate))
                ) && 
                (
                    this.TotalBuyValue == input.TotalBuyValue ||
                    this.TotalBuyValue.Equals(input.TotalBuyValue)
                ) && 
                (
                    this.TotalBuyVatValue == input.TotalBuyVatValue ||
                    this.TotalBuyVatValue.Equals(input.TotalBuyVatValue)
                ) && 
                (
                    this.TotalSellValue == input.TotalSellValue ||
                    this.TotalSellValue.Equals(input.TotalSellValue)
                ) && 
                (
                    this.TotalSellVatValue == input.TotalSellVatValue ||
                    this.TotalSellVatValue.Equals(input.TotalSellVatValue)
                ) && 
                (
                    this.BroughtForward == input.BroughtForward ||
                    this.BroughtForward.Equals(input.BroughtForward)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                ) && 
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    this.ModifiedBy.Equals(input.ModifiedBy)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.ModifiedByUser == input.ModifiedByUser ||
                    (this.ModifiedByUser != null &&
                    this.ModifiedByUser.Equals(input.ModifiedByUser))
                ) && 
                (
                    this.DatePayment == input.DatePayment ||
                    (this.DatePayment != null &&
                    this.DatePayment.Equals(input.DatePayment))
                ) && 
                (
                    this.Charge == input.Charge ||
                    (this.Charge != null &&
                    this.Charge.Equals(input.Charge))
                ) && 
                (
                    this.Collected == input.Collected ||
                    (this.Collected != null &&
                    this.Collected.Equals(input.Collected))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.PaymentWithHeld == input.PaymentWithHeld ||
                    this.PaymentWithHeld.Equals(input.PaymentWithHeld)
                ) && 
                (
                    this.RemainingCollected == input.RemainingCollected ||
                    (this.RemainingCollected != null &&
                    this.RemainingCollected.Equals(input.RemainingCollected))
                ) && 
                (
                    this.RemainingCollectedType == input.RemainingCollectedType ||
                    (this.RemainingCollectedType != null &&
                    this.RemainingCollectedType.Equals(input.RemainingCollectedType))
                ) && 
                (
                    this.DeductionAmount == input.DeductionAmount ||
                    (this.DeductionAmount != null &&
                    this.DeductionAmount.Equals(input.DeductionAmount))
                ) && 
                (
                    this.PaymentDeductionType == input.PaymentDeductionType ||
                    (this.PaymentDeductionType != null &&
                    this.PaymentDeductionType.Equals(input.PaymentDeductionType))
                ) && 
                (
                    this.BankAccountId == input.BankAccountId ||
                    (this.BankAccountId != null &&
                    this.BankAccountId.Equals(input.BankAccountId))
                ) && 
                (
                    this.CheckNumber == input.CheckNumber ||
                    (this.CheckNumber != null &&
                    this.CheckNumber.Equals(input.CheckNumber))
                ) && 
                (
                    this.CheckBankId == input.CheckBankId ||
                    (this.CheckBankId != null &&
                    this.CheckBankId.Equals(input.CheckBankId))
                ) && 
                (
                    this.TransferBankId == input.TransferBankId ||
                    (this.TransferBankId != null &&
                    this.TransferBankId.Equals(input.TransferBankId))
                ) && 
                (
                    this.BankAccountNumber == input.BankAccountNumber ||
                    (this.BankAccountNumber != null &&
                    this.BankAccountNumber.Equals(input.BankAccountNumber))
                ) && 
                (
                    this.CheckDatePaid == input.CheckDatePaid ||
                    (this.CheckDatePaid != null &&
                    this.CheckDatePaid.Equals(input.CheckDatePaid))
                ) && 
                (
                    this.MethodPayment == input.MethodPayment ||
                    (this.MethodPayment != null &&
                    this.MethodPayment.Equals(input.MethodPayment))
                ) && 
                (
                    this.No == input.No ||
                    this.No.Equals(input.No)
                ) && 
                (
                    this.PettyCashName == input.PettyCashName ||
                    (this.PettyCashName != null &&
                    this.PettyCashName.Equals(input.PettyCashName))
                ) && 
                (
                    this.PettyCashId == input.PettyCashId ||
                    (this.PettyCashId != null &&
                    this.PettyCashId.Equals(input.PettyCashId))
                ) && 
                (
                    this.ChequeId == input.ChequeId ||
                    (this.ChequeId != null &&
                    this.ChequeId.Equals(input.ChequeId))
                ) && 
                (
                    this.CreditCardId == input.CreditCardId ||
                    (this.CreditCardId != null &&
                    this.CreditCardId.Equals(input.CreditCardId))
                ) && 
                (
                    this.OtherChannelId == input.OtherChannelId ||
                    (this.OtherChannelId != null &&
                    this.OtherChannelId.Equals(input.OtherChannelId))
                ) && 
                (
                    this.DocumentSerial == input.DocumentSerial ||
                    (this.DocumentSerial != null &&
                    this.DocumentSerial.Equals(input.DocumentSerial))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.Approved == input.Approved ||
                    this.Approved.Equals(input.Approved)
                ) && 
                (
                    this.PublishedOn == input.PublishedOn ||
                    (this.PublishedOn != null &&
                    this.PublishedOn.Equals(input.PublishedOn))
                ) && 
                (
                    this.DocumentDate == input.DocumentDate ||
                    (this.DocumentDate != null &&
                    this.DocumentDate.Equals(input.DocumentDate))
                ) && 
                (
                    this.VatRate == input.VatRate ||
                    this.VatRate.Equals(input.VatRate)
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.InternalNotes == input.InternalNotes ||
                    (this.InternalNotes != null &&
                    this.InternalNotes.Equals(input.InternalNotes))
                ) && 
                (
                    this.RoundingAdjustment == input.RoundingAdjustment ||
                    this.RoundingAdjustment.Equals(input.RoundingAdjustment)
                ) && 
                (
                    this.Gallery == input.Gallery ||
                    (this.Gallery != null &&
                    this.Gallery.Equals(input.Gallery))
                ) && 
                (
                    this.GalleryId == input.GalleryId ||
                    (this.GalleryId != null &&
                    this.GalleryId.Equals(input.GalleryId))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    this.ContactId.Equals(input.ContactId)
                ) && 
                (
                    this.DocumentReferences == input.DocumentReferences ||
                    this.DocumentReferences != null &&
                    input.DocumentReferences != null &&
                    this.DocumentReferences.SequenceEqual(input.DocumentReferences)
                ) && 
                (
                    this.ReferencedToMe == input.ReferencedToMe ||
                    this.ReferencedToMe != null &&
                    input.ReferencedToMe != null &&
                    this.ReferencedToMe.SequenceEqual(input.ReferencedToMe)
                ) && 
                (
                    this.ReferencedByMe == input.ReferencedByMe ||
                    this.ReferencedByMe != null &&
                    input.ReferencedByMe != null &&
                    this.ReferencedByMe.SequenceEqual(input.ReferencedByMe)
                ) && 
                (
                    this.StatusInt == input.StatusInt ||
                    this.StatusInt.Equals(input.StatusInt)
                ) && 
                (
                    this.IsInlineDiscount == input.IsInlineDiscount ||
                    this.IsInlineDiscount.Equals(input.IsInlineDiscount)
                ) && 
                (
                    this.IsInlineVat == input.IsInlineVat ||
                    this.IsInlineVat.Equals(input.IsInlineVat)
                ) && 
                (
                    this.VatValue == input.VatValue ||
                    (this.VatValue != null &&
                    this.VatValue.Equals(input.VatValue))
                ) && 
                (
                    this.DocumentSerialNoPrefix == input.DocumentSerialNoPrefix ||
                    (this.DocumentSerialNoPrefix != null &&
                    this.DocumentSerialNoPrefix.Equals(input.DocumentSerialNoPrefix))
                ) && 
                (
                    this.InlineVatValue == input.InlineVatValue ||
                    this.InlineVatValue.Equals(input.InlineVatValue)
                ) && 
                (
                    this.InlineDiscountValue == input.InlineDiscountValue ||
                    this.InlineDiscountValue.Equals(input.InlineDiscountValue)
                ) && 
                (
                    this.Published == input.Published ||
                    this.Published.Equals(input.Published)
                ) && 
                (
                    this.IsVatInclusive == input.IsVatInclusive ||
                    this.IsVatInclusive.Equals(input.IsVatInclusive)
                ) && 
                (
                    this.RunningNumberType == input.RunningNumberType ||
                    this.RunningNumberType.Equals(input.RunningNumberType)
                ) && 
                (
                    this.RunningModifiedOn == input.RunningModifiedOn ||
                    (this.RunningModifiedOn != null &&
                    this.RunningModifiedOn.Equals(input.RunningModifiedOn))
                ) && 
                (
                    this.ExemptAmount == input.ExemptAmount ||
                    this.ExemptAmount.Equals(input.ExemptAmount)
                ) && 
                (
                    this.VatableAmount == input.VatableAmount ||
                    this.VatableAmount.Equals(input.VatableAmount)
                ) && 
                (
                    this.TotalAfterDiscount == input.TotalAfterDiscount ||
                    this.TotalAfterDiscount.Equals(input.TotalAfterDiscount)
                ) && 
                (
                    this.SubTotal == input.SubTotal ||
                    this.SubTotal.Equals(input.SubTotal)
                ) && 
                (
                    this.IsReCalculate == input.IsReCalculate ||
                    this.IsReCalculate.Equals(input.IsReCalculate)
                ) && 
                (
                    this.PartialPaymentMethod == input.PartialPaymentMethod ||
                    (this.PartialPaymentMethod != null &&
                    this.PartialPaymentMethod.Equals(input.PartialPaymentMethod))
                ) && 
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) && 
                (
                    this.IsMigrate == input.IsMigrate ||
                    this.IsMigrate.Equals(input.IsMigrate)
                ) && 
                (
                    this.ResetTransactionId == input.ResetTransactionId ||
                    (this.ResetTransactionId != null &&
                    this.ResetTransactionId.Equals(input.ResetTransactionId))
                ) && 
                (
                    this.RuleCompileStatus == input.RuleCompileStatus ||
                    (this.RuleCompileStatus != null &&
                    this.RuleCompileStatus.Equals(input.RuleCompileStatus))
                ) && 
                (
                    this.ChequeCashingDate == input.ChequeCashingDate ||
                    (this.ChequeCashingDate != null &&
                    this.ChequeCashingDate.Equals(input.ChequeCashingDate))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.ProjectNameAndProjectDeatil == input.ProjectNameAndProjectDeatil ||
                    (this.ProjectNameAndProjectDeatil != null &&
                    this.ProjectNameAndProjectDeatil.Equals(input.ProjectNameAndProjectDeatil))
                ) && 
                (
                    this.Reconciled == input.Reconciled ||
                    this.Reconciled.Equals(input.Reconciled)
                ) && 
                (
                    this.Outstanding == input.Outstanding ||
                    this.Outstanding.Equals(input.Outstanding)
                ) && 
                (
                    this.Withholding == input.Withholding ||
                    (this.Withholding != null &&
                    this.Withholding.Equals(input.Withholding))
                ) && 
                (
                    this.RefDocumentStatus == input.RefDocumentStatus ||
                    this.RefDocumentStatus.Equals(input.RefDocumentStatus)
                ) && 
                (
                    this.RefDocumentStatusString == input.RefDocumentStatusString ||
                    (this.RefDocumentStatusString != null &&
                    this.RefDocumentStatusString.Equals(input.RefDocumentStatusString))
                ) && 
                (
                    this.DocumentDeductionType == input.DocumentDeductionType ||
                    (this.DocumentDeductionType != null &&
                    this.DocumentDeductionType.Equals(input.DocumentDeductionType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.ClaimDate != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalBuyValue.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalBuyVatValue.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalSellValue.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalSellVatValue.GetHashCode();
                hashCode = (hashCode * 59) + this.BroughtForward.GetHashCode();
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifiedBy.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.CreatedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedByUser.GetHashCode();
                }
                if (this.ModifiedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedByUser.GetHashCode();
                }
                if (this.DatePayment != null)
                {
                    hashCode = (hashCode * 59) + this.DatePayment.GetHashCode();
                }
                if (this.Charge != null)
                {
                    hashCode = (hashCode * 59) + this.Charge.GetHashCode();
                }
                if (this.Collected != null)
                {
                    hashCode = (hashCode * 59) + this.Collected.GetHashCode();
                }
                if (this.Tax != null)
                {
                    hashCode = (hashCode * 59) + this.Tax.GetHashCode();
                }
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentWithHeld.GetHashCode();
                if (this.RemainingCollected != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingCollected.GetHashCode();
                }
                if (this.RemainingCollectedType != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingCollectedType.GetHashCode();
                }
                if (this.DeductionAmount != null)
                {
                    hashCode = (hashCode * 59) + this.DeductionAmount.GetHashCode();
                }
                if (this.PaymentDeductionType != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDeductionType.GetHashCode();
                }
                if (this.BankAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountId.GetHashCode();
                }
                if (this.CheckNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CheckNumber.GetHashCode();
                }
                if (this.CheckBankId != null)
                {
                    hashCode = (hashCode * 59) + this.CheckBankId.GetHashCode();
                }
                if (this.TransferBankId != null)
                {
                    hashCode = (hashCode * 59) + this.TransferBankId.GetHashCode();
                }
                if (this.BankAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountNumber.GetHashCode();
                }
                if (this.CheckDatePaid != null)
                {
                    hashCode = (hashCode * 59) + this.CheckDatePaid.GetHashCode();
                }
                if (this.MethodPayment != null)
                {
                    hashCode = (hashCode * 59) + this.MethodPayment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.No.GetHashCode();
                if (this.PettyCashName != null)
                {
                    hashCode = (hashCode * 59) + this.PettyCashName.GetHashCode();
                }
                if (this.PettyCashId != null)
                {
                    hashCode = (hashCode * 59) + this.PettyCashId.GetHashCode();
                }
                if (this.ChequeId != null)
                {
                    hashCode = (hashCode * 59) + this.ChequeId.GetHashCode();
                }
                if (this.CreditCardId != null)
                {
                    hashCode = (hashCode * 59) + this.CreditCardId.GetHashCode();
                }
                if (this.OtherChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.OtherChannelId.GetHashCode();
                }
                if (this.DocumentSerial != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentSerial.GetHashCode();
                }
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Approved.GetHashCode();
                if (this.PublishedOn != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedOn.GetHashCode();
                }
                if (this.DocumentDate != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VatRate.GetHashCode();
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.InternalNotes != null)
                {
                    hashCode = (hashCode * 59) + this.InternalNotes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RoundingAdjustment.GetHashCode();
                if (this.Gallery != null)
                {
                    hashCode = (hashCode * 59) + this.Gallery.GetHashCode();
                }
                if (this.GalleryId != null)
                {
                    hashCode = (hashCode * 59) + this.GalleryId.GetHashCode();
                }
                if (this.Contact != null)
                {
                    hashCode = (hashCode * 59) + this.Contact.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContactId.GetHashCode();
                if (this.DocumentReferences != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentReferences.GetHashCode();
                }
                if (this.ReferencedToMe != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedToMe.GetHashCode();
                }
                if (this.ReferencedByMe != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedByMe.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusInt.GetHashCode();
                hashCode = (hashCode * 59) + this.IsInlineDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.IsInlineVat.GetHashCode();
                if (this.VatValue != null)
                {
                    hashCode = (hashCode * 59) + this.VatValue.GetHashCode();
                }
                if (this.DocumentSerialNoPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentSerialNoPrefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InlineVatValue.GetHashCode();
                hashCode = (hashCode * 59) + this.InlineDiscountValue.GetHashCode();
                hashCode = (hashCode * 59) + this.Published.GetHashCode();
                hashCode = (hashCode * 59) + this.IsVatInclusive.GetHashCode();
                hashCode = (hashCode * 59) + this.RunningNumberType.GetHashCode();
                if (this.RunningModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.RunningModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExemptAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.VatableAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalAfterDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.SubTotal.GetHashCode();
                hashCode = (hashCode * 59) + this.IsReCalculate.GetHashCode();
                if (this.PartialPaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PartialPaymentMethod.GetHashCode();
                }
                if (this.VatAmount != null)
                {
                    hashCode = (hashCode * 59) + this.VatAmount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMigrate.GetHashCode();
                if (this.ResetTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.ResetTransactionId.GetHashCode();
                }
                if (this.RuleCompileStatus != null)
                {
                    hashCode = (hashCode * 59) + this.RuleCompileStatus.GetHashCode();
                }
                if (this.ChequeCashingDate != null)
                {
                    hashCode = (hashCode * 59) + this.ChequeCashingDate.GetHashCode();
                }
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.ProjectName != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectName.GetHashCode();
                }
                if (this.ProjectNameAndProjectDeatil != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectNameAndProjectDeatil.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Reconciled.GetHashCode();
                hashCode = (hashCode * 59) + this.Outstanding.GetHashCode();
                if (this.Withholding != null)
                {
                    hashCode = (hashCode * 59) + this.Withholding.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RefDocumentStatus.GetHashCode();
                if (this.RefDocumentStatusString != null)
                {
                    hashCode = (hashCode * 59) + this.RefDocumentStatusString.GetHashCode();
                }
                if (this.DocumentDeductionType != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentDeductionType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ClaimDate (DateTime) minLength
            if (this.ClaimDate != null && this.ClaimDate.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClaimDate, length must be greater than 1.", new [] { "ClaimDate" });
            }

            // CreatedOn (DateTime) minLength
            if (this.CreatedOn != null && this.CreatedOn.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedOn, length must be greater than 1.", new [] { "CreatedOn" });
            }

            // ModifiedOn (DateTime) minLength
            if (this.ModifiedOn != null && this.ModifiedOn.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifiedOn, length must be greater than 1.", new [] { "ModifiedOn" });
            }

            yield break;
        }
    }

}

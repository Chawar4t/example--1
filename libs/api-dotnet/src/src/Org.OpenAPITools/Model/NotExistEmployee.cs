/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NotExistEmployee
    /// </summary>
    [DataContract(Name = "NotExistEmployee")]
    public partial class NotExistEmployee : IEquatable<NotExistEmployee>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PayrollType
        /// </summary>
        [DataMember(Name = "payrollType", EmitDefaultValue = false)]
        public PayrollType? PayrollType { get; set; }

        /// <summary>
        /// Gets or Sets PaidPeriod
        /// </summary>
        [DataMember(Name = "paidPeriod", EmitDefaultValue = false)]
        public PaidPeriod? PaidPeriod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotExistEmployee" /> class.
        /// </summary>
        /// <param name="idList">idList.</param>
        /// <param name="payrollType">payrollType.</param>
        /// <param name="paidPeriod">paidPeriod.</param>
        public NotExistEmployee(List<long> idList = default(List<long>), PayrollType? payrollType = default(PayrollType?), PaidPeriod? paidPeriod = default(PaidPeriod?))
        {
            this.IdList = idList;
            this.PayrollType = payrollType;
            this.PaidPeriod = paidPeriod;
        }

        /// <summary>
        /// Gets or Sets IdList
        /// </summary>
        [DataMember(Name = "idList", EmitDefaultValue = true)]
        public List<long> IdList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotExistEmployee {\n");
            sb.Append("  IdList: ").Append(IdList).Append("\n");
            sb.Append("  PayrollType: ").Append(PayrollType).Append("\n");
            sb.Append("  PaidPeriod: ").Append(PaidPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotExistEmployee);
        }

        /// <summary>
        /// Returns true if NotExistEmployee instances are equal
        /// </summary>
        /// <param name="input">Instance of NotExistEmployee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotExistEmployee input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IdList == input.IdList ||
                    this.IdList != null &&
                    input.IdList != null &&
                    this.IdList.SequenceEqual(input.IdList)
                ) && 
                (
                    this.PayrollType == input.PayrollType ||
                    this.PayrollType.Equals(input.PayrollType)
                ) && 
                (
                    this.PaidPeriod == input.PaidPeriod ||
                    this.PaidPeriod.Equals(input.PaidPeriod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdList != null)
                {
                    hashCode = (hashCode * 59) + this.IdList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PayrollType.GetHashCode();
                hashCode = (hashCode * 59) + this.PaidPeriod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

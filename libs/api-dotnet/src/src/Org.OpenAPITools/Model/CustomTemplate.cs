/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CustomTemplate
    /// </summary>
    [DataContract(Name = "CustomTemplate")]
    public partial class CustomTemplate : IEquatable<CustomTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomTemplate" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="sheetIndex">sheetIndex.</param>
        /// <param name="columns">columns.</param>
        /// <param name="dateFormat">dateFormat.</param>
        /// <param name="ignoreLastRow">ignoreLastRow.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="customTemplateInfo">customTemplateInfo.</param>
        /// <param name="formulas">formulas.</param>
        public CustomTemplate(long id = default(long), string name = default(string), int sheetIndex = default(int), Object columns = default(Object), OneOfDateInfo dateFormat = default(OneOfDateInfo), bool ignoreLastRow = default(bool), string imageUrl = default(string), OneOfCustomTemplateInfo customTemplateInfo = default(OneOfCustomTemplateInfo), Object formulas = default(Object))
        {
            this.Id = id;
            this.Name = name;
            this.SheetIndex = sheetIndex;
            this.Columns = columns;
            this.DateFormat = dateFormat;
            this.IgnoreLastRow = ignoreLastRow;
            this.ImageUrl = imageUrl;
            this.CustomTemplateInfo = customTemplateInfo;
            this.Formulas = formulas;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SheetIndex
        /// </summary>
        [DataMember(Name = "sheetIndex", EmitDefaultValue = false)]
        public int SheetIndex { get; set; }

        /// <summary>
        /// Gets or Sets Columns
        /// </summary>
        [DataMember(Name = "columns", EmitDefaultValue = true)]
        public Object Columns { get; set; }

        /// <summary>
        /// Gets or Sets DateFormat
        /// </summary>
        [DataMember(Name = "dateFormat", EmitDefaultValue = true)]
        public OneOfDateInfo DateFormat { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreLastRow
        /// </summary>
        [DataMember(Name = "ignoreLastRow", EmitDefaultValue = true)]
        public bool IgnoreLastRow { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name = "imageUrl", EmitDefaultValue = true)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets CustomTemplateInfo
        /// </summary>
        [DataMember(Name = "customTemplateInfo", EmitDefaultValue = true)]
        public OneOfCustomTemplateInfo CustomTemplateInfo { get; set; }

        /// <summary>
        /// Gets or Sets Formulas
        /// </summary>
        [DataMember(Name = "formulas", EmitDefaultValue = true)]
        public Object Formulas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomTemplate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SheetIndex: ").Append(SheetIndex).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  IgnoreLastRow: ").Append(IgnoreLastRow).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  CustomTemplateInfo: ").Append(CustomTemplateInfo).Append("\n");
            sb.Append("  Formulas: ").Append(Formulas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomTemplate);
        }

        /// <summary>
        /// Returns true if CustomTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomTemplate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SheetIndex == input.SheetIndex ||
                    this.SheetIndex.Equals(input.SheetIndex)
                ) && 
                (
                    this.Columns == input.Columns ||
                    (this.Columns != null &&
                    this.Columns.Equals(input.Columns))
                ) && 
                (
                    this.DateFormat == input.DateFormat ||
                    (this.DateFormat != null &&
                    this.DateFormat.Equals(input.DateFormat))
                ) && 
                (
                    this.IgnoreLastRow == input.IgnoreLastRow ||
                    this.IgnoreLastRow.Equals(input.IgnoreLastRow)
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.CustomTemplateInfo == input.CustomTemplateInfo ||
                    (this.CustomTemplateInfo != null &&
                    this.CustomTemplateInfo.Equals(input.CustomTemplateInfo))
                ) && 
                (
                    this.Formulas == input.Formulas ||
                    (this.Formulas != null &&
                    this.Formulas.Equals(input.Formulas))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SheetIndex.GetHashCode();
                if (this.Columns != null)
                {
                    hashCode = (hashCode * 59) + this.Columns.GetHashCode();
                }
                if (this.DateFormat != null)
                {
                    hashCode = (hashCode * 59) + this.DateFormat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IgnoreLastRow.GetHashCode();
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                if (this.CustomTemplateInfo != null)
                {
                    hashCode = (hashCode * 59) + this.CustomTemplateInfo.GetHashCode();
                }
                if (this.Formulas != null)
                {
                    hashCode = (hashCode * 59) + this.Formulas.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

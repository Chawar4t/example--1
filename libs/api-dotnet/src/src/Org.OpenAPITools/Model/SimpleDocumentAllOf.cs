/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SimpleDocumentAllOf
    /// </summary>
    [DataContract(Name = "SimpleDocument_allOf")]
    public partial class SimpleDocumentAllOf : IEquatable<SimpleDocumentAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleDocumentAllOf" /> class.
        /// </summary>
        /// <param name="items">items.</param>
        /// <param name="documentReference">documentReference.</param>
        /// <param name="exemptAmount">exemptAmount.</param>
        public SimpleDocumentAllOf(List<SimpleProductItem> items = default(List<SimpleProductItem>), List<UpgradeDocument> documentReference = default(List<UpgradeDocument>), decimal? exemptAmount = default(decimal?))
        {
            this.Items = items;
            this.DocumentReference = documentReference;
            this.ExemptAmount = exemptAmount;
        }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = true)]
        public List<SimpleProductItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets DocumentReference
        /// </summary>
        [DataMember(Name = "documentReference", EmitDefaultValue = true)]
        public List<UpgradeDocument> DocumentReference { get; set; }

        /// <summary>
        /// Gets or Sets ExemptAmount
        /// </summary>
        [DataMember(Name = "exemptAmount", EmitDefaultValue = true)]
        public decimal? ExemptAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimpleDocumentAllOf {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  DocumentReference: ").Append(DocumentReference).Append("\n");
            sb.Append("  ExemptAmount: ").Append(ExemptAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimpleDocumentAllOf);
        }

        /// <summary>
        /// Returns true if SimpleDocumentAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of SimpleDocumentAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimpleDocumentAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.DocumentReference == input.DocumentReference ||
                    this.DocumentReference != null &&
                    input.DocumentReference != null &&
                    this.DocumentReference.SequenceEqual(input.DocumentReference)
                ) && 
                (
                    this.ExemptAmount == input.ExemptAmount ||
                    (this.ExemptAmount != null &&
                    this.ExemptAmount.Equals(input.ExemptAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                if (this.DocumentReference != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentReference.GetHashCode();
                }
                if (this.ExemptAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ExemptAmount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

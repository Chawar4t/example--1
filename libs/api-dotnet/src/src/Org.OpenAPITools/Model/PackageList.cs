/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PackageList
    /// </summary>
    [DataContract(Name = "PackageList")]
    public partial class PackageList : IEquatable<PackageList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PackageList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageList" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="packageName">packageName (required).</param>
        /// <param name="description">description.</param>
        /// <param name="configuration">configuration (required).</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="displayNameTH">displayNameTH.</param>
        /// <param name="displayNameEN">displayNameEN.</param>
        public PackageList(int id = default(int), string packageName = default(string), string description = default(string), string configuration = default(string), string remarks = default(string), string displayNameTH = default(string), string displayNameEN = default(string))
        {
            // to ensure "packageName" is required (not null)
            if (packageName == null) {
                throw new ArgumentNullException("packageName is a required property for PackageList and cannot be null");
            }
            this.PackageName = packageName;
            // to ensure "configuration" is required (not null)
            if (configuration == null) {
                throw new ArgumentNullException("configuration is a required property for PackageList and cannot be null");
            }
            this._Configuration = configuration;
            this.Id = id;
            this.Description = description;
            this.Remarks = remarks;
            this.DisplayNameTH = displayNameTH;
            this.DisplayNameEN = displayNameEN;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets PackageName
        /// </summary>
        [DataMember(Name = "packageName", IsRequired = true, EmitDefaultValue = false)]
        public string PackageName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets _Configuration
        /// </summary>
        [DataMember(Name = "configuration", IsRequired = true, EmitDefaultValue = false)]
        public string _Configuration { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name = "remarks", EmitDefaultValue = true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets DisplayNameTH
        /// </summary>
        [DataMember(Name = "displayNameTH", EmitDefaultValue = true)]
        public string DisplayNameTH { get; set; }

        /// <summary>
        /// Gets or Sets DisplayNameEN
        /// </summary>
        [DataMember(Name = "displayNameEN", EmitDefaultValue = true)]
        public string DisplayNameEN { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackageList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PackageName: ").Append(PackageName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  _Configuration: ").Append(_Configuration).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  DisplayNameTH: ").Append(DisplayNameTH).Append("\n");
            sb.Append("  DisplayNameEN: ").Append(DisplayNameEN).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackageList);
        }

        /// <summary>
        /// Returns true if PackageList instances are equal
        /// </summary>
        /// <param name="input">Instance of PackageList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.PackageName == input.PackageName ||
                    (this.PackageName != null &&
                    this.PackageName.Equals(input.PackageName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this._Configuration == input._Configuration ||
                    (this._Configuration != null &&
                    this._Configuration.Equals(input._Configuration))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.DisplayNameTH == input.DisplayNameTH ||
                    (this.DisplayNameTH != null &&
                    this.DisplayNameTH.Equals(input.DisplayNameTH))
                ) && 
                (
                    this.DisplayNameEN == input.DisplayNameEN ||
                    (this.DisplayNameEN != null &&
                    this.DisplayNameEN.Equals(input.DisplayNameEN))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.PackageName != null)
                {
                    hashCode = (hashCode * 59) + this.PackageName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this._Configuration != null)
                {
                    hashCode = (hashCode * 59) + this._Configuration.GetHashCode();
                }
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                if (this.DisplayNameTH != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayNameTH.GetHashCode();
                }
                if (this.DisplayNameEN != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayNameEN.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PackageName (string) minLength
            if (this.PackageName != null && this.PackageName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageName, length must be greater than 1.", new [] { "PackageName" });
            }

            // _Configuration (string) minLength
            if (this._Configuration != null && this._Configuration.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for _Configuration, length must be greater than 1.", new [] { "_Configuration" });
            }

            yield break;
        }
    }

}

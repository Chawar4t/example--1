/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProductList
    /// </summary>
    [DataContract(Name = "ProductList")]
    public partial class ProductList : IEquatable<ProductList>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public ProductTypes? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductList" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="barCode">barCode.</param>
        /// <param name="name">name (required).</param>
        /// <param name="unitMeasurement">unitMeasurement.</param>
        /// <param name="unitPrice">unitPrice.</param>
        /// <param name="unitPriceWithVat">unitPriceWithVat.</param>
        /// <param name="unitWeight">unitWeight.</param>
        /// <param name="categoryId">categoryId.</param>
        /// <param name="description">description.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="galleryId">galleryId.</param>
        /// <param name="isVat">isVat.</param>
        /// <param name="mainUnitId">mainUnitId.</param>
        /// <param name="subUnitId">subUnitId.</param>
        /// <param name="mainUnitAmount">mainUnitAmount.</param>
        /// <param name="subUnitAmount">subUnitAmount.</param>
        /// <param name="hasStock">hasStock.</param>
        /// <param name="productCode">productCode.</param>
        /// <param name="type">type.</param>
        /// <param name="buyPrice">buyPrice.</param>
        /// <param name="buyPriceWithVat">buyPriceWithVat.</param>
        /// <param name="isBuyVat">isBuyVat.</param>
        /// <param name="allowOverSold">allowOverSold.</param>
        /// <param name="image">image.</param>
        /// <param name="isDelete">isDelete.</param>
        /// <param name="vatRate">vatRate.</param>
        /// <param name="buyVatRate">buyVatRate.</param>
        /// <param name="resetTransactionId">resetTransactionId.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="modifiedOn">modifiedOn.</param>
        /// <param name="broughtForwardOn">broughtForwardOn.</param>
        /// <param name="buyDescription">buyDescription.</param>
        /// <param name="buyChartOfAccountId">buyChartOfAccountId.</param>
        /// <param name="sellChartOfAccountId">sellChartOfAccountId.</param>
        /// <param name="productNonInventoryType">productNonInventoryType.</param>
        /// <param name="transactionId">transactionId.</param>
        /// <param name="productMainUnit">productMainUnit.</param>
        /// <param name="productSubUnit">productSubUnit.</param>
        /// <param name="productCategory">productCategory.</param>
        /// <param name="isMigrate">isMigrate.</param>
        public ProductList(long id = default(long), string barCode = default(string), string name = default(string), string unitMeasurement = default(string), decimal? unitPrice = default(decimal?), decimal? unitPriceWithVat = default(decimal?), decimal? unitWeight = default(decimal?), long? categoryId = default(long?), string description = default(string), string remarks = default(string), long? galleryId = default(long?), bool isVat = default(bool), long? mainUnitId = default(long?), long? subUnitId = default(long?), int mainUnitAmount = default(int), int subUnitAmount = default(int), bool hasStock = default(bool), string productCode = default(string), ProductTypes? type = default(ProductTypes?), decimal? buyPrice = default(decimal?), decimal? buyPriceWithVat = default(decimal?), bool isBuyVat = default(bool), bool allowOverSold = default(bool), string image = default(string), bool isDelete = default(bool), int vatRate = default(int), int buyVatRate = default(int), long? resetTransactionId = default(long?), DateTime createdOn = default(DateTime), DateTime modifiedOn = default(DateTime), DateTime? broughtForwardOn = default(DateTime?), string buyDescription = default(string), long? buyChartOfAccountId = default(long?), long? sellChartOfAccountId = default(long?), OneOfProductNonInventoryType productNonInventoryType = default(OneOfProductNonInventoryType), string transactionId = default(string), OneOfProductUnit productMainUnit = default(OneOfProductUnit), OneOfProductUnit productSubUnit = default(OneOfProductUnit), OneOfProductCategory productCategory = default(OneOfProductCategory), bool isMigrate = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for ProductList and cannot be null");
            }
            this.Name = name;
            this.Id = id;
            this.BarCode = barCode;
            this.UnitMeasurement = unitMeasurement;
            this.UnitPrice = unitPrice;
            this.UnitPriceWithVat = unitPriceWithVat;
            this.UnitWeight = unitWeight;
            this.CategoryId = categoryId;
            this.Description = description;
            this.Remarks = remarks;
            this.GalleryId = galleryId;
            this.IsVat = isVat;
            this.MainUnitId = mainUnitId;
            this.SubUnitId = subUnitId;
            this.MainUnitAmount = mainUnitAmount;
            this.SubUnitAmount = subUnitAmount;
            this.HasStock = hasStock;
            this.ProductCode = productCode;
            this.Type = type;
            this.BuyPrice = buyPrice;
            this.BuyPriceWithVat = buyPriceWithVat;
            this.IsBuyVat = isBuyVat;
            this.AllowOverSold = allowOverSold;
            this.Image = image;
            this.IsDelete = isDelete;
            this.VatRate = vatRate;
            this.BuyVatRate = buyVatRate;
            this.ResetTransactionId = resetTransactionId;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.BroughtForwardOn = broughtForwardOn;
            this.BuyDescription = buyDescription;
            this.BuyChartOfAccountId = buyChartOfAccountId;
            this.SellChartOfAccountId = sellChartOfAccountId;
            this.ProductNonInventoryType = productNonInventoryType;
            this.TransactionId = transactionId;
            this.ProductMainUnit = productMainUnit;
            this.ProductSubUnit = productSubUnit;
            this.ProductCategory = productCategory;
            this.IsMigrate = isMigrate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets BarCode
        /// </summary>
        [DataMember(Name = "barCode", EmitDefaultValue = true)]
        public string BarCode { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UnitMeasurement
        /// </summary>
        [DataMember(Name = "unitMeasurement", EmitDefaultValue = true)]
        public string UnitMeasurement { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name = "unitPrice", EmitDefaultValue = true)]
        public decimal? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets UnitPriceWithVat
        /// </summary>
        [DataMember(Name = "unitPriceWithVat", EmitDefaultValue = true)]
        public decimal? UnitPriceWithVat { get; set; }

        /// <summary>
        /// Gets or Sets UnitWeight
        /// </summary>
        [DataMember(Name = "unitWeight", EmitDefaultValue = true)]
        public decimal? UnitWeight { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name = "categoryId", EmitDefaultValue = true)]
        public long? CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name = "remarks", EmitDefaultValue = true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets GalleryId
        /// </summary>
        [DataMember(Name = "galleryId", EmitDefaultValue = true)]
        public long? GalleryId { get; set; }

        /// <summary>
        /// Gets or Sets IsVat
        /// </summary>
        [DataMember(Name = "isVat", EmitDefaultValue = true)]
        public bool IsVat { get; set; }

        /// <summary>
        /// Gets or Sets MainUnitId
        /// </summary>
        [DataMember(Name = "mainUnitId", EmitDefaultValue = true)]
        public long? MainUnitId { get; set; }

        /// <summary>
        /// Gets or Sets SubUnitId
        /// </summary>
        [DataMember(Name = "subUnitId", EmitDefaultValue = true)]
        public long? SubUnitId { get; set; }

        /// <summary>
        /// Gets or Sets MainUnitAmount
        /// </summary>
        [DataMember(Name = "mainUnitAmount", EmitDefaultValue = false)]
        public int MainUnitAmount { get; set; }

        /// <summary>
        /// Gets or Sets SubUnitAmount
        /// </summary>
        [DataMember(Name = "subUnitAmount", EmitDefaultValue = false)]
        public int SubUnitAmount { get; set; }

        /// <summary>
        /// Gets or Sets HasStock
        /// </summary>
        [DataMember(Name = "hasStock", EmitDefaultValue = true)]
        public bool HasStock { get; set; }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name = "productCode", EmitDefaultValue = true)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets BuyPrice
        /// </summary>
        [DataMember(Name = "buyPrice", EmitDefaultValue = true)]
        public decimal? BuyPrice { get; set; }

        /// <summary>
        /// Gets or Sets BuyPriceWithVat
        /// </summary>
        [DataMember(Name = "buyPriceWithVat", EmitDefaultValue = true)]
        public decimal? BuyPriceWithVat { get; set; }

        /// <summary>
        /// Gets or Sets IsBuyVat
        /// </summary>
        [DataMember(Name = "isBuyVat", EmitDefaultValue = true)]
        public bool IsBuyVat { get; set; }

        /// <summary>
        /// Gets or Sets AllowOverSold
        /// </summary>
        [DataMember(Name = "allowOverSold", EmitDefaultValue = true)]
        public bool AllowOverSold { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = true)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets VatRate
        /// </summary>
        [DataMember(Name = "vatRate", EmitDefaultValue = false)]
        public int VatRate { get; set; }

        /// <summary>
        /// Gets or Sets BuyVatRate
        /// </summary>
        [DataMember(Name = "buyVatRate", EmitDefaultValue = false)]
        public int BuyVatRate { get; set; }

        /// <summary>
        /// Gets or Sets ResetTransactionId
        /// </summary>
        [DataMember(Name = "resetTransactionId", EmitDefaultValue = true)]
        public long? ResetTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets BroughtForwardOn
        /// </summary>
        [DataMember(Name = "broughtForwardOn", EmitDefaultValue = true)]
        public DateTime? BroughtForwardOn { get; set; }

        /// <summary>
        /// Gets or Sets BuyDescription
        /// </summary>
        [DataMember(Name = "buyDescription", EmitDefaultValue = true)]
        public string BuyDescription { get; set; }

        /// <summary>
        /// Gets or Sets BuyChartOfAccountId
        /// </summary>
        [DataMember(Name = "buyChartOfAccountId", EmitDefaultValue = true)]
        public long? BuyChartOfAccountId { get; set; }

        /// <summary>
        /// Gets or Sets SellChartOfAccountId
        /// </summary>
        [DataMember(Name = "sellChartOfAccountId", EmitDefaultValue = true)]
        public long? SellChartOfAccountId { get; set; }

        /// <summary>
        /// Gets or Sets ProductNonInventoryType
        /// </summary>
        [DataMember(Name = "productNonInventoryType", EmitDefaultValue = true)]
        public OneOfProductNonInventoryType ProductNonInventoryType { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name = "transactionId", EmitDefaultValue = true)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets ProductMainUnit
        /// </summary>
        [DataMember(Name = "productMainUnit", EmitDefaultValue = true)]
        public OneOfProductUnit ProductMainUnit { get; set; }

        /// <summary>
        /// Gets or Sets ProductSubUnit
        /// </summary>
        [DataMember(Name = "productSubUnit", EmitDefaultValue = true)]
        public OneOfProductUnit ProductSubUnit { get; set; }

        /// <summary>
        /// Gets or Sets ProductCategory
        /// </summary>
        [DataMember(Name = "productCategory", EmitDefaultValue = true)]
        public OneOfProductCategory ProductCategory { get; set; }

        /// <summary>
        /// Gets or Sets IsMigrate
        /// </summary>
        [DataMember(Name = "isMigrate", EmitDefaultValue = true)]
        public bool IsMigrate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BarCode: ").Append(BarCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UnitMeasurement: ").Append(UnitMeasurement).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  UnitPriceWithVat: ").Append(UnitPriceWithVat).Append("\n");
            sb.Append("  UnitWeight: ").Append(UnitWeight).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  GalleryId: ").Append(GalleryId).Append("\n");
            sb.Append("  IsVat: ").Append(IsVat).Append("\n");
            sb.Append("  MainUnitId: ").Append(MainUnitId).Append("\n");
            sb.Append("  SubUnitId: ").Append(SubUnitId).Append("\n");
            sb.Append("  MainUnitAmount: ").Append(MainUnitAmount).Append("\n");
            sb.Append("  SubUnitAmount: ").Append(SubUnitAmount).Append("\n");
            sb.Append("  HasStock: ").Append(HasStock).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BuyPrice: ").Append(BuyPrice).Append("\n");
            sb.Append("  BuyPriceWithVat: ").Append(BuyPriceWithVat).Append("\n");
            sb.Append("  IsBuyVat: ").Append(IsBuyVat).Append("\n");
            sb.Append("  AllowOverSold: ").Append(AllowOverSold).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  BuyVatRate: ").Append(BuyVatRate).Append("\n");
            sb.Append("  ResetTransactionId: ").Append(ResetTransactionId).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  BroughtForwardOn: ").Append(BroughtForwardOn).Append("\n");
            sb.Append("  BuyDescription: ").Append(BuyDescription).Append("\n");
            sb.Append("  BuyChartOfAccountId: ").Append(BuyChartOfAccountId).Append("\n");
            sb.Append("  SellChartOfAccountId: ").Append(SellChartOfAccountId).Append("\n");
            sb.Append("  ProductNonInventoryType: ").Append(ProductNonInventoryType).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  ProductMainUnit: ").Append(ProductMainUnit).Append("\n");
            sb.Append("  ProductSubUnit: ").Append(ProductSubUnit).Append("\n");
            sb.Append("  ProductCategory: ").Append(ProductCategory).Append("\n");
            sb.Append("  IsMigrate: ").Append(IsMigrate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductList);
        }

        /// <summary>
        /// Returns true if ProductList instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.BarCode == input.BarCode ||
                    (this.BarCode != null &&
                    this.BarCode.Equals(input.BarCode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UnitMeasurement == input.UnitMeasurement ||
                    (this.UnitMeasurement != null &&
                    this.UnitMeasurement.Equals(input.UnitMeasurement))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.UnitPriceWithVat == input.UnitPriceWithVat ||
                    (this.UnitPriceWithVat != null &&
                    this.UnitPriceWithVat.Equals(input.UnitPriceWithVat))
                ) && 
                (
                    this.UnitWeight == input.UnitWeight ||
                    (this.UnitWeight != null &&
                    this.UnitWeight.Equals(input.UnitWeight))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.GalleryId == input.GalleryId ||
                    (this.GalleryId != null &&
                    this.GalleryId.Equals(input.GalleryId))
                ) && 
                (
                    this.IsVat == input.IsVat ||
                    this.IsVat.Equals(input.IsVat)
                ) && 
                (
                    this.MainUnitId == input.MainUnitId ||
                    (this.MainUnitId != null &&
                    this.MainUnitId.Equals(input.MainUnitId))
                ) && 
                (
                    this.SubUnitId == input.SubUnitId ||
                    (this.SubUnitId != null &&
                    this.SubUnitId.Equals(input.SubUnitId))
                ) && 
                (
                    this.MainUnitAmount == input.MainUnitAmount ||
                    this.MainUnitAmount.Equals(input.MainUnitAmount)
                ) && 
                (
                    this.SubUnitAmount == input.SubUnitAmount ||
                    this.SubUnitAmount.Equals(input.SubUnitAmount)
                ) && 
                (
                    this.HasStock == input.HasStock ||
                    this.HasStock.Equals(input.HasStock)
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.BuyPrice == input.BuyPrice ||
                    (this.BuyPrice != null &&
                    this.BuyPrice.Equals(input.BuyPrice))
                ) && 
                (
                    this.BuyPriceWithVat == input.BuyPriceWithVat ||
                    (this.BuyPriceWithVat != null &&
                    this.BuyPriceWithVat.Equals(input.BuyPriceWithVat))
                ) && 
                (
                    this.IsBuyVat == input.IsBuyVat ||
                    this.IsBuyVat.Equals(input.IsBuyVat)
                ) && 
                (
                    this.AllowOverSold == input.AllowOverSold ||
                    this.AllowOverSold.Equals(input.AllowOverSold)
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.VatRate == input.VatRate ||
                    this.VatRate.Equals(input.VatRate)
                ) && 
                (
                    this.BuyVatRate == input.BuyVatRate ||
                    this.BuyVatRate.Equals(input.BuyVatRate)
                ) && 
                (
                    this.ResetTransactionId == input.ResetTransactionId ||
                    (this.ResetTransactionId != null &&
                    this.ResetTransactionId.Equals(input.ResetTransactionId))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.BroughtForwardOn == input.BroughtForwardOn ||
                    (this.BroughtForwardOn != null &&
                    this.BroughtForwardOn.Equals(input.BroughtForwardOn))
                ) && 
                (
                    this.BuyDescription == input.BuyDescription ||
                    (this.BuyDescription != null &&
                    this.BuyDescription.Equals(input.BuyDescription))
                ) && 
                (
                    this.BuyChartOfAccountId == input.BuyChartOfAccountId ||
                    (this.BuyChartOfAccountId != null &&
                    this.BuyChartOfAccountId.Equals(input.BuyChartOfAccountId))
                ) && 
                (
                    this.SellChartOfAccountId == input.SellChartOfAccountId ||
                    (this.SellChartOfAccountId != null &&
                    this.SellChartOfAccountId.Equals(input.SellChartOfAccountId))
                ) && 
                (
                    this.ProductNonInventoryType == input.ProductNonInventoryType ||
                    (this.ProductNonInventoryType != null &&
                    this.ProductNonInventoryType.Equals(input.ProductNonInventoryType))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.ProductMainUnit == input.ProductMainUnit ||
                    (this.ProductMainUnit != null &&
                    this.ProductMainUnit.Equals(input.ProductMainUnit))
                ) && 
                (
                    this.ProductSubUnit == input.ProductSubUnit ||
                    (this.ProductSubUnit != null &&
                    this.ProductSubUnit.Equals(input.ProductSubUnit))
                ) && 
                (
                    this.ProductCategory == input.ProductCategory ||
                    (this.ProductCategory != null &&
                    this.ProductCategory.Equals(input.ProductCategory))
                ) && 
                (
                    this.IsMigrate == input.IsMigrate ||
                    this.IsMigrate.Equals(input.IsMigrate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.BarCode != null)
                {
                    hashCode = (hashCode * 59) + this.BarCode.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.UnitMeasurement != null)
                {
                    hashCode = (hashCode * 59) + this.UnitMeasurement.GetHashCode();
                }
                if (this.UnitPrice != null)
                {
                    hashCode = (hashCode * 59) + this.UnitPrice.GetHashCode();
                }
                if (this.UnitPriceWithVat != null)
                {
                    hashCode = (hashCode * 59) + this.UnitPriceWithVat.GetHashCode();
                }
                if (this.UnitWeight != null)
                {
                    hashCode = (hashCode * 59) + this.UnitWeight.GetHashCode();
                }
                if (this.CategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                if (this.GalleryId != null)
                {
                    hashCode = (hashCode * 59) + this.GalleryId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsVat.GetHashCode();
                if (this.MainUnitId != null)
                {
                    hashCode = (hashCode * 59) + this.MainUnitId.GetHashCode();
                }
                if (this.SubUnitId != null)
                {
                    hashCode = (hashCode * 59) + this.SubUnitId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MainUnitAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.SubUnitAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.HasStock.GetHashCode();
                if (this.ProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.BuyPrice != null)
                {
                    hashCode = (hashCode * 59) + this.BuyPrice.GetHashCode();
                }
                if (this.BuyPriceWithVat != null)
                {
                    hashCode = (hashCode * 59) + this.BuyPriceWithVat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsBuyVat.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowOverSold.GetHashCode();
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                hashCode = (hashCode * 59) + this.VatRate.GetHashCode();
                hashCode = (hashCode * 59) + this.BuyVatRate.GetHashCode();
                if (this.ResetTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.ResetTransactionId.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                if (this.BroughtForwardOn != null)
                {
                    hashCode = (hashCode * 59) + this.BroughtForwardOn.GetHashCode();
                }
                if (this.BuyDescription != null)
                {
                    hashCode = (hashCode * 59) + this.BuyDescription.GetHashCode();
                }
                if (this.BuyChartOfAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyChartOfAccountId.GetHashCode();
                }
                if (this.SellChartOfAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.SellChartOfAccountId.GetHashCode();
                }
                if (this.ProductNonInventoryType != null)
                {
                    hashCode = (hashCode * 59) + this.ProductNonInventoryType.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.ProductMainUnit != null)
                {
                    hashCode = (hashCode * 59) + this.ProductMainUnit.GetHashCode();
                }
                if (this.ProductSubUnit != null)
                {
                    hashCode = (hashCode * 59) + this.ProductSubUnit.GetHashCode();
                }
                if (this.ProductCategory != null)
                {
                    hashCode = (hashCode * 59) + this.ProductCategory.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMigrate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // BarCode (string) maxLength
            if (this.BarCode != null && this.BarCode.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BarCode, length must be less than 255.", new [] { "BarCode" });
            }

            // BarCode (string) minLength
            if (this.BarCode != null && this.BarCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BarCode, length must be greater than 0.", new [] { "BarCode" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            // UnitMeasurement (string) maxLength
            if (this.UnitMeasurement != null && this.UnitMeasurement.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitMeasurement, length must be less than 50.", new [] { "UnitMeasurement" });
            }

            // UnitMeasurement (string) minLength
            if (this.UnitMeasurement != null && this.UnitMeasurement.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitMeasurement, length must be greater than 0.", new [] { "UnitMeasurement" });
            }

            // ProductCode (string) maxLength
            if (this.ProductCode != null && this.ProductCode.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, length must be less than 255.", new [] { "ProductCode" });
            }

            // ProductCode (string) minLength
            if (this.ProductCode != null && this.ProductCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, length must be greater than 0.", new [] { "ProductCode" });
            }

            // TransactionId (string) maxLength
            if (this.TransactionId != null && this.TransactionId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be less than 50.", new [] { "TransactionId" });
            }

            // TransactionId (string) minLength
            if (this.TransactionId != null && this.TransactionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be greater than 0.", new [] { "TransactionId" });
            }

            yield break;
        }
    }

}

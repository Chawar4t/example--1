/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PayrollPreferences
    /// </summary>
    [DataContract(Name = "PayrollPreferences")]
    public partial class PayrollPreferences : IEquatable<PayrollPreferences>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets KConnectProductCode
        /// </summary>
        [DataMember(Name = "kConnect_ProductCode", EmitDefaultValue = false)]
        public KConnectProductCode? KConnectProductCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollPreferences" /> class.
        /// </summary>
        /// <param name="companyId">companyId.</param>
        /// <param name="isSocialSecurityRegistered">isSocialSecurityRegistered.</param>
        /// <param name="employerAccountNumber">employerAccountNumber.</param>
        /// <param name="employerAccountBranch">employerAccountBranch.</param>
        /// <param name="kCorporateClientCode">kCorporateClientCode.</param>
        /// <param name="kCorporateAccountNumber">kCorporateAccountNumber.</param>
        /// <param name="payrollBankAccountId">payrollBankAccountId.</param>
        /// <param name="kConnectProductCode">kConnectProductCode.</param>
        /// <param name="overtimePND">overtimePND.</param>
        /// <param name="commissionPND">commissionPND.</param>
        /// <param name="bonusPND">bonusPND.</param>
        /// <param name="allowancePND">allowancePND.</param>
        /// <param name="colaPND">colaPND.</param>
        /// <param name="medicalExpensePND">medicalExpensePND.</param>
        /// <param name="accommodationPND">accommodationPND.</param>
        /// <param name="directorRemunerationPND">directorRemunerationPND.</param>
        /// <param name="otherAdditionPND">otherAdditionPND.</param>
        /// <param name="accessKConnect">accessKConnect.</param>
        public PayrollPreferences(long companyId = default(long), bool isSocialSecurityRegistered = default(bool), string employerAccountNumber = default(string), string employerAccountBranch = default(string), string kCorporateClientCode = default(string), string kCorporateAccountNumber = default(string), long? payrollBankAccountId = default(long?), KConnectProductCode? kConnectProductCode = default(KConnectProductCode?), int? overtimePND = default(int?), int? commissionPND = default(int?), int? bonusPND = default(int?), int? allowancePND = default(int?), int? colaPND = default(int?), int? medicalExpensePND = default(int?), int? accommodationPND = default(int?), int? directorRemunerationPND = default(int?), int? otherAdditionPND = default(int?), bool accessKConnect = default(bool))
        {
            this.CompanyId = companyId;
            this.IsSocialSecurityRegistered = isSocialSecurityRegistered;
            this.EmployerAccountNumber = employerAccountNumber;
            this.EmployerAccountBranch = employerAccountBranch;
            this.KCorporateClientCode = kCorporateClientCode;
            this.KCorporateAccountNumber = kCorporateAccountNumber;
            this.PayrollBankAccountId = payrollBankAccountId;
            this.KConnectProductCode = kConnectProductCode;
            this.OvertimePND = overtimePND;
            this.CommissionPND = commissionPND;
            this.BonusPND = bonusPND;
            this.AllowancePND = allowancePND;
            this.ColaPND = colaPND;
            this.MedicalExpensePND = medicalExpensePND;
            this.AccommodationPND = accommodationPND;
            this.DirectorRemunerationPND = directorRemunerationPND;
            this.OtherAdditionPND = otherAdditionPND;
            this.AccessKConnect = accessKConnect;
        }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets IsSocialSecurityRegistered
        /// </summary>
        [DataMember(Name = "isSocialSecurityRegistered", EmitDefaultValue = true)]
        public bool IsSocialSecurityRegistered { get; set; }

        /// <summary>
        /// Gets or Sets EmployerAccountNumber
        /// </summary>
        [DataMember(Name = "employerAccountNumber", EmitDefaultValue = true)]
        public string EmployerAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets EmployerAccountBranch
        /// </summary>
        [DataMember(Name = "employerAccountBranch", EmitDefaultValue = true)]
        public string EmployerAccountBranch { get; set; }

        /// <summary>
        /// Gets or Sets KCorporateClientCode
        /// </summary>
        [DataMember(Name = "kCorporateClientCode", EmitDefaultValue = true)]
        public string KCorporateClientCode { get; set; }

        /// <summary>
        /// Gets or Sets KCorporateAccountNumber
        /// </summary>
        [DataMember(Name = "kCorporateAccountNumber", EmitDefaultValue = true)]
        public string KCorporateAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets PayrollBankAccountId
        /// </summary>
        [DataMember(Name = "payrollBankAccountId", EmitDefaultValue = true)]
        public long? PayrollBankAccountId { get; set; }

        /// <summary>
        /// Gets or Sets OvertimePND
        /// </summary>
        [DataMember(Name = "overtimePND", EmitDefaultValue = true)]
        public int? OvertimePND { get; set; }

        /// <summary>
        /// Gets or Sets CommissionPND
        /// </summary>
        [DataMember(Name = "commissionPND", EmitDefaultValue = true)]
        public int? CommissionPND { get; set; }

        /// <summary>
        /// Gets or Sets BonusPND
        /// </summary>
        [DataMember(Name = "bonusPND", EmitDefaultValue = true)]
        public int? BonusPND { get; set; }

        /// <summary>
        /// Gets or Sets AllowancePND
        /// </summary>
        [DataMember(Name = "allowancePND", EmitDefaultValue = true)]
        public int? AllowancePND { get; set; }

        /// <summary>
        /// Gets or Sets ColaPND
        /// </summary>
        [DataMember(Name = "colaPND", EmitDefaultValue = true)]
        public int? ColaPND { get; set; }

        /// <summary>
        /// Gets or Sets MedicalExpensePND
        /// </summary>
        [DataMember(Name = "medicalExpensePND", EmitDefaultValue = true)]
        public int? MedicalExpensePND { get; set; }

        /// <summary>
        /// Gets or Sets AccommodationPND
        /// </summary>
        [DataMember(Name = "accommodationPND", EmitDefaultValue = true)]
        public int? AccommodationPND { get; set; }

        /// <summary>
        /// Gets or Sets DirectorRemunerationPND
        /// </summary>
        [DataMember(Name = "directorRemunerationPND", EmitDefaultValue = true)]
        public int? DirectorRemunerationPND { get; set; }

        /// <summary>
        /// Gets or Sets OtherAdditionPND
        /// </summary>
        [DataMember(Name = "otherAdditionPND", EmitDefaultValue = true)]
        public int? OtherAdditionPND { get; set; }

        /// <summary>
        /// Gets or Sets AccessKConnect
        /// </summary>
        [DataMember(Name = "accessKConnect", EmitDefaultValue = true)]
        public bool AccessKConnect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayrollPreferences {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  IsSocialSecurityRegistered: ").Append(IsSocialSecurityRegistered).Append("\n");
            sb.Append("  EmployerAccountNumber: ").Append(EmployerAccountNumber).Append("\n");
            sb.Append("  EmployerAccountBranch: ").Append(EmployerAccountBranch).Append("\n");
            sb.Append("  KCorporateClientCode: ").Append(KCorporateClientCode).Append("\n");
            sb.Append("  KCorporateAccountNumber: ").Append(KCorporateAccountNumber).Append("\n");
            sb.Append("  PayrollBankAccountId: ").Append(PayrollBankAccountId).Append("\n");
            sb.Append("  KConnectProductCode: ").Append(KConnectProductCode).Append("\n");
            sb.Append("  OvertimePND: ").Append(OvertimePND).Append("\n");
            sb.Append("  CommissionPND: ").Append(CommissionPND).Append("\n");
            sb.Append("  BonusPND: ").Append(BonusPND).Append("\n");
            sb.Append("  AllowancePND: ").Append(AllowancePND).Append("\n");
            sb.Append("  ColaPND: ").Append(ColaPND).Append("\n");
            sb.Append("  MedicalExpensePND: ").Append(MedicalExpensePND).Append("\n");
            sb.Append("  AccommodationPND: ").Append(AccommodationPND).Append("\n");
            sb.Append("  DirectorRemunerationPND: ").Append(DirectorRemunerationPND).Append("\n");
            sb.Append("  OtherAdditionPND: ").Append(OtherAdditionPND).Append("\n");
            sb.Append("  AccessKConnect: ").Append(AccessKConnect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayrollPreferences);
        }

        /// <summary>
        /// Returns true if PayrollPreferences instances are equal
        /// </summary>
        /// <param name="input">Instance of PayrollPreferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayrollPreferences input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.IsSocialSecurityRegistered == input.IsSocialSecurityRegistered ||
                    this.IsSocialSecurityRegistered.Equals(input.IsSocialSecurityRegistered)
                ) && 
                (
                    this.EmployerAccountNumber == input.EmployerAccountNumber ||
                    (this.EmployerAccountNumber != null &&
                    this.EmployerAccountNumber.Equals(input.EmployerAccountNumber))
                ) && 
                (
                    this.EmployerAccountBranch == input.EmployerAccountBranch ||
                    (this.EmployerAccountBranch != null &&
                    this.EmployerAccountBranch.Equals(input.EmployerAccountBranch))
                ) && 
                (
                    this.KCorporateClientCode == input.KCorporateClientCode ||
                    (this.KCorporateClientCode != null &&
                    this.KCorporateClientCode.Equals(input.KCorporateClientCode))
                ) && 
                (
                    this.KCorporateAccountNumber == input.KCorporateAccountNumber ||
                    (this.KCorporateAccountNumber != null &&
                    this.KCorporateAccountNumber.Equals(input.KCorporateAccountNumber))
                ) && 
                (
                    this.PayrollBankAccountId == input.PayrollBankAccountId ||
                    (this.PayrollBankAccountId != null &&
                    this.PayrollBankAccountId.Equals(input.PayrollBankAccountId))
                ) && 
                (
                    this.KConnectProductCode == input.KConnectProductCode ||
                    this.KConnectProductCode.Equals(input.KConnectProductCode)
                ) && 
                (
                    this.OvertimePND == input.OvertimePND ||
                    (this.OvertimePND != null &&
                    this.OvertimePND.Equals(input.OvertimePND))
                ) && 
                (
                    this.CommissionPND == input.CommissionPND ||
                    (this.CommissionPND != null &&
                    this.CommissionPND.Equals(input.CommissionPND))
                ) && 
                (
                    this.BonusPND == input.BonusPND ||
                    (this.BonusPND != null &&
                    this.BonusPND.Equals(input.BonusPND))
                ) && 
                (
                    this.AllowancePND == input.AllowancePND ||
                    (this.AllowancePND != null &&
                    this.AllowancePND.Equals(input.AllowancePND))
                ) && 
                (
                    this.ColaPND == input.ColaPND ||
                    (this.ColaPND != null &&
                    this.ColaPND.Equals(input.ColaPND))
                ) && 
                (
                    this.MedicalExpensePND == input.MedicalExpensePND ||
                    (this.MedicalExpensePND != null &&
                    this.MedicalExpensePND.Equals(input.MedicalExpensePND))
                ) && 
                (
                    this.AccommodationPND == input.AccommodationPND ||
                    (this.AccommodationPND != null &&
                    this.AccommodationPND.Equals(input.AccommodationPND))
                ) && 
                (
                    this.DirectorRemunerationPND == input.DirectorRemunerationPND ||
                    (this.DirectorRemunerationPND != null &&
                    this.DirectorRemunerationPND.Equals(input.DirectorRemunerationPND))
                ) && 
                (
                    this.OtherAdditionPND == input.OtherAdditionPND ||
                    (this.OtherAdditionPND != null &&
                    this.OtherAdditionPND.Equals(input.OtherAdditionPND))
                ) && 
                (
                    this.AccessKConnect == input.AccessKConnect ||
                    this.AccessKConnect.Equals(input.AccessKConnect)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSocialSecurityRegistered.GetHashCode();
                if (this.EmployerAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.EmployerAccountNumber.GetHashCode();
                }
                if (this.EmployerAccountBranch != null)
                {
                    hashCode = (hashCode * 59) + this.EmployerAccountBranch.GetHashCode();
                }
                if (this.KCorporateClientCode != null)
                {
                    hashCode = (hashCode * 59) + this.KCorporateClientCode.GetHashCode();
                }
                if (this.KCorporateAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.KCorporateAccountNumber.GetHashCode();
                }
                if (this.PayrollBankAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.PayrollBankAccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.KConnectProductCode.GetHashCode();
                if (this.OvertimePND != null)
                {
                    hashCode = (hashCode * 59) + this.OvertimePND.GetHashCode();
                }
                if (this.CommissionPND != null)
                {
                    hashCode = (hashCode * 59) + this.CommissionPND.GetHashCode();
                }
                if (this.BonusPND != null)
                {
                    hashCode = (hashCode * 59) + this.BonusPND.GetHashCode();
                }
                if (this.AllowancePND != null)
                {
                    hashCode = (hashCode * 59) + this.AllowancePND.GetHashCode();
                }
                if (this.ColaPND != null)
                {
                    hashCode = (hashCode * 59) + this.ColaPND.GetHashCode();
                }
                if (this.MedicalExpensePND != null)
                {
                    hashCode = (hashCode * 59) + this.MedicalExpensePND.GetHashCode();
                }
                if (this.AccommodationPND != null)
                {
                    hashCode = (hashCode * 59) + this.AccommodationPND.GetHashCode();
                }
                if (this.DirectorRemunerationPND != null)
                {
                    hashCode = (hashCode * 59) + this.DirectorRemunerationPND.GetHashCode();
                }
                if (this.OtherAdditionPND != null)
                {
                    hashCode = (hashCode * 59) + this.OtherAdditionPND.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccessKConnect.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

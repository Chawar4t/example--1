/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CompanySubscription
    /// </summary>
    [DataContract(Name = "CompanySubscription")]
    public partial class CompanySubscription : IEquatable<CompanySubscription>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PackageStatus
        /// </summary>
        [DataMember(Name = "packageStatus", EmitDefaultValue = false)]
        public PackageStatus? PackageStatus { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public UpgradeType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanySubscription" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyId">companyId.</param>
        /// <param name="packageId">packageId.</param>
        /// <param name="packageStatus">packageStatus.</param>
        /// <param name="transactionDate">transactionDate.</param>
        /// <param name="transactionId">transactionId.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="couponId">couponId.</param>
        /// <param name="paidBy">paidBy.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="modifiedOn">modifiedOn.</param>
        /// <param name="days">days.</param>
        /// <param name="packageDays">packageDays.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="type">type.</param>
        /// <param name="paymentChannel">paymentChannel.</param>
        /// <param name="value">value.</param>
        /// <param name="isWithheld">isWithheld.</param>
        /// <param name="withheld">withheld.</param>
        /// <param name="internalFile">internalFile.</param>
        /// <param name="invoiceId">invoiceId.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="isRequestInvoice">isRequestInvoice.</param>
        /// <param name="addOn">addOn.</param>
        /// <param name="packageList">packageList.</param>
        /// <param name="paySlipImageDate">paySlipImageDate.</param>
        /// <param name="paySlipImageTime">paySlipImageTime.</param>
        /// <param name="paySlipImageAmount">paySlipImageAmount.</param>
        /// <param name="paySlipImageContact">paySlipImageContact.</param>
        public CompanySubscription(long id = default(long), long companyId = default(long), int packageId = default(int), PackageStatus? packageStatus = default(PackageStatus?), DateTime transactionDate = default(DateTime), string transactionId = default(string), DateTime expirationDate = default(DateTime), int? couponId = default(int?), long paidBy = default(long), DateTime createdOn = default(DateTime), DateTime modifiedOn = default(DateTime), int days = default(int), int packageDays = default(int), int? quantity = default(int?), UpgradeType? type = default(UpgradeType?), OneOfPaymentChannel paymentChannel = default(OneOfPaymentChannel), decimal? value = default(decimal?), bool isWithheld = default(bool), decimal? withheld = default(decimal?), string internalFile = default(string), long? invoiceId = default(long?), string remarks = default(string), bool? isRequestInvoice = default(bool?), string addOn = default(string), OneOfPackageList packageList = default(OneOfPackageList), DateTime? paySlipImageDate = default(DateTime?), string paySlipImageTime = default(string), decimal? paySlipImageAmount = default(decimal?), string paySlipImageContact = default(string))
        {
            this.Id = id;
            this.CompanyId = companyId;
            this.PackageId = packageId;
            this.PackageStatus = packageStatus;
            this.TransactionDate = transactionDate;
            this.TransactionId = transactionId;
            this.ExpirationDate = expirationDate;
            this.CouponId = couponId;
            this.PaidBy = paidBy;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.Days = days;
            this.PackageDays = packageDays;
            this.Quantity = quantity;
            this.Type = type;
            this.PaymentChannel = paymentChannel;
            this.Value = value;
            this.IsWithheld = isWithheld;
            this.Withheld = withheld;
            this.InternalFile = internalFile;
            this.InvoiceId = invoiceId;
            this.Remarks = remarks;
            this.IsRequestInvoice = isRequestInvoice;
            this.AddOn = addOn;
            this.PackageList = packageList;
            this.PaySlipImageDate = paySlipImageDate;
            this.PaySlipImageTime = paySlipImageTime;
            this.PaySlipImageAmount = paySlipImageAmount;
            this.PaySlipImageContact = paySlipImageContact;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets PackageId
        /// </summary>
        [DataMember(Name = "packageId", EmitDefaultValue = false)]
        public int PackageId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDate
        /// </summary>
        [DataMember(Name = "transactionDate", EmitDefaultValue = false)]
        public DateTime TransactionDate { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name = "transactionId", EmitDefaultValue = true)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name = "expirationDate", EmitDefaultValue = false)]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets CouponId
        /// </summary>
        [DataMember(Name = "couponId", EmitDefaultValue = true)]
        public int? CouponId { get; set; }

        /// <summary>
        /// Gets or Sets PaidBy
        /// </summary>
        [DataMember(Name = "paidBy", EmitDefaultValue = false)]
        public long PaidBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name = "days", EmitDefaultValue = false)]
        public int Days { get; set; }

        /// <summary>
        /// Gets or Sets PackageDays
        /// </summary>
        [DataMember(Name = "packageDays", EmitDefaultValue = false)]
        public int PackageDays { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = true)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets PaymentChannel
        /// </summary>
        [DataMember(Name = "paymentChannel", EmitDefaultValue = true)]
        public OneOfPaymentChannel PaymentChannel { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public decimal? Value { get; set; }

        /// <summary>
        /// Gets or Sets IsWithheld
        /// </summary>
        [DataMember(Name = "isWithheld", EmitDefaultValue = true)]
        public bool IsWithheld { get; set; }

        /// <summary>
        /// Gets or Sets Withheld
        /// </summary>
        [DataMember(Name = "withheld", EmitDefaultValue = true)]
        public decimal? Withheld { get; set; }

        /// <summary>
        /// Gets or Sets InternalFile
        /// </summary>
        [DataMember(Name = "internalFile", EmitDefaultValue = true)]
        public string InternalFile { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceId
        /// </summary>
        [DataMember(Name = "invoiceId", EmitDefaultValue = true)]
        public long? InvoiceId { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name = "remarks", EmitDefaultValue = true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets IsRequestInvoice
        /// </summary>
        [DataMember(Name = "isRequestInvoice", EmitDefaultValue = true)]
        public bool? IsRequestInvoice { get; set; }

        /// <summary>
        /// Gets or Sets AddOn
        /// </summary>
        [DataMember(Name = "addOn", EmitDefaultValue = true)]
        public string AddOn { get; set; }

        /// <summary>
        /// Gets or Sets PackageList
        /// </summary>
        [DataMember(Name = "packageList", EmitDefaultValue = true)]
        public OneOfPackageList PackageList { get; set; }

        /// <summary>
        /// Gets or Sets PaySlipImageDate
        /// </summary>
        [DataMember(Name = "paySlipImageDate", EmitDefaultValue = true)]
        public DateTime? PaySlipImageDate { get; set; }

        /// <summary>
        /// Gets or Sets PaySlipImageTime
        /// </summary>
        [DataMember(Name = "paySlipImageTime", EmitDefaultValue = true)]
        public string PaySlipImageTime { get; set; }

        /// <summary>
        /// Gets or Sets PaySlipImageAmount
        /// </summary>
        [DataMember(Name = "paySlipImageAmount", EmitDefaultValue = true)]
        public decimal? PaySlipImageAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaySlipImageContact
        /// </summary>
        [DataMember(Name = "paySlipImageContact", EmitDefaultValue = true)]
        public string PaySlipImageContact { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanySubscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  PackageStatus: ").Append(PackageStatus).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  CouponId: ").Append(CouponId).Append("\n");
            sb.Append("  PaidBy: ").Append(PaidBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  PackageDays: ").Append(PackageDays).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PaymentChannel: ").Append(PaymentChannel).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  IsWithheld: ").Append(IsWithheld).Append("\n");
            sb.Append("  Withheld: ").Append(Withheld).Append("\n");
            sb.Append("  InternalFile: ").Append(InternalFile).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  IsRequestInvoice: ").Append(IsRequestInvoice).Append("\n");
            sb.Append("  AddOn: ").Append(AddOn).Append("\n");
            sb.Append("  PackageList: ").Append(PackageList).Append("\n");
            sb.Append("  PaySlipImageDate: ").Append(PaySlipImageDate).Append("\n");
            sb.Append("  PaySlipImageTime: ").Append(PaySlipImageTime).Append("\n");
            sb.Append("  PaySlipImageAmount: ").Append(PaySlipImageAmount).Append("\n");
            sb.Append("  PaySlipImageContact: ").Append(PaySlipImageContact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanySubscription);
        }

        /// <summary>
        /// Returns true if CompanySubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanySubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanySubscription input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.PackageId == input.PackageId ||
                    this.PackageId.Equals(input.PackageId)
                ) && 
                (
                    this.PackageStatus == input.PackageStatus ||
                    this.PackageStatus.Equals(input.PackageStatus)
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.CouponId == input.CouponId ||
                    (this.CouponId != null &&
                    this.CouponId.Equals(input.CouponId))
                ) && 
                (
                    this.PaidBy == input.PaidBy ||
                    this.PaidBy.Equals(input.PaidBy)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.Days == input.Days ||
                    this.Days.Equals(input.Days)
                ) && 
                (
                    this.PackageDays == input.PackageDays ||
                    this.PackageDays.Equals(input.PackageDays)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.PaymentChannel == input.PaymentChannel ||
                    (this.PaymentChannel != null &&
                    this.PaymentChannel.Equals(input.PaymentChannel))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.IsWithheld == input.IsWithheld ||
                    this.IsWithheld.Equals(input.IsWithheld)
                ) && 
                (
                    this.Withheld == input.Withheld ||
                    (this.Withheld != null &&
                    this.Withheld.Equals(input.Withheld))
                ) && 
                (
                    this.InternalFile == input.InternalFile ||
                    (this.InternalFile != null &&
                    this.InternalFile.Equals(input.InternalFile))
                ) && 
                (
                    this.InvoiceId == input.InvoiceId ||
                    (this.InvoiceId != null &&
                    this.InvoiceId.Equals(input.InvoiceId))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.IsRequestInvoice == input.IsRequestInvoice ||
                    (this.IsRequestInvoice != null &&
                    this.IsRequestInvoice.Equals(input.IsRequestInvoice))
                ) && 
                (
                    this.AddOn == input.AddOn ||
                    (this.AddOn != null &&
                    this.AddOn.Equals(input.AddOn))
                ) && 
                (
                    this.PackageList == input.PackageList ||
                    (this.PackageList != null &&
                    this.PackageList.Equals(input.PackageList))
                ) && 
                (
                    this.PaySlipImageDate == input.PaySlipImageDate ||
                    (this.PaySlipImageDate != null &&
                    this.PaySlipImageDate.Equals(input.PaySlipImageDate))
                ) && 
                (
                    this.PaySlipImageTime == input.PaySlipImageTime ||
                    (this.PaySlipImageTime != null &&
                    this.PaySlipImageTime.Equals(input.PaySlipImageTime))
                ) && 
                (
                    this.PaySlipImageAmount == input.PaySlipImageAmount ||
                    (this.PaySlipImageAmount != null &&
                    this.PaySlipImageAmount.Equals(input.PaySlipImageAmount))
                ) && 
                (
                    this.PaySlipImageContact == input.PaySlipImageContact ||
                    (this.PaySlipImageContact != null &&
                    this.PaySlipImageContact.Equals(input.PaySlipImageContact))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.PackageId.GetHashCode();
                hashCode = (hashCode * 59) + this.PackageStatus.GetHashCode();
                if (this.TransactionDate != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionDate.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.ExpirationDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpirationDate.GetHashCode();
                }
                if (this.CouponId != null)
                {
                    hashCode = (hashCode * 59) + this.CouponId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaidBy.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Days.GetHashCode();
                hashCode = (hashCode * 59) + this.PackageDays.GetHashCode();
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.PaymentChannel != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentChannel.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsWithheld.GetHashCode();
                if (this.Withheld != null)
                {
                    hashCode = (hashCode * 59) + this.Withheld.GetHashCode();
                }
                if (this.InternalFile != null)
                {
                    hashCode = (hashCode * 59) + this.InternalFile.GetHashCode();
                }
                if (this.InvoiceId != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceId.GetHashCode();
                }
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                if (this.IsRequestInvoice != null)
                {
                    hashCode = (hashCode * 59) + this.IsRequestInvoice.GetHashCode();
                }
                if (this.AddOn != null)
                {
                    hashCode = (hashCode * 59) + this.AddOn.GetHashCode();
                }
                if (this.PackageList != null)
                {
                    hashCode = (hashCode * 59) + this.PackageList.GetHashCode();
                }
                if (this.PaySlipImageDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaySlipImageDate.GetHashCode();
                }
                if (this.PaySlipImageTime != null)
                {
                    hashCode = (hashCode * 59) + this.PaySlipImageTime.GetHashCode();
                }
                if (this.PaySlipImageAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PaySlipImageAmount.GetHashCode();
                }
                if (this.PaySlipImageContact != null)
                {
                    hashCode = (hashCode * 59) + this.PaySlipImageContact.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Payroll
    /// </summary>
    [DataContract(Name = "Payroll")]
    public partial class Payroll : IEquatable<Payroll>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public PayrollStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets RuleCompileStatus
        /// </summary>
        [DataMember(Name = "ruleCompileStatus", EmitDefaultValue = false)]
        public RuleCompileStatus? RuleCompileStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Payroll" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyId">companyId.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="paymentCycle">paymentCycle.</param>
        /// <param name="status">status.</param>
        /// <param name="isDelete">isDelete.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="modifiedOn">modifiedOn.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="modifiedBy">modifiedBy.</param>
        /// <param name="expenseId">expenseId.</param>
        /// <param name="galleryId">galleryId.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="total">total.</param>
        /// <param name="bankId">bankId.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="addAmount">addAmount.</param>
        /// <param name="deductAmount">deductAmount.</param>
        /// <param name="netTotal">netTotal.</param>
        /// <param name="runningNumberType">runningNumberType.</param>
        /// <param name="datePayment">datePayment.</param>
        /// <param name="documentDate">documentDate.</param>
        /// <param name="totalPayrollCash">totalPayrollCash.</param>
        /// <param name="totalPayrollTransfer">totalPayrollTransfer.</param>
        /// <param name="fee">fee.</param>
        /// <param name="paymentRemarks">paymentRemarks.</param>
        /// <param name="employerAccountNumber">employerAccountNumber.</param>
        /// <param name="employerAccountBranch">employerAccountBranch.</param>
        /// <param name="bankAccountId">bankAccountId.</param>
        /// <param name="accountType">accountType.</param>
        /// <param name="referenceId">referenceId.</param>
        /// <param name="payrollVersion">payrollVersion.</param>
        /// <param name="company">company.</param>
        /// <param name="createdByUser">createdByUser.</param>
        /// <param name="modifiedByUser">modifiedByUser.</param>
        /// <param name="payrollDetail">payrollDetail.</param>
        /// <param name="gallery">gallery.</param>
        /// <param name="isMigrate">isMigrate.</param>
        /// <param name="ruleCompileStatus">ruleCompileStatus.</param>
        /// <param name="isPartialPayments">isPartialPayments.</param>
        /// <param name="paidPeriod">paidPeriod.</param>
        /// <param name="socialSecurityPercent">socialSecurityPercent (default to 5M).</param>
        /// <param name="statusInt">statusInt.</param>
        public Payroll(long id = default(long), long companyId = default(long), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), int paymentCycle = default(int), PayrollStatus? status = default(PayrollStatus?), bool isDelete = default(bool), DateTime? createdOn = default(DateTime?), DateTime? modifiedOn = default(DateTime?), long? createdBy = default(long?), long? modifiedBy = default(long?), long? expenseId = default(long?), long? galleryId = default(long?), string remarks = default(string), decimal total = default(decimal), int? bankId = default(int?), string accountNumber = default(string), decimal addAmount = default(decimal), decimal deductAmount = default(decimal), decimal netTotal = default(decimal), int runningNumberType = default(int), DateTime? datePayment = default(DateTime?), DateTime documentDate = default(DateTime), decimal totalPayrollCash = default(decimal), decimal totalPayrollTransfer = default(decimal), decimal fee = default(decimal), string paymentRemarks = default(string), string employerAccountNumber = default(string), string employerAccountBranch = default(string), long? bankAccountId = default(long?), OneOfBankAccountType accountType = default(OneOfBankAccountType), string referenceId = default(string), int payrollVersion = default(int), OneOfCompany company = default(OneOfCompany), OneOfUser createdByUser = default(OneOfUser), OneOfUser modifiedByUser = default(OneOfUser), List<PayrollDetail> payrollDetail = default(List<PayrollDetail>), OneOfGallery gallery = default(OneOfGallery), bool isMigrate = default(bool), RuleCompileStatus? ruleCompileStatus = default(RuleCompileStatus?), bool isPartialPayments = default(bool), OneOfPaidPeriod paidPeriod = default(OneOfPaidPeriod), decimal socialSecurityPercent = 5M, int statusInt = default(int))
        {
            this.Id = id;
            this.CompanyId = companyId;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.PaymentCycle = paymentCycle;
            this.Status = status;
            this.IsDelete = isDelete;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.CreatedBy = createdBy;
            this.ModifiedBy = modifiedBy;
            this.ExpenseId = expenseId;
            this.GalleryId = galleryId;
            this.Remarks = remarks;
            this.Total = total;
            this.BankId = bankId;
            this.AccountNumber = accountNumber;
            this.AddAmount = addAmount;
            this.DeductAmount = deductAmount;
            this.NetTotal = netTotal;
            this.RunningNumberType = runningNumberType;
            this.DatePayment = datePayment;
            this.DocumentDate = documentDate;
            this.TotalPayrollCash = totalPayrollCash;
            this.TotalPayrollTransfer = totalPayrollTransfer;
            this.Fee = fee;
            this.PaymentRemarks = paymentRemarks;
            this.EmployerAccountNumber = employerAccountNumber;
            this.EmployerAccountBranch = employerAccountBranch;
            this.BankAccountId = bankAccountId;
            this.AccountType = accountType;
            this.ReferenceId = referenceId;
            this.PayrollVersion = payrollVersion;
            this.Company = company;
            this.CreatedByUser = createdByUser;
            this.ModifiedByUser = modifiedByUser;
            this.PayrollDetail = payrollDetail;
            this.Gallery = gallery;
            this.IsMigrate = isMigrate;
            this.RuleCompileStatus = ruleCompileStatus;
            this.IsPartialPayments = isPartialPayments;
            this.PaidPeriod = paidPeriod;
            this.SocialSecurityPercent = socialSecurityPercent;
            this.StatusInt = statusInt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentCycle
        /// </summary>
        [DataMember(Name = "paymentCycle", EmitDefaultValue = false)]
        public int PaymentCycle { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = true)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", EmitDefaultValue = true)]
        public DateTime? ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = true)]
        public long? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name = "modifiedBy", EmitDefaultValue = true)]
        public long? ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseId
        /// </summary>
        [DataMember(Name = "expenseId", EmitDefaultValue = true)]
        public long? ExpenseId { get; set; }

        /// <summary>
        /// Gets or Sets GalleryId
        /// </summary>
        [DataMember(Name = "galleryId", EmitDefaultValue = true)]
        public long? GalleryId { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name = "remarks", EmitDefaultValue = true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public decimal Total { get; set; }

        /// <summary>
        /// Gets or Sets BankId
        /// </summary>
        [DataMember(Name = "bankId", EmitDefaultValue = true)]
        public int? BankId { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name = "accountNumber", EmitDefaultValue = true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets AddAmount
        /// </summary>
        [DataMember(Name = "addAmount", EmitDefaultValue = false)]
        public decimal AddAmount { get; set; }

        /// <summary>
        /// Gets or Sets DeductAmount
        /// </summary>
        [DataMember(Name = "deductAmount", EmitDefaultValue = false)]
        public decimal DeductAmount { get; set; }

        /// <summary>
        /// Gets or Sets NetTotal
        /// </summary>
        [DataMember(Name = "netTotal", EmitDefaultValue = false)]
        public decimal NetTotal { get; set; }

        /// <summary>
        /// Gets or Sets RunningNumberType
        /// </summary>
        [DataMember(Name = "runningNumberType", EmitDefaultValue = false)]
        public int RunningNumberType { get; set; }

        /// <summary>
        /// Gets or Sets DatePayment
        /// </summary>
        [DataMember(Name = "datePayment", EmitDefaultValue = true)]
        public DateTime? DatePayment { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDate
        /// </summary>
        [DataMember(Name = "documentDate", EmitDefaultValue = false)]
        public DateTime DocumentDate { get; set; }

        /// <summary>
        /// Gets or Sets TotalPayrollCash
        /// </summary>
        [DataMember(Name = "totalPayrollCash", EmitDefaultValue = false)]
        public decimal TotalPayrollCash { get; set; }

        /// <summary>
        /// Gets or Sets TotalPayrollTransfer
        /// </summary>
        [DataMember(Name = "totalPayrollTransfer", EmitDefaultValue = false)]
        public decimal TotalPayrollTransfer { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        public decimal Fee { get; set; }

        /// <summary>
        /// Gets or Sets PaymentRemarks
        /// </summary>
        [DataMember(Name = "paymentRemarks", EmitDefaultValue = true)]
        public string PaymentRemarks { get; set; }

        /// <summary>
        /// Gets or Sets EmployerAccountNumber
        /// </summary>
        [DataMember(Name = "employerAccountNumber", EmitDefaultValue = true)]
        public string EmployerAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets EmployerAccountBranch
        /// </summary>
        [DataMember(Name = "employerAccountBranch", EmitDefaultValue = true)]
        public string EmployerAccountBranch { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountId
        /// </summary>
        [DataMember(Name = "bankAccountId", EmitDefaultValue = true)]
        public long? BankAccountId { get; set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name = "accountType", EmitDefaultValue = true)]
        public OneOfBankAccountType AccountType { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceId
        /// </summary>
        [DataMember(Name = "referenceId", EmitDefaultValue = true)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets PayrollVersion
        /// </summary>
        [DataMember(Name = "payrollVersion", EmitDefaultValue = false)]
        public int PayrollVersion { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public OneOfCompany Company { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUser
        /// </summary>
        [DataMember(Name = "createdByUser", EmitDefaultValue = true)]
        public OneOfUser CreatedByUser { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedByUser
        /// </summary>
        [DataMember(Name = "modifiedByUser", EmitDefaultValue = true)]
        public OneOfUser ModifiedByUser { get; set; }

        /// <summary>
        /// Gets or Sets PayrollDetail
        /// </summary>
        [DataMember(Name = "payrollDetail", EmitDefaultValue = true)]
        public List<PayrollDetail> PayrollDetail { get; set; }

        /// <summary>
        /// Gets or Sets Gallery
        /// </summary>
        [DataMember(Name = "gallery", EmitDefaultValue = true)]
        public OneOfGallery Gallery { get; set; }

        /// <summary>
        /// Gets or Sets IsMigrate
        /// </summary>
        [DataMember(Name = "isMigrate", EmitDefaultValue = true)]
        public bool IsMigrate { get; set; }

        /// <summary>
        /// Gets or Sets IsPartialPayments
        /// </summary>
        [DataMember(Name = "isPartialPayments", EmitDefaultValue = true)]
        public bool IsPartialPayments { get; set; }

        /// <summary>
        /// Gets or Sets PaidPeriod
        /// </summary>
        [DataMember(Name = "paidPeriod", EmitDefaultValue = true)]
        public OneOfPaidPeriod PaidPeriod { get; set; }

        /// <summary>
        /// Gets or Sets SocialSecurityPercent
        /// </summary>
        [DataMember(Name = "socialSecurityPercent", EmitDefaultValue = false)]
        public decimal SocialSecurityPercent { get; set; }

        /// <summary>
        /// Gets or Sets StatusInt
        /// </summary>
        [DataMember(Name = "statusInt", EmitDefaultValue = false)]
        public int StatusInt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Payroll {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  PaymentCycle: ").Append(PaymentCycle).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ExpenseId: ").Append(ExpenseId).Append("\n");
            sb.Append("  GalleryId: ").Append(GalleryId).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  BankId: ").Append(BankId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AddAmount: ").Append(AddAmount).Append("\n");
            sb.Append("  DeductAmount: ").Append(DeductAmount).Append("\n");
            sb.Append("  NetTotal: ").Append(NetTotal).Append("\n");
            sb.Append("  RunningNumberType: ").Append(RunningNumberType).Append("\n");
            sb.Append("  DatePayment: ").Append(DatePayment).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  TotalPayrollCash: ").Append(TotalPayrollCash).Append("\n");
            sb.Append("  TotalPayrollTransfer: ").Append(TotalPayrollTransfer).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  PaymentRemarks: ").Append(PaymentRemarks).Append("\n");
            sb.Append("  EmployerAccountNumber: ").Append(EmployerAccountNumber).Append("\n");
            sb.Append("  EmployerAccountBranch: ").Append(EmployerAccountBranch).Append("\n");
            sb.Append("  BankAccountId: ").Append(BankAccountId).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  PayrollVersion: ").Append(PayrollVersion).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  ModifiedByUser: ").Append(ModifiedByUser).Append("\n");
            sb.Append("  PayrollDetail: ").Append(PayrollDetail).Append("\n");
            sb.Append("  Gallery: ").Append(Gallery).Append("\n");
            sb.Append("  IsMigrate: ").Append(IsMigrate).Append("\n");
            sb.Append("  RuleCompileStatus: ").Append(RuleCompileStatus).Append("\n");
            sb.Append("  IsPartialPayments: ").Append(IsPartialPayments).Append("\n");
            sb.Append("  PaidPeriod: ").Append(PaidPeriod).Append("\n");
            sb.Append("  SocialSecurityPercent: ").Append(SocialSecurityPercent).Append("\n");
            sb.Append("  StatusInt: ").Append(StatusInt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Payroll);
        }

        /// <summary>
        /// Returns true if Payroll instances are equal
        /// </summary>
        /// <param name="input">Instance of Payroll to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payroll input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.PaymentCycle == input.PaymentCycle ||
                    this.PaymentCycle.Equals(input.PaymentCycle)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    (this.ModifiedBy != null &&
                    this.ModifiedBy.Equals(input.ModifiedBy))
                ) && 
                (
                    this.ExpenseId == input.ExpenseId ||
                    (this.ExpenseId != null &&
                    this.ExpenseId.Equals(input.ExpenseId))
                ) && 
                (
                    this.GalleryId == input.GalleryId ||
                    (this.GalleryId != null &&
                    this.GalleryId.Equals(input.GalleryId))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.BankId == input.BankId ||
                    (this.BankId != null &&
                    this.BankId.Equals(input.BankId))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AddAmount == input.AddAmount ||
                    this.AddAmount.Equals(input.AddAmount)
                ) && 
                (
                    this.DeductAmount == input.DeductAmount ||
                    this.DeductAmount.Equals(input.DeductAmount)
                ) && 
                (
                    this.NetTotal == input.NetTotal ||
                    this.NetTotal.Equals(input.NetTotal)
                ) && 
                (
                    this.RunningNumberType == input.RunningNumberType ||
                    this.RunningNumberType.Equals(input.RunningNumberType)
                ) && 
                (
                    this.DatePayment == input.DatePayment ||
                    (this.DatePayment != null &&
                    this.DatePayment.Equals(input.DatePayment))
                ) && 
                (
                    this.DocumentDate == input.DocumentDate ||
                    (this.DocumentDate != null &&
                    this.DocumentDate.Equals(input.DocumentDate))
                ) && 
                (
                    this.TotalPayrollCash == input.TotalPayrollCash ||
                    this.TotalPayrollCash.Equals(input.TotalPayrollCash)
                ) && 
                (
                    this.TotalPayrollTransfer == input.TotalPayrollTransfer ||
                    this.TotalPayrollTransfer.Equals(input.TotalPayrollTransfer)
                ) && 
                (
                    this.Fee == input.Fee ||
                    this.Fee.Equals(input.Fee)
                ) && 
                (
                    this.PaymentRemarks == input.PaymentRemarks ||
                    (this.PaymentRemarks != null &&
                    this.PaymentRemarks.Equals(input.PaymentRemarks))
                ) && 
                (
                    this.EmployerAccountNumber == input.EmployerAccountNumber ||
                    (this.EmployerAccountNumber != null &&
                    this.EmployerAccountNumber.Equals(input.EmployerAccountNumber))
                ) && 
                (
                    this.EmployerAccountBranch == input.EmployerAccountBranch ||
                    (this.EmployerAccountBranch != null &&
                    this.EmployerAccountBranch.Equals(input.EmployerAccountBranch))
                ) && 
                (
                    this.BankAccountId == input.BankAccountId ||
                    (this.BankAccountId != null &&
                    this.BankAccountId.Equals(input.BankAccountId))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) && 
                (
                    this.PayrollVersion == input.PayrollVersion ||
                    this.PayrollVersion.Equals(input.PayrollVersion)
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.ModifiedByUser == input.ModifiedByUser ||
                    (this.ModifiedByUser != null &&
                    this.ModifiedByUser.Equals(input.ModifiedByUser))
                ) && 
                (
                    this.PayrollDetail == input.PayrollDetail ||
                    this.PayrollDetail != null &&
                    input.PayrollDetail != null &&
                    this.PayrollDetail.SequenceEqual(input.PayrollDetail)
                ) && 
                (
                    this.Gallery == input.Gallery ||
                    (this.Gallery != null &&
                    this.Gallery.Equals(input.Gallery))
                ) && 
                (
                    this.IsMigrate == input.IsMigrate ||
                    this.IsMigrate.Equals(input.IsMigrate)
                ) && 
                (
                    this.RuleCompileStatus == input.RuleCompileStatus ||
                    this.RuleCompileStatus.Equals(input.RuleCompileStatus)
                ) && 
                (
                    this.IsPartialPayments == input.IsPartialPayments ||
                    this.IsPartialPayments.Equals(input.IsPartialPayments)
                ) && 
                (
                    this.PaidPeriod == input.PaidPeriod ||
                    (this.PaidPeriod != null &&
                    this.PaidPeriod.Equals(input.PaidPeriod))
                ) && 
                (
                    this.SocialSecurityPercent == input.SocialSecurityPercent ||
                    this.SocialSecurityPercent.Equals(input.SocialSecurityPercent)
                ) && 
                (
                    this.StatusInt == input.StatusInt ||
                    this.StatusInt.Equals(input.StatusInt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentCycle.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.ModifiedBy != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedBy.GetHashCode();
                }
                if (this.ExpenseId != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseId.GetHashCode();
                }
                if (this.GalleryId != null)
                {
                    hashCode = (hashCode * 59) + this.GalleryId.GetHashCode();
                }
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                if (this.BankId != null)
                {
                    hashCode = (hashCode * 59) + this.BankId.GetHashCode();
                }
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.DeductAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.NetTotal.GetHashCode();
                hashCode = (hashCode * 59) + this.RunningNumberType.GetHashCode();
                if (this.DatePayment != null)
                {
                    hashCode = (hashCode * 59) + this.DatePayment.GetHashCode();
                }
                if (this.DocumentDate != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalPayrollCash.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPayrollTransfer.GetHashCode();
                hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                if (this.PaymentRemarks != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentRemarks.GetHashCode();
                }
                if (this.EmployerAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.EmployerAccountNumber.GetHashCode();
                }
                if (this.EmployerAccountBranch != null)
                {
                    hashCode = (hashCode * 59) + this.EmployerAccountBranch.GetHashCode();
                }
                if (this.BankAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountId.GetHashCode();
                }
                if (this.AccountType != null)
                {
                    hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                }
                if (this.ReferenceId != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PayrollVersion.GetHashCode();
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.CreatedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedByUser.GetHashCode();
                }
                if (this.ModifiedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedByUser.GetHashCode();
                }
                if (this.PayrollDetail != null)
                {
                    hashCode = (hashCode * 59) + this.PayrollDetail.GetHashCode();
                }
                if (this.Gallery != null)
                {
                    hashCode = (hashCode * 59) + this.Gallery.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMigrate.GetHashCode();
                hashCode = (hashCode * 59) + this.RuleCompileStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPartialPayments.GetHashCode();
                if (this.PaidPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.PaidPeriod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SocialSecurityPercent.GetHashCode();
                hashCode = (hashCode * 59) + this.StatusInt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

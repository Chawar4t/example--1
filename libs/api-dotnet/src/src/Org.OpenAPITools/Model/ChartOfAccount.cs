/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ChartOfAccount
    /// </summary>
    [DataContract(Name = "ChartOfAccount")]
    public partial class ChartOfAccount : IEquatable<ChartOfAccount>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public ChartOfAccountCategory? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartOfAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChartOfAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartOfAccount" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyId">companyId.</param>
        /// <param name="code">code.</param>
        /// <param name="nameLocal">nameLocal.</param>
        /// <param name="nameForeign">nameForeign.</param>
        /// <param name="descriptionLocal">descriptionLocal.</param>
        /// <param name="descriptionForeign">descriptionForeign.</param>
        /// <param name="category">category.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="isFolder">isFolder.</param>
        /// <param name="isBank">isBank.</param>
        /// <param name="isReceivable">isReceivable.</param>
        /// <param name="isDelete">isDelete (default to false).</param>
        /// <param name="isLock">isLock (default to false).</param>
        /// <param name="createdon">createdon (required).</param>
        /// <param name="modifiedon">modifiedon (required).</param>
        /// <param name="modifiedby">modifiedby.</param>
        /// <param name="value">value.</param>
        /// <param name="left">left.</param>
        /// <param name="right">right.</param>
        /// <param name="isDefault">isDefault.</param>
        /// <param name="bankAccount">bankAccount.</param>
        /// <param name="pettyCash">pettyCash.</param>
        /// <param name="cheque">cheque.</param>
        /// <param name="creditCard">creditCard.</param>
        /// <param name="otherChannels">otherChannels.</param>
        /// <param name="systemChartOfAccount">systemChartOfAccount.</param>
        public ChartOfAccount(long id = default(long), long companyId = default(long), string code = default(string), string nameLocal = default(string), string nameForeign = default(string), string descriptionLocal = default(string), string descriptionForeign = default(string), ChartOfAccountCategory? category = default(ChartOfAccountCategory?), long? parentId = default(long?), bool isFolder = default(bool), bool isBank = default(bool), bool isReceivable = default(bool), bool isDelete = false, bool isLock = false, DateTime createdon = default(DateTime), DateTime modifiedon = default(DateTime), long modifiedby = default(long), decimal value = default(decimal), int left = default(int), int right = default(int), bool isDefault = default(bool), OneOfBankAccount bankAccount = default(OneOfBankAccount), OneOfPettyCash pettyCash = default(OneOfPettyCash), OneOfCheque cheque = default(OneOfCheque), OneOfCreditCard creditCard = default(OneOfCreditCard), OneOfOtherChannels otherChannels = default(OneOfOtherChannels), OneOfSystemChartOfAccount systemChartOfAccount = default(OneOfSystemChartOfAccount))
        {
            this.Createdon = createdon;
            this.Modifiedon = modifiedon;
            this.Id = id;
            this.CompanyId = companyId;
            this.Code = code;
            this.NameLocal = nameLocal;
            this.NameForeign = nameForeign;
            this.DescriptionLocal = descriptionLocal;
            this.DescriptionForeign = descriptionForeign;
            this.Category = category;
            this.ParentId = parentId;
            this.IsFolder = isFolder;
            this.IsBank = isBank;
            this.IsReceivable = isReceivable;
            this.IsDelete = isDelete;
            this.IsLock = isLock;
            this.Modifiedby = modifiedby;
            this.Value = value;
            this.Left = left;
            this.Right = right;
            this.IsDefault = isDefault;
            this.BankAccount = bankAccount;
            this.PettyCash = pettyCash;
            this.Cheque = cheque;
            this.CreditCard = creditCard;
            this.OtherChannels = otherChannels;
            this.SystemChartOfAccount = systemChartOfAccount;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets NameLocal
        /// </summary>
        [DataMember(Name = "nameLocal", EmitDefaultValue = true)]
        public string NameLocal { get; set; }

        /// <summary>
        /// Gets or Sets NameForeign
        /// </summary>
        [DataMember(Name = "nameForeign", EmitDefaultValue = true)]
        public string NameForeign { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionLocal
        /// </summary>
        [DataMember(Name = "descriptionLocal", EmitDefaultValue = true)]
        public string DescriptionLocal { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionForeign
        /// </summary>
        [DataMember(Name = "descriptionForeign", EmitDefaultValue = true)]
        public string DescriptionForeign { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name = "parentId", EmitDefaultValue = true)]
        public long? ParentId { get; set; }

        /// <summary>
        /// Gets or Sets IsFolder
        /// </summary>
        [DataMember(Name = "isFolder", EmitDefaultValue = true)]
        public bool IsFolder { get; set; }

        /// <summary>
        /// Gets or Sets IsBank
        /// </summary>
        [DataMember(Name = "isBank", EmitDefaultValue = true)]
        public bool IsBank { get; set; }

        /// <summary>
        /// Gets or Sets IsReceivable
        /// </summary>
        [DataMember(Name = "isReceivable", EmitDefaultValue = true)]
        public bool IsReceivable { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets IsLock
        /// </summary>
        [DataMember(Name = "isLock", EmitDefaultValue = true)]
        public bool IsLock { get; set; }

        /// <summary>
        /// Gets or Sets Createdon
        /// </summary>
        [DataMember(Name = "createdon", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Createdon { get; set; }

        /// <summary>
        /// Gets or Sets Modifiedon
        /// </summary>
        [DataMember(Name = "modifiedon", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Modifiedon { get; set; }

        /// <summary>
        /// Gets or Sets Modifiedby
        /// </summary>
        [DataMember(Name = "modifiedby", EmitDefaultValue = false)]
        public long Modifiedby { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets or Sets Left
        /// </summary>
        [DataMember(Name = "left", EmitDefaultValue = false)]
        public int Left { get; set; }

        /// <summary>
        /// Gets or Sets Right
        /// </summary>
        [DataMember(Name = "right", EmitDefaultValue = false)]
        public int Right { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets BankAccount
        /// </summary>
        [DataMember(Name = "bankAccount", EmitDefaultValue = true)]
        public OneOfBankAccount BankAccount { get; set; }

        /// <summary>
        /// Gets or Sets PettyCash
        /// </summary>
        [DataMember(Name = "pettyCash", EmitDefaultValue = true)]
        public OneOfPettyCash PettyCash { get; set; }

        /// <summary>
        /// Gets or Sets Cheque
        /// </summary>
        [DataMember(Name = "cheque", EmitDefaultValue = true)]
        public OneOfCheque Cheque { get; set; }

        /// <summary>
        /// Gets or Sets CreditCard
        /// </summary>
        [DataMember(Name = "creditCard", EmitDefaultValue = true)]
        public OneOfCreditCard CreditCard { get; set; }

        /// <summary>
        /// Gets or Sets OtherChannels
        /// </summary>
        [DataMember(Name = "otherChannels", EmitDefaultValue = true)]
        public OneOfOtherChannels OtherChannels { get; set; }

        /// <summary>
        /// Gets or Sets SystemChartOfAccount
        /// </summary>
        [DataMember(Name = "systemChartOfAccount", EmitDefaultValue = true)]
        public OneOfSystemChartOfAccount SystemChartOfAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChartOfAccount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  NameLocal: ").Append(NameLocal).Append("\n");
            sb.Append("  NameForeign: ").Append(NameForeign).Append("\n");
            sb.Append("  DescriptionLocal: ").Append(DescriptionLocal).Append("\n");
            sb.Append("  DescriptionForeign: ").Append(DescriptionForeign).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  IsFolder: ").Append(IsFolder).Append("\n");
            sb.Append("  IsBank: ").Append(IsBank).Append("\n");
            sb.Append("  IsReceivable: ").Append(IsReceivable).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  IsLock: ").Append(IsLock).Append("\n");
            sb.Append("  Createdon: ").Append(Createdon).Append("\n");
            sb.Append("  Modifiedon: ").Append(Modifiedon).Append("\n");
            sb.Append("  Modifiedby: ").Append(Modifiedby).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  BankAccount: ").Append(BankAccount).Append("\n");
            sb.Append("  PettyCash: ").Append(PettyCash).Append("\n");
            sb.Append("  Cheque: ").Append(Cheque).Append("\n");
            sb.Append("  CreditCard: ").Append(CreditCard).Append("\n");
            sb.Append("  OtherChannels: ").Append(OtherChannels).Append("\n");
            sb.Append("  SystemChartOfAccount: ").Append(SystemChartOfAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChartOfAccount);
        }

        /// <summary>
        /// Returns true if ChartOfAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of ChartOfAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChartOfAccount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.NameLocal == input.NameLocal ||
                    (this.NameLocal != null &&
                    this.NameLocal.Equals(input.NameLocal))
                ) && 
                (
                    this.NameForeign == input.NameForeign ||
                    (this.NameForeign != null &&
                    this.NameForeign.Equals(input.NameForeign))
                ) && 
                (
                    this.DescriptionLocal == input.DescriptionLocal ||
                    (this.DescriptionLocal != null &&
                    this.DescriptionLocal.Equals(input.DescriptionLocal))
                ) && 
                (
                    this.DescriptionForeign == input.DescriptionForeign ||
                    (this.DescriptionForeign != null &&
                    this.DescriptionForeign.Equals(input.DescriptionForeign))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.IsFolder == input.IsFolder ||
                    this.IsFolder.Equals(input.IsFolder)
                ) && 
                (
                    this.IsBank == input.IsBank ||
                    this.IsBank.Equals(input.IsBank)
                ) && 
                (
                    this.IsReceivable == input.IsReceivable ||
                    this.IsReceivable.Equals(input.IsReceivable)
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.IsLock == input.IsLock ||
                    this.IsLock.Equals(input.IsLock)
                ) && 
                (
                    this.Createdon == input.Createdon ||
                    (this.Createdon != null &&
                    this.Createdon.Equals(input.Createdon))
                ) && 
                (
                    this.Modifiedon == input.Modifiedon ||
                    (this.Modifiedon != null &&
                    this.Modifiedon.Equals(input.Modifiedon))
                ) && 
                (
                    this.Modifiedby == input.Modifiedby ||
                    this.Modifiedby.Equals(input.Modifiedby)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Left == input.Left ||
                    this.Left.Equals(input.Left)
                ) && 
                (
                    this.Right == input.Right ||
                    this.Right.Equals(input.Right)
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    this.IsDefault.Equals(input.IsDefault)
                ) && 
                (
                    this.BankAccount == input.BankAccount ||
                    (this.BankAccount != null &&
                    this.BankAccount.Equals(input.BankAccount))
                ) && 
                (
                    this.PettyCash == input.PettyCash ||
                    (this.PettyCash != null &&
                    this.PettyCash.Equals(input.PettyCash))
                ) && 
                (
                    this.Cheque == input.Cheque ||
                    (this.Cheque != null &&
                    this.Cheque.Equals(input.Cheque))
                ) && 
                (
                    this.CreditCard == input.CreditCard ||
                    (this.CreditCard != null &&
                    this.CreditCard.Equals(input.CreditCard))
                ) && 
                (
                    this.OtherChannels == input.OtherChannels ||
                    (this.OtherChannels != null &&
                    this.OtherChannels.Equals(input.OtherChannels))
                ) && 
                (
                    this.SystemChartOfAccount == input.SystemChartOfAccount ||
                    (this.SystemChartOfAccount != null &&
                    this.SystemChartOfAccount.Equals(input.SystemChartOfAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.NameLocal != null)
                {
                    hashCode = (hashCode * 59) + this.NameLocal.GetHashCode();
                }
                if (this.NameForeign != null)
                {
                    hashCode = (hashCode * 59) + this.NameForeign.GetHashCode();
                }
                if (this.DescriptionLocal != null)
                {
                    hashCode = (hashCode * 59) + this.DescriptionLocal.GetHashCode();
                }
                if (this.DescriptionForeign != null)
                {
                    hashCode = (hashCode * 59) + this.DescriptionForeign.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsFolder.GetHashCode();
                hashCode = (hashCode * 59) + this.IsBank.GetHashCode();
                hashCode = (hashCode * 59) + this.IsReceivable.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                hashCode = (hashCode * 59) + this.IsLock.GetHashCode();
                if (this.Createdon != null)
                {
                    hashCode = (hashCode * 59) + this.Createdon.GetHashCode();
                }
                if (this.Modifiedon != null)
                {
                    hashCode = (hashCode * 59) + this.Modifiedon.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Modifiedby.GetHashCode();
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                hashCode = (hashCode * 59) + this.Left.GetHashCode();
                hashCode = (hashCode * 59) + this.Right.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDefault.GetHashCode();
                if (this.BankAccount != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccount.GetHashCode();
                }
                if (this.PettyCash != null)
                {
                    hashCode = (hashCode * 59) + this.PettyCash.GetHashCode();
                }
                if (this.Cheque != null)
                {
                    hashCode = (hashCode * 59) + this.Cheque.GetHashCode();
                }
                if (this.CreditCard != null)
                {
                    hashCode = (hashCode * 59) + this.CreditCard.GetHashCode();
                }
                if (this.OtherChannels != null)
                {
                    hashCode = (hashCode * 59) + this.OtherChannels.GetHashCode();
                }
                if (this.SystemChartOfAccount != null)
                {
                    hashCode = (hashCode * 59) + this.SystemChartOfAccount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 50.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 0.", new [] { "Code" });
            }

            // Createdon (DateTime) minLength
            if (this.Createdon != null && this.Createdon.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Createdon, length must be greater than 1.", new [] { "Createdon" });
            }

            // Modifiedon (DateTime) minLength
            if (this.Modifiedon != null && this.Modifiedon.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Modifiedon, length must be greater than 1.", new [] { "Modifiedon" });
            }

            yield break;
        }
    }

}

/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IBookOfAccount
    /// </summary>
    [DataContract(Name = "IBookOfAccount")]
    public partial class IBookOfAccount : IEquatable<IBookOfAccount>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DebitCredit
        /// </summary>
        [DataMember(Name = "debitCredit", EmitDefaultValue = false)]
        public FinancialTransactionType? DebitCredit { get; set; }

        /// <summary>
        /// Gets or Sets BookOfAccountStatus
        /// </summary>
        [DataMember(Name = "bookOfAccountStatus", EmitDefaultValue = false)]
        public BookOfAccountStatus? BookOfAccountStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IBookOfAccount" /> class.
        /// </summary>
        /// <param name="journalEntryId">journalEntryId.</param>
        /// <param name="companyId">companyId.</param>
        /// <param name="debitCredit">debitCredit.</param>
        /// <param name="bookOfAccountStatus">bookOfAccountStatus.</param>
        /// <param name="chartOfAccountId">chartOfAccountId.</param>
        /// <param name="postedDate">postedDate.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="modifiedOn">modifiedOn.</param>
        /// <param name="approvedOn">approvedOn.</param>
        /// <param name="value">value.</param>
        /// <param name="balance">balance.</param>
        /// <param name="excludeVoidBalance">excludeVoidBalance.</param>
        /// <param name="rowNumber">rowNumber.</param>
        /// <param name="description">description.</param>
        /// <param name="descriptionForeign">descriptionForeign.</param>
        /// <param name="chartOfAccountName">chartOfAccountName.</param>
        /// <param name="journalEntry">journalEntry.</param>
        /// <param name="chartOfAccount">chartOfAccount.</param>
        public IBookOfAccount(long journalEntryId = default(long), long companyId = default(long), FinancialTransactionType? debitCredit = default(FinancialTransactionType?), BookOfAccountStatus? bookOfAccountStatus = default(BookOfAccountStatus?), long chartOfAccountId = default(long), DateTime? postedDate = default(DateTime?), DateTime createdOn = default(DateTime), DateTime modifiedOn = default(DateTime), DateTime? approvedOn = default(DateTime?), decimal value = default(decimal), decimal balance = default(decimal), decimal excludeVoidBalance = default(decimal), int rowNumber = default(int), string description = default(string), string descriptionForeign = default(string), string chartOfAccountName = default(string), OneOfIJournalEntryBase journalEntry = default(OneOfIJournalEntryBase), OneOfIChartOfAccount chartOfAccount = default(OneOfIChartOfAccount))
        {
            this.JournalEntryId = journalEntryId;
            this.CompanyId = companyId;
            this.DebitCredit = debitCredit;
            this.BookOfAccountStatus = bookOfAccountStatus;
            this.ChartOfAccountId = chartOfAccountId;
            this.PostedDate = postedDate;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.ApprovedOn = approvedOn;
            this.Value = value;
            this.Balance = balance;
            this.ExcludeVoidBalance = excludeVoidBalance;
            this.RowNumber = rowNumber;
            this.Description = description;
            this.DescriptionForeign = descriptionForeign;
            this.ChartOfAccountName = chartOfAccountName;
            this.JournalEntry = journalEntry;
            this.ChartOfAccount = chartOfAccount;
        }

        /// <summary>
        /// Gets or Sets JournalEntryId
        /// </summary>
        [DataMember(Name = "journalEntryId", EmitDefaultValue = false)]
        public long JournalEntryId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccountId
        /// </summary>
        [DataMember(Name = "chartOfAccountId", EmitDefaultValue = false)]
        public long ChartOfAccountId { get; set; }

        /// <summary>
        /// Gets or Sets PostedDate
        /// </summary>
        [DataMember(Name = "postedDate", EmitDefaultValue = true)]
        public DateTime? PostedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedOn
        /// </summary>
        [DataMember(Name = "approvedOn", EmitDefaultValue = true)]
        public DateTime? ApprovedOn { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public decimal Balance { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeVoidBalance
        /// </summary>
        [DataMember(Name = "excludeVoidBalance", EmitDefaultValue = false)]
        public decimal ExcludeVoidBalance { get; set; }

        /// <summary>
        /// Gets or Sets RowNumber
        /// </summary>
        [DataMember(Name = "rowNumber", EmitDefaultValue = false)]
        public int RowNumber { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionForeign
        /// </summary>
        [DataMember(Name = "descriptionForeign", EmitDefaultValue = true)]
        public string DescriptionForeign { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccountName
        /// </summary>
        [DataMember(Name = "chartOfAccountName", EmitDefaultValue = true)]
        public string ChartOfAccountName { get; set; }

        /// <summary>
        /// Gets or Sets JournalEntry
        /// </summary>
        [DataMember(Name = "journalEntry", EmitDefaultValue = true)]
        public OneOfIJournalEntryBase JournalEntry { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccount
        /// </summary>
        [DataMember(Name = "chartOfAccount", EmitDefaultValue = true)]
        public OneOfIChartOfAccount ChartOfAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IBookOfAccount {\n");
            sb.Append("  JournalEntryId: ").Append(JournalEntryId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  DebitCredit: ").Append(DebitCredit).Append("\n");
            sb.Append("  BookOfAccountStatus: ").Append(BookOfAccountStatus).Append("\n");
            sb.Append("  ChartOfAccountId: ").Append(ChartOfAccountId).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  ApprovedOn: ").Append(ApprovedOn).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  ExcludeVoidBalance: ").Append(ExcludeVoidBalance).Append("\n");
            sb.Append("  RowNumber: ").Append(RowNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DescriptionForeign: ").Append(DescriptionForeign).Append("\n");
            sb.Append("  ChartOfAccountName: ").Append(ChartOfAccountName).Append("\n");
            sb.Append("  JournalEntry: ").Append(JournalEntry).Append("\n");
            sb.Append("  ChartOfAccount: ").Append(ChartOfAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IBookOfAccount);
        }

        /// <summary>
        /// Returns true if IBookOfAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of IBookOfAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IBookOfAccount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.JournalEntryId == input.JournalEntryId ||
                    this.JournalEntryId.Equals(input.JournalEntryId)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.DebitCredit == input.DebitCredit ||
                    this.DebitCredit.Equals(input.DebitCredit)
                ) && 
                (
                    this.BookOfAccountStatus == input.BookOfAccountStatus ||
                    this.BookOfAccountStatus.Equals(input.BookOfAccountStatus)
                ) && 
                (
                    this.ChartOfAccountId == input.ChartOfAccountId ||
                    this.ChartOfAccountId.Equals(input.ChartOfAccountId)
                ) && 
                (
                    this.PostedDate == input.PostedDate ||
                    (this.PostedDate != null &&
                    this.PostedDate.Equals(input.PostedDate))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.ApprovedOn == input.ApprovedOn ||
                    (this.ApprovedOn != null &&
                    this.ApprovedOn.Equals(input.ApprovedOn))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Balance == input.Balance ||
                    this.Balance.Equals(input.Balance)
                ) && 
                (
                    this.ExcludeVoidBalance == input.ExcludeVoidBalance ||
                    this.ExcludeVoidBalance.Equals(input.ExcludeVoidBalance)
                ) && 
                (
                    this.RowNumber == input.RowNumber ||
                    this.RowNumber.Equals(input.RowNumber)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DescriptionForeign == input.DescriptionForeign ||
                    (this.DescriptionForeign != null &&
                    this.DescriptionForeign.Equals(input.DescriptionForeign))
                ) && 
                (
                    this.ChartOfAccountName == input.ChartOfAccountName ||
                    (this.ChartOfAccountName != null &&
                    this.ChartOfAccountName.Equals(input.ChartOfAccountName))
                ) && 
                (
                    this.JournalEntry == input.JournalEntry ||
                    (this.JournalEntry != null &&
                    this.JournalEntry.Equals(input.JournalEntry))
                ) && 
                (
                    this.ChartOfAccount == input.ChartOfAccount ||
                    (this.ChartOfAccount != null &&
                    this.ChartOfAccount.Equals(input.ChartOfAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.JournalEntryId.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.DebitCredit.GetHashCode();
                hashCode = (hashCode * 59) + this.BookOfAccountStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.ChartOfAccountId.GetHashCode();
                if (this.PostedDate != null)
                {
                    hashCode = (hashCode * 59) + this.PostedDate.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                if (this.ApprovedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                hashCode = (hashCode * 59) + this.Balance.GetHashCode();
                hashCode = (hashCode * 59) + this.ExcludeVoidBalance.GetHashCode();
                hashCode = (hashCode * 59) + this.RowNumber.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DescriptionForeign != null)
                {
                    hashCode = (hashCode * 59) + this.DescriptionForeign.GetHashCode();
                }
                if (this.ChartOfAccountName != null)
                {
                    hashCode = (hashCode * 59) + this.ChartOfAccountName.GetHashCode();
                }
                if (this.JournalEntry != null)
                {
                    hashCode = (hashCode * 59) + this.JournalEntry.GetHashCode();
                }
                if (this.ChartOfAccount != null)
                {
                    hashCode = (hashCode * 59) + this.ChartOfAccount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

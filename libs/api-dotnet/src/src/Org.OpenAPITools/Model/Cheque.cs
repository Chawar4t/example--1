/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Cheque
    /// </summary>
    [DataContract(Name = "Cheque")]
    public partial class Cheque : IEquatable<Cheque>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public BankingChannelsStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cheque" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Cheque() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cheque" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyId">companyId (required).</param>
        /// <param name="bankAccountId">bankAccountId.</param>
        /// <param name="bankAccount">bankAccount.</param>
        /// <param name="chartOfAccountId">chartOfAccountId.</param>
        /// <param name="chartOfAccount">chartOfAccount.</param>
        /// <param name="status">status.</param>
        /// <param name="isDelete">isDelete (default to false).</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="modifiedOn">modifiedOn.</param>
        public Cheque(long id = default(long), long companyId = default(long), long bankAccountId = default(long), OneOfBankAccount bankAccount = default(OneOfBankAccount), long? chartOfAccountId = default(long?), OneOfChartOfAccount chartOfAccount = default(OneOfChartOfAccount), BankingChannelsStatus? status = default(BankingChannelsStatus?), bool isDelete = false, DateTime createdOn = default(DateTime), DateTime modifiedOn = default(DateTime))
        {
            this.CompanyId = companyId;
            this.Id = id;
            this.BankAccountId = bankAccountId;
            this.BankAccount = bankAccount;
            this.ChartOfAccountId = chartOfAccountId;
            this.ChartOfAccount = chartOfAccount;
            this.Status = status;
            this.IsDelete = isDelete;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", IsRequired = true, EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountId
        /// </summary>
        [DataMember(Name = "bankAccountId", EmitDefaultValue = false)]
        public long BankAccountId { get; set; }

        /// <summary>
        /// Gets or Sets BankAccount
        /// </summary>
        [DataMember(Name = "bankAccount", EmitDefaultValue = true)]
        public OneOfBankAccount BankAccount { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccountId
        /// </summary>
        [DataMember(Name = "chartOfAccountId", EmitDefaultValue = true)]
        public long? ChartOfAccountId { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccount
        /// </summary>
        [DataMember(Name = "chartOfAccount", EmitDefaultValue = true)]
        public OneOfChartOfAccount ChartOfAccount { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Cheque {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  BankAccountId: ").Append(BankAccountId).Append("\n");
            sb.Append("  BankAccount: ").Append(BankAccount).Append("\n");
            sb.Append("  ChartOfAccountId: ").Append(ChartOfAccountId).Append("\n");
            sb.Append("  ChartOfAccount: ").Append(ChartOfAccount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cheque);
        }

        /// <summary>
        /// Returns true if Cheque instances are equal
        /// </summary>
        /// <param name="input">Instance of Cheque to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cheque input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.BankAccountId == input.BankAccountId ||
                    this.BankAccountId.Equals(input.BankAccountId)
                ) && 
                (
                    this.BankAccount == input.BankAccount ||
                    (this.BankAccount != null &&
                    this.BankAccount.Equals(input.BankAccount))
                ) && 
                (
                    this.ChartOfAccountId == input.ChartOfAccountId ||
                    (this.ChartOfAccountId != null &&
                    this.ChartOfAccountId.Equals(input.ChartOfAccountId))
                ) && 
                (
                    this.ChartOfAccount == input.ChartOfAccount ||
                    (this.ChartOfAccount != null &&
                    this.ChartOfAccount.Equals(input.ChartOfAccount))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.BankAccountId.GetHashCode();
                if (this.BankAccount != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccount.GetHashCode();
                }
                if (this.ChartOfAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.ChartOfAccountId.GetHashCode();
                }
                if (this.ChartOfAccount != null)
                {
                    hashCode = (hashCode * 59) + this.ChartOfAccount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

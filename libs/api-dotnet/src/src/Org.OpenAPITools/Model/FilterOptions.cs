/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FilterOptions
    /// </summary>
    [DataContract(Name = "FilterOptions")]
    public partial class FilterOptions : IEquatable<FilterOptions>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ColumnPredicateOperator
        /// </summary>
        [DataMember(Name = "columnPredicateOperator", EmitDefaultValue = false)]
        public PredicateOperator? ColumnPredicateOperator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterOptions" /> class.
        /// </summary>
        /// <param name="columnName">columnName.</param>
        /// <param name="columnValue">columnValue.</param>
        /// <param name="columnPredicateOperator">columnPredicateOperator.</param>
        public FilterOptions(string columnName = default(string), string columnValue = default(string), PredicateOperator? columnPredicateOperator = default(PredicateOperator?))
        {
            this.ColumnName = columnName;
            this.ColumnValue = columnValue;
            this.ColumnPredicateOperator = columnPredicateOperator;
        }

        /// <summary>
        /// Gets or Sets ColumnName
        /// </summary>
        [DataMember(Name = "columnName", EmitDefaultValue = true)]
        public string ColumnName { get; set; }

        /// <summary>
        /// Gets or Sets ColumnValue
        /// </summary>
        [DataMember(Name = "columnValue", EmitDefaultValue = true)]
        public string ColumnValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FilterOptions {\n");
            sb.Append("  ColumnName: ").Append(ColumnName).Append("\n");
            sb.Append("  ColumnValue: ").Append(ColumnValue).Append("\n");
            sb.Append("  ColumnPredicateOperator: ").Append(ColumnPredicateOperator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterOptions);
        }

        /// <summary>
        /// Returns true if FilterOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ColumnName == input.ColumnName ||
                    (this.ColumnName != null &&
                    this.ColumnName.Equals(input.ColumnName))
                ) && 
                (
                    this.ColumnValue == input.ColumnValue ||
                    (this.ColumnValue != null &&
                    this.ColumnValue.Equals(input.ColumnValue))
                ) && 
                (
                    this.ColumnPredicateOperator == input.ColumnPredicateOperator ||
                    this.ColumnPredicateOperator.Equals(input.ColumnPredicateOperator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ColumnName != null)
                {
                    hashCode = (hashCode * 59) + this.ColumnName.GetHashCode();
                }
                if (this.ColumnValue != null)
                {
                    hashCode = (hashCode * 59) + this.ColumnValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ColumnPredicateOperator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExpenseCategory
    /// </summary>
    [DataContract(Name = "ExpenseCategory")]
    public partial class ExpenseCategory : IEquatable<ExpenseCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseCategory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExpenseCategory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseCategory" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="nameForeign">nameForeign.</param>
        /// <param name="isShare">isShare.</param>
        /// <param name="isDelete">isDelete.</param>
        /// <param name="isGLSystem">isGLSystem.</param>
        /// <param name="systemCode">systemCode.</param>
        /// <param name="resetTransactionId">resetTransactionId.</param>
        /// <param name="taxLife">taxLife.</param>
        /// <param name="chartOfAccountId">chartOfAccountId.</param>
        /// <param name="chartOfAccountIdCredit">chartOfAccountIdCredit.</param>
        /// <param name="depreciationChartOfAccountId">depreciationChartOfAccountId.</param>
        /// <param name="accumulatedDepreciationChartOfAccountId">accumulatedDepreciationChartOfAccountId.</param>
        /// <param name="depreciableAsset">depreciableAsset.</param>
        /// <param name="expenseList">expenseList.</param>
        /// <param name="companyExpenseCategory">companyExpenseCategory.</param>
        public ExpenseCategory(long id = default(long), string name = default(string), string nameForeign = default(string), bool isShare = default(bool), bool isDelete = default(bool), bool isGLSystem = default(bool), int? systemCode = default(int?), long? resetTransactionId = default(long?), int? taxLife = default(int?), long? chartOfAccountId = default(long?), long? chartOfAccountIdCredit = default(long?), long? depreciationChartOfAccountId = default(long?), long? accumulatedDepreciationChartOfAccountId = default(long?), bool? depreciableAsset = default(bool?), List<ExpenseList> expenseList = default(List<ExpenseList>), List<CompanyExpenseCategory> companyExpenseCategory = default(List<CompanyExpenseCategory>))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for ExpenseCategory and cannot be null");
            }
            this.Name = name;
            this.Id = id;
            this.NameForeign = nameForeign;
            this.IsShare = isShare;
            this.IsDelete = isDelete;
            this.IsGLSystem = isGLSystem;
            this.SystemCode = systemCode;
            this.ResetTransactionId = resetTransactionId;
            this.TaxLife = taxLife;
            this.ChartOfAccountId = chartOfAccountId;
            this.ChartOfAccountIdCredit = chartOfAccountIdCredit;
            this.DepreciationChartOfAccountId = depreciationChartOfAccountId;
            this.AccumulatedDepreciationChartOfAccountId = accumulatedDepreciationChartOfAccountId;
            this.DepreciableAsset = depreciableAsset;
            this.ExpenseList = expenseList;
            this.CompanyExpenseCategory = companyExpenseCategory;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NameForeign
        /// </summary>
        [DataMember(Name = "nameForeign", EmitDefaultValue = true)]
        public string NameForeign { get; set; }

        /// <summary>
        /// Gets or Sets IsShare
        /// </summary>
        [DataMember(Name = "isShare", EmitDefaultValue = true)]
        public bool IsShare { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets IsGLSystem
        /// </summary>
        [DataMember(Name = "isGLSystem", EmitDefaultValue = true)]
        public bool IsGLSystem { get; set; }

        /// <summary>
        /// Gets or Sets SystemCode
        /// </summary>
        [DataMember(Name = "systemCode", EmitDefaultValue = true)]
        public int? SystemCode { get; set; }

        /// <summary>
        /// Gets or Sets ResetTransactionId
        /// </summary>
        [DataMember(Name = "resetTransactionId", EmitDefaultValue = true)]
        public long? ResetTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets TaxLife
        /// </summary>
        [DataMember(Name = "taxLife", EmitDefaultValue = true)]
        public int? TaxLife { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccountId
        /// </summary>
        [DataMember(Name = "chartOfAccountId", EmitDefaultValue = true)]
        public long? ChartOfAccountId { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccountIdCredit
        /// </summary>
        [DataMember(Name = "chartOfAccountIdCredit", EmitDefaultValue = true)]
        public long? ChartOfAccountIdCredit { get; set; }

        /// <summary>
        /// Gets or Sets DepreciationChartOfAccountId
        /// </summary>
        [DataMember(Name = "depreciationChartOfAccountId", EmitDefaultValue = true)]
        public long? DepreciationChartOfAccountId { get; set; }

        /// <summary>
        /// Gets or Sets AccumulatedDepreciationChartOfAccountId
        /// </summary>
        [DataMember(Name = "accumulatedDepreciationChartOfAccountId", EmitDefaultValue = true)]
        public long? AccumulatedDepreciationChartOfAccountId { get; set; }

        /// <summary>
        /// Gets or Sets DepreciableAsset
        /// </summary>
        [DataMember(Name = "depreciableAsset", EmitDefaultValue = true)]
        public bool? DepreciableAsset { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseList
        /// </summary>
        [DataMember(Name = "expenseList", EmitDefaultValue = true)]
        public List<ExpenseList> ExpenseList { get; set; }

        /// <summary>
        /// Gets or Sets CompanyExpenseCategory
        /// </summary>
        [DataMember(Name = "companyExpenseCategory", EmitDefaultValue = true)]
        public List<CompanyExpenseCategory> CompanyExpenseCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExpenseCategory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameForeign: ").Append(NameForeign).Append("\n");
            sb.Append("  IsShare: ").Append(IsShare).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  IsGLSystem: ").Append(IsGLSystem).Append("\n");
            sb.Append("  SystemCode: ").Append(SystemCode).Append("\n");
            sb.Append("  ResetTransactionId: ").Append(ResetTransactionId).Append("\n");
            sb.Append("  TaxLife: ").Append(TaxLife).Append("\n");
            sb.Append("  ChartOfAccountId: ").Append(ChartOfAccountId).Append("\n");
            sb.Append("  ChartOfAccountIdCredit: ").Append(ChartOfAccountIdCredit).Append("\n");
            sb.Append("  DepreciationChartOfAccountId: ").Append(DepreciationChartOfAccountId).Append("\n");
            sb.Append("  AccumulatedDepreciationChartOfAccountId: ").Append(AccumulatedDepreciationChartOfAccountId).Append("\n");
            sb.Append("  DepreciableAsset: ").Append(DepreciableAsset).Append("\n");
            sb.Append("  ExpenseList: ").Append(ExpenseList).Append("\n");
            sb.Append("  CompanyExpenseCategory: ").Append(CompanyExpenseCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseCategory);
        }

        /// <summary>
        /// Returns true if ExpenseCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseCategory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NameForeign == input.NameForeign ||
                    (this.NameForeign != null &&
                    this.NameForeign.Equals(input.NameForeign))
                ) && 
                (
                    this.IsShare == input.IsShare ||
                    this.IsShare.Equals(input.IsShare)
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.IsGLSystem == input.IsGLSystem ||
                    this.IsGLSystem.Equals(input.IsGLSystem)
                ) && 
                (
                    this.SystemCode == input.SystemCode ||
                    (this.SystemCode != null &&
                    this.SystemCode.Equals(input.SystemCode))
                ) && 
                (
                    this.ResetTransactionId == input.ResetTransactionId ||
                    (this.ResetTransactionId != null &&
                    this.ResetTransactionId.Equals(input.ResetTransactionId))
                ) && 
                (
                    this.TaxLife == input.TaxLife ||
                    (this.TaxLife != null &&
                    this.TaxLife.Equals(input.TaxLife))
                ) && 
                (
                    this.ChartOfAccountId == input.ChartOfAccountId ||
                    (this.ChartOfAccountId != null &&
                    this.ChartOfAccountId.Equals(input.ChartOfAccountId))
                ) && 
                (
                    this.ChartOfAccountIdCredit == input.ChartOfAccountIdCredit ||
                    (this.ChartOfAccountIdCredit != null &&
                    this.ChartOfAccountIdCredit.Equals(input.ChartOfAccountIdCredit))
                ) && 
                (
                    this.DepreciationChartOfAccountId == input.DepreciationChartOfAccountId ||
                    (this.DepreciationChartOfAccountId != null &&
                    this.DepreciationChartOfAccountId.Equals(input.DepreciationChartOfAccountId))
                ) && 
                (
                    this.AccumulatedDepreciationChartOfAccountId == input.AccumulatedDepreciationChartOfAccountId ||
                    (this.AccumulatedDepreciationChartOfAccountId != null &&
                    this.AccumulatedDepreciationChartOfAccountId.Equals(input.AccumulatedDepreciationChartOfAccountId))
                ) && 
                (
                    this.DepreciableAsset == input.DepreciableAsset ||
                    (this.DepreciableAsset != null &&
                    this.DepreciableAsset.Equals(input.DepreciableAsset))
                ) && 
                (
                    this.ExpenseList == input.ExpenseList ||
                    this.ExpenseList != null &&
                    input.ExpenseList != null &&
                    this.ExpenseList.SequenceEqual(input.ExpenseList)
                ) && 
                (
                    this.CompanyExpenseCategory == input.CompanyExpenseCategory ||
                    this.CompanyExpenseCategory != null &&
                    input.CompanyExpenseCategory != null &&
                    this.CompanyExpenseCategory.SequenceEqual(input.CompanyExpenseCategory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NameForeign != null)
                {
                    hashCode = (hashCode * 59) + this.NameForeign.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsShare.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                hashCode = (hashCode * 59) + this.IsGLSystem.GetHashCode();
                if (this.SystemCode != null)
                {
                    hashCode = (hashCode * 59) + this.SystemCode.GetHashCode();
                }
                if (this.ResetTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.ResetTransactionId.GetHashCode();
                }
                if (this.TaxLife != null)
                {
                    hashCode = (hashCode * 59) + this.TaxLife.GetHashCode();
                }
                if (this.ChartOfAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.ChartOfAccountId.GetHashCode();
                }
                if (this.ChartOfAccountIdCredit != null)
                {
                    hashCode = (hashCode * 59) + this.ChartOfAccountIdCredit.GetHashCode();
                }
                if (this.DepreciationChartOfAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.DepreciationChartOfAccountId.GetHashCode();
                }
                if (this.AccumulatedDepreciationChartOfAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccumulatedDepreciationChartOfAccountId.GetHashCode();
                }
                if (this.DepreciableAsset != null)
                {
                    hashCode = (hashCode * 59) + this.DepreciableAsset.GetHashCode();
                }
                if (this.ExpenseList != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseList.GetHashCode();
                }
                if (this.CompanyExpenseCategory != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyExpenseCategory.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            yield break;
        }
    }

}

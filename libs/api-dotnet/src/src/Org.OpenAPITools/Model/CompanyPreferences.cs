/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CompanyPreferences
    /// </summary>
    [DataContract(Name = "CompanyPreferences")]
    public partial class CompanyPreferences : IEquatable<CompanyPreferences>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BusinessType
        /// </summary>
        [DataMember(Name = "businessType", EmitDefaultValue = false)]
        public BusinessType? BusinessType { get; set; }

        /// <summary>
        /// Gets or Sets RunningNumberType
        /// </summary>
        [DataMember(Name = "runningNumberType", EmitDefaultValue = false)]
        public RunningNumberType? RunningNumberType { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTemplates
        /// </summary>
        [DataMember(Name = "documentTemplates", EmitDefaultValue = false)]
        public DocumentTemplates? DocumentTemplates { get; set; }

        /// <summary>
        /// Gets or Sets TemplateFont
        /// </summary>
        [DataMember(Name = "templateFont", EmitDefaultValue = false)]
        public TemplateFont? TemplateFont { get; set; }

        /// <summary>
        /// Gets or Sets GeneralLedgerRunningNumberType
        /// </summary>
        [DataMember(Name = "generalLedgerRunningNumberType", EmitDefaultValue = false)]
        public RunningNumberType? GeneralLedgerRunningNumberType { get; set; }

        /// <summary>
        /// Gets or Sets ShortCashInvoiceTemplates
        /// </summary>
        [DataMember(Name = "shortCashInvoiceTemplates", EmitDefaultValue = false)]
        public DocumentTemplates? ShortCashInvoiceTemplates { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyPreferences" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompanyPreferences() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyPreferences" /> class.
        /// </summary>
        /// <param name="companyId">companyId.</param>
        /// <param name="showWithHolding">showWithHolding (default to false).</param>
        /// <param name="invoicePrefix">invoicePrefix (required).</param>
        /// <param name="quotationPrefix">quotationPrefix (required).</param>
        /// <param name="billingNotePrefix">billingNotePrefix (required).</param>
        /// <param name="receiptPrefix">receiptPrefix (required).</param>
        /// <param name="purchaseOrderPrefix">purchaseOrderPrefix (required).</param>
        /// <param name="cashInvoicePrefix">cashInvoicePrefix (required).</param>
        /// <param name="receivableInvoicePrefix">receivableInvoicePrefix (required).</param>
        /// <param name="cashInvoiceStartingNumber">cashInvoiceStartingNumber.</param>
        /// <param name="receiptStartingNumber">receiptStartingNumber.</param>
        /// <param name="quotationStartingNumber">quotationStartingNumber.</param>
        /// <param name="billingNoteStartingNumber">billingNoteStartingNumber.</param>
        /// <param name="purchaseOrderStartingNumber">purchaseOrderStartingNumber.</param>
        /// <param name="purchaseOrderTitleEN">purchaseOrderTitleEN (required).</param>
        /// <param name="quotationTitleEN">quotationTitleEN (required).</param>
        /// <param name="billingNoteTitleEN">billingNoteTitleEN (required).</param>
        /// <param name="invoiceTitleEN">invoiceTitleEN (required).</param>
        /// <param name="receiptTitleEN">receiptTitleEN (required).</param>
        /// <param name="paymentSlipTitleEN">paymentSlipTitleEN (required).</param>
        /// <param name="purchaseOrderTitleTH">purchaseOrderTitleTH (required).</param>
        /// <param name="quotationTitleTH">quotationTitleTH (required).</param>
        /// <param name="billingNoteTitleTH">billingNoteTitleTH (required).</param>
        /// <param name="invoiceTitleTH">invoiceTitleTH (required).</param>
        /// <param name="receiptTitleTH">receiptTitleTH (required).</param>
        /// <param name="paymentSlipTitleTH">paymentSlipTitleTH (required).</param>
        /// <param name="businessType">businessType.</param>
        /// <param name="termsAgreement">termsAgreement.</param>
        /// <param name="defaultRemarks">defaultRemarks.</param>
        /// <param name="invoiceStartingNumber">invoiceStartingNumber.</param>
        /// <param name="cashInvoiceTitleEN">cashInvoiceTitleEN (required).</param>
        /// <param name="cashInvoiceTitleTH">cashInvoiceTitleTH (required).</param>
        /// <param name="receivableInvoiceTitleTH">receivableInvoiceTitleTH (required).</param>
        /// <param name="receivableInvoiceTitleEN">receivableInvoiceTitleEN (required).</param>
        /// <param name="runningNumberType">runningNumberType.</param>
        /// <param name="purchaseOrderStartingYear">purchaseOrderStartingYear.</param>
        /// <param name="quotationStartingYear">quotationStartingYear.</param>
        /// <param name="billingNoteStartingYear">billingNoteStartingYear.</param>
        /// <param name="invoiceStartingYear">invoiceStartingYear.</param>
        /// <param name="cashInvoiceStartingYear">cashInvoiceStartingYear.</param>
        /// <param name="receiptStartingYear">receiptStartingYear.</param>
        /// <param name="purchaseOrderStartingMonth">purchaseOrderStartingMonth.</param>
        /// <param name="quotationStartingMonth">quotationStartingMonth.</param>
        /// <param name="billingNoteStartingMonth">billingNoteStartingMonth.</param>
        /// <param name="invoiceStartingMonth">invoiceStartingMonth.</param>
        /// <param name="cashInvoiceStartingMonth">cashInvoiceStartingMonth.</param>
        /// <param name="receiptStartingMonth">receiptStartingMonth.</param>
        /// <param name="settingsInitiated">settingsInitiated (default to false).</param>
        /// <param name="runningNumberSettingsModifiedOn">runningNumberSettingsModifiedOn.</param>
        /// <param name="withHoldingTaxPrefix">withHoldingTaxPrefix (required).</param>
        /// <param name="withHoldingTaxStartingNumber">withHoldingTaxStartingNumber.</param>
        /// <param name="withHoldingTaxStartingMonth">withHoldingTaxStartingMonth.</param>
        /// <param name="withHoldingTaxStartingYear">withHoldingTaxStartingYear.</param>
        /// <param name="documentTemplates">documentTemplates.</param>
        /// <param name="printColor">printColor.</param>
        /// <param name="templateFont">templateFont.</param>
        /// <param name="printOneInvoice">printOneInvoice.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="emailMessageTemplate">emailMessageTemplate.</param>
        /// <param name="purchasePrefix">purchasePrefix (required).</param>
        /// <param name="purchaseStartingNumber">purchaseStartingNumber.</param>
        /// <param name="purchaseTitleEN">purchaseTitleEN (required).</param>
        /// <param name="purchaseTitleTH">purchaseTitleTH (required).</param>
        /// <param name="purchaseStartingYear">purchaseStartingYear.</param>
        /// <param name="purchaseStartingMonth">purchaseStartingMonth.</param>
        /// <param name="adjustInventoryPrefix">adjustInventoryPrefix (required).</param>
        /// <param name="adjustInventoryStartingNumber">adjustInventoryStartingNumber.</param>
        /// <param name="adjustInventoryStartingMonth">adjustInventoryStartingMonth.</param>
        /// <param name="adjustInventoryStartingYear">adjustInventoryStartingYear.</param>
        /// <param name="expensePrefix">expensePrefix (required).</param>
        /// <param name="expenseStartingNumber">expenseStartingNumber.</param>
        /// <param name="expenseStartingMonth">expenseStartingMonth.</param>
        /// <param name="expenseStartingYear">expenseStartingYear.</param>
        /// <param name="paymentSlipPrefix">paymentSlipPrefix (required).</param>
        /// <param name="paymentSlipStartingNumber">paymentSlipStartingNumber.</param>
        /// <param name="paymentSlipStartingYear">paymentSlipStartingYear.</param>
        /// <param name="paymentSlipStartingMonth">paymentSlipStartingMonth.</param>
        /// <param name="cashInvoiceRunningNumberModifiedOn">cashInvoiceRunningNumberModifiedOn.</param>
        /// <param name="purchaseOrderRunningNumberModifiedOn">purchaseOrderRunningNumberModifiedOn.</param>
        /// <param name="quotationRunningNumberModifiedOn">quotationRunningNumberModifiedOn.</param>
        /// <param name="billingNoteRunningNumberModifiedOn">billingNoteRunningNumberModifiedOn.</param>
        /// <param name="invoiceRunningNumberModifiedOn">invoiceRunningNumberModifiedOn.</param>
        /// <param name="purchaseRunningNumberModifiedOn">purchaseRunningNumberModifiedOn.</param>
        /// <param name="receivableInvoiceRunningNumberModifiedOn">receivableInvoiceRunningNumberModifiedOn.</param>
        /// <param name="paymentSlipRunningNumberModifiedOn">paymentSlipRunningNumberModifiedOn.</param>
        /// <param name="rubberStampUrl">rubberStampUrl.</param>
        /// <param name="creditNotePrefix">creditNotePrefix (required).</param>
        /// <param name="creditNoteStartingNumber">creditNoteStartingNumber.</param>
        /// <param name="creditNoteStartingMonth">creditNoteStartingMonth.</param>
        /// <param name="creditNoteStartingYear">creditNoteStartingYear.</param>
        /// <param name="creditNoteRunningNumberModifiedOn">creditNoteRunningNumberModifiedOn.</param>
        /// <param name="creditNoteTitleEN">creditNoteTitleEN (required).</param>
        /// <param name="creditNoteTitleTH">creditNoteTitleTH (required).</param>
        /// <param name="debitNotePrefix">debitNotePrefix (required).</param>
        /// <param name="debitNoteStartingNumber">debitNoteStartingNumber.</param>
        /// <param name="debitNoteStartingMonth">debitNoteStartingMonth.</param>
        /// <param name="debitNoteStartingYear">debitNoteStartingYear.</param>
        /// <param name="debitNoteRunningNumberModifiedOn">debitNoteRunningNumberModifiedOn.</param>
        /// <param name="debitNoteTitleEN">debitNoteTitleEN (required).</param>
        /// <param name="debitNoteTitleTH">debitNoteTitleTH (required).</param>
        /// <param name="receiptRunningNumberModifiedOn">receiptRunningNumberModifiedOn.</param>
        /// <param name="receivableInvoiceStartingNumber">receivableInvoiceStartingNumber.</param>
        /// <param name="receivableInvoiceStartingMonth">receivableInvoiceStartingMonth.</param>
        /// <param name="receivableInvoiceStartingYear">receivableInvoiceStartingYear.</param>
        /// <param name="usePartialReceipt">usePartialReceipt.</param>
        /// <param name="useCashInvoice">useCashInvoice.</param>
        /// <param name="useShortCashInvoice">useShortCashInvoice.</param>
        /// <param name="generalLedgerRunningNumberType">generalLedgerRunningNumberType.</param>
        /// <param name="journalVoucherPrefix">journalVoucherPrefix (required).</param>
        /// <param name="purchaseVoucherPrefix">purchaseVoucherPrefix (required).</param>
        /// <param name="purchaseVoucherRunningNumberModifiedOn">purchaseVoucherRunningNumberModifiedOn.</param>
        /// <param name="salesVoucherPrefix">salesVoucherPrefix (required).</param>
        /// <param name="salesVoucherRunningNumberModifiedOn">salesVoucherRunningNumberModifiedOn.</param>
        /// <param name="paymentVoucherPrefix">paymentVoucherPrefix (required).</param>
        /// <param name="paymentVoucherRunningNumberModifiedOn">paymentVoucherRunningNumberModifiedOn.</param>
        /// <param name="receivedVoucherPrefix">receivedVoucherPrefix (required).</param>
        /// <param name="receivedVoucherRunningNumberModifiedOn">receivedVoucherRunningNumberModifiedOn.</param>
        /// <param name="conversionBalancePrefix">conversionBalancePrefix (required).</param>
        /// <param name="conversionBalanceRunningNumberModifiedOn">conversionBalanceRunningNumberModifiedOn.</param>
        /// <param name="eTaxEmail">eTaxEmail.</param>
        /// <param name="shortCashInvoiceTemplates">shortCashInvoiceTemplates.</param>
        /// <param name="useBillingNoteAccountingRule">useBillingNoteAccountingRule.</param>
        /// <param name="billingNoteAccountingRuleModifiedOn">billingNoteAccountingRuleModifiedOn.</param>
        /// <param name="templateFontSize">templateFontSize.</param>
        /// <param name="useMultiCurrency">useMultiCurrency.</param>
        /// <param name="expenseTitleTH">expenseTitleTH.</param>
        /// <param name="expenseTitleEN">expenseTitleEN.</param>
        /// <param name="withHoldingTaxTitleTH">withHoldingTaxTitleTH.</param>
        /// <param name="withHoldingTaxTitleEN">withHoldingTaxTitleEN.</param>
        public CompanyPreferences(long companyId = default(long), bool showWithHolding = false, string invoicePrefix = default(string), string quotationPrefix = default(string), string billingNotePrefix = default(string), string receiptPrefix = default(string), string purchaseOrderPrefix = default(string), string cashInvoicePrefix = default(string), string receivableInvoicePrefix = default(string), long cashInvoiceStartingNumber = default(long), long receiptStartingNumber = default(long), long quotationStartingNumber = default(long), long billingNoteStartingNumber = default(long), long purchaseOrderStartingNumber = default(long), string purchaseOrderTitleEN = default(string), string quotationTitleEN = default(string), string billingNoteTitleEN = default(string), string invoiceTitleEN = default(string), string receiptTitleEN = default(string), string paymentSlipTitleEN = default(string), string purchaseOrderTitleTH = default(string), string quotationTitleTH = default(string), string billingNoteTitleTH = default(string), string invoiceTitleTH = default(string), string receiptTitleTH = default(string), string paymentSlipTitleTH = default(string), BusinessType? businessType = default(BusinessType?), string termsAgreement = default(string), string defaultRemarks = default(string), long invoiceStartingNumber = default(long), string cashInvoiceTitleEN = default(string), string cashInvoiceTitleTH = default(string), string receivableInvoiceTitleTH = default(string), string receivableInvoiceTitleEN = default(string), RunningNumberType? runningNumberType = default(RunningNumberType?), int? purchaseOrderStartingYear = default(int?), int? quotationStartingYear = default(int?), int? billingNoteStartingYear = default(int?), int? invoiceStartingYear = default(int?), int? cashInvoiceStartingYear = default(int?), int? receiptStartingYear = default(int?), int? purchaseOrderStartingMonth = default(int?), int? quotationStartingMonth = default(int?), int? billingNoteStartingMonth = default(int?), int? invoiceStartingMonth = default(int?), int? cashInvoiceStartingMonth = default(int?), int? receiptStartingMonth = default(int?), bool settingsInitiated = false, DateTime? runningNumberSettingsModifiedOn = default(DateTime?), string withHoldingTaxPrefix = default(string), int withHoldingTaxStartingNumber = default(int), int? withHoldingTaxStartingMonth = default(int?), int? withHoldingTaxStartingYear = default(int?), DocumentTemplates? documentTemplates = default(DocumentTemplates?), bool printColor = default(bool), TemplateFont? templateFont = default(TemplateFont?), bool printOneInvoice = default(bool), string remarks = default(string), string emailMessageTemplate = default(string), string purchasePrefix = default(string), long purchaseStartingNumber = default(long), string purchaseTitleEN = default(string), string purchaseTitleTH = default(string), int? purchaseStartingYear = default(int?), int? purchaseStartingMonth = default(int?), string adjustInventoryPrefix = default(string), int adjustInventoryStartingNumber = default(int), int? adjustInventoryStartingMonth = default(int?), int? adjustInventoryStartingYear = default(int?), string expensePrefix = default(string), int expenseStartingNumber = default(int), int? expenseStartingMonth = default(int?), int? expenseStartingYear = default(int?), string paymentSlipPrefix = default(string), int paymentSlipStartingNumber = default(int), int? paymentSlipStartingYear = default(int?), int? paymentSlipStartingMonth = default(int?), DateTime? cashInvoiceRunningNumberModifiedOn = default(DateTime?), DateTime? purchaseOrderRunningNumberModifiedOn = default(DateTime?), DateTime? quotationRunningNumberModifiedOn = default(DateTime?), DateTime? billingNoteRunningNumberModifiedOn = default(DateTime?), DateTime? invoiceRunningNumberModifiedOn = default(DateTime?), DateTime? purchaseRunningNumberModifiedOn = default(DateTime?), DateTime? receivableInvoiceRunningNumberModifiedOn = default(DateTime?), DateTime? paymentSlipRunningNumberModifiedOn = default(DateTime?), string rubberStampUrl = default(string), string creditNotePrefix = default(string), int creditNoteStartingNumber = default(int), int? creditNoteStartingMonth = default(int?), int? creditNoteStartingYear = default(int?), DateTime? creditNoteRunningNumberModifiedOn = default(DateTime?), string creditNoteTitleEN = default(string), string creditNoteTitleTH = default(string), string debitNotePrefix = default(string), int debitNoteStartingNumber = default(int), int? debitNoteStartingMonth = default(int?), int? debitNoteStartingYear = default(int?), DateTime? debitNoteRunningNumberModifiedOn = default(DateTime?), string debitNoteTitleEN = default(string), string debitNoteTitleTH = default(string), DateTime? receiptRunningNumberModifiedOn = default(DateTime?), int receivableInvoiceStartingNumber = default(int), int? receivableInvoiceStartingMonth = default(int?), int? receivableInvoiceStartingYear = default(int?), bool usePartialReceipt = default(bool), bool useCashInvoice = default(bool), bool useShortCashInvoice = default(bool), RunningNumberType? generalLedgerRunningNumberType = default(RunningNumberType?), string journalVoucherPrefix = default(string), string purchaseVoucherPrefix = default(string), DateTime? purchaseVoucherRunningNumberModifiedOn = default(DateTime?), string salesVoucherPrefix = default(string), DateTime? salesVoucherRunningNumberModifiedOn = default(DateTime?), string paymentVoucherPrefix = default(string), DateTime? paymentVoucherRunningNumberModifiedOn = default(DateTime?), string receivedVoucherPrefix = default(string), DateTime? receivedVoucherRunningNumberModifiedOn = default(DateTime?), string conversionBalancePrefix = default(string), DateTime? conversionBalanceRunningNumberModifiedOn = default(DateTime?), string eTaxEmail = default(string), DocumentTemplates? shortCashInvoiceTemplates = default(DocumentTemplates?), bool useBillingNoteAccountingRule = default(bool), DateTime? billingNoteAccountingRuleModifiedOn = default(DateTime?), decimal? templateFontSize = default(decimal?), bool useMultiCurrency = default(bool), string expenseTitleTH = default(string), string expenseTitleEN = default(string), string withHoldingTaxTitleTH = default(string), string withHoldingTaxTitleEN = default(string))
        {
            // to ensure "invoicePrefix" is required (not null)
            if (invoicePrefix == null) {
                throw new ArgumentNullException("invoicePrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.InvoicePrefix = invoicePrefix;
            // to ensure "quotationPrefix" is required (not null)
            if (quotationPrefix == null) {
                throw new ArgumentNullException("quotationPrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.QuotationPrefix = quotationPrefix;
            // to ensure "billingNotePrefix" is required (not null)
            if (billingNotePrefix == null) {
                throw new ArgumentNullException("billingNotePrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.BillingNotePrefix = billingNotePrefix;
            // to ensure "receiptPrefix" is required (not null)
            if (receiptPrefix == null) {
                throw new ArgumentNullException("receiptPrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.ReceiptPrefix = receiptPrefix;
            // to ensure "purchaseOrderPrefix" is required (not null)
            if (purchaseOrderPrefix == null) {
                throw new ArgumentNullException("purchaseOrderPrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.PurchaseOrderPrefix = purchaseOrderPrefix;
            // to ensure "cashInvoicePrefix" is required (not null)
            if (cashInvoicePrefix == null) {
                throw new ArgumentNullException("cashInvoicePrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.CashInvoicePrefix = cashInvoicePrefix;
            // to ensure "receivableInvoicePrefix" is required (not null)
            if (receivableInvoicePrefix == null) {
                throw new ArgumentNullException("receivableInvoicePrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.ReceivableInvoicePrefix = receivableInvoicePrefix;
            // to ensure "purchaseOrderTitleEN" is required (not null)
            if (purchaseOrderTitleEN == null) {
                throw new ArgumentNullException("purchaseOrderTitleEN is a required property for CompanyPreferences and cannot be null");
            }
            this.PurchaseOrderTitleEN = purchaseOrderTitleEN;
            // to ensure "quotationTitleEN" is required (not null)
            if (quotationTitleEN == null) {
                throw new ArgumentNullException("quotationTitleEN is a required property for CompanyPreferences and cannot be null");
            }
            this.QuotationTitleEN = quotationTitleEN;
            // to ensure "billingNoteTitleEN" is required (not null)
            if (billingNoteTitleEN == null) {
                throw new ArgumentNullException("billingNoteTitleEN is a required property for CompanyPreferences and cannot be null");
            }
            this.BillingNoteTitleEN = billingNoteTitleEN;
            // to ensure "invoiceTitleEN" is required (not null)
            if (invoiceTitleEN == null) {
                throw new ArgumentNullException("invoiceTitleEN is a required property for CompanyPreferences and cannot be null");
            }
            this.InvoiceTitleEN = invoiceTitleEN;
            // to ensure "receiptTitleEN" is required (not null)
            if (receiptTitleEN == null) {
                throw new ArgumentNullException("receiptTitleEN is a required property for CompanyPreferences and cannot be null");
            }
            this.ReceiptTitleEN = receiptTitleEN;
            // to ensure "paymentSlipTitleEN" is required (not null)
            if (paymentSlipTitleEN == null) {
                throw new ArgumentNullException("paymentSlipTitleEN is a required property for CompanyPreferences and cannot be null");
            }
            this.PaymentSlipTitleEN = paymentSlipTitleEN;
            // to ensure "purchaseOrderTitleTH" is required (not null)
            if (purchaseOrderTitleTH == null) {
                throw new ArgumentNullException("purchaseOrderTitleTH is a required property for CompanyPreferences and cannot be null");
            }
            this.PurchaseOrderTitleTH = purchaseOrderTitleTH;
            // to ensure "quotationTitleTH" is required (not null)
            if (quotationTitleTH == null) {
                throw new ArgumentNullException("quotationTitleTH is a required property for CompanyPreferences and cannot be null");
            }
            this.QuotationTitleTH = quotationTitleTH;
            // to ensure "billingNoteTitleTH" is required (not null)
            if (billingNoteTitleTH == null) {
                throw new ArgumentNullException("billingNoteTitleTH is a required property for CompanyPreferences and cannot be null");
            }
            this.BillingNoteTitleTH = billingNoteTitleTH;
            // to ensure "invoiceTitleTH" is required (not null)
            if (invoiceTitleTH == null) {
                throw new ArgumentNullException("invoiceTitleTH is a required property for CompanyPreferences and cannot be null");
            }
            this.InvoiceTitleTH = invoiceTitleTH;
            // to ensure "receiptTitleTH" is required (not null)
            if (receiptTitleTH == null) {
                throw new ArgumentNullException("receiptTitleTH is a required property for CompanyPreferences and cannot be null");
            }
            this.ReceiptTitleTH = receiptTitleTH;
            // to ensure "paymentSlipTitleTH" is required (not null)
            if (paymentSlipTitleTH == null) {
                throw new ArgumentNullException("paymentSlipTitleTH is a required property for CompanyPreferences and cannot be null");
            }
            this.PaymentSlipTitleTH = paymentSlipTitleTH;
            // to ensure "cashInvoiceTitleEN" is required (not null)
            if (cashInvoiceTitleEN == null) {
                throw new ArgumentNullException("cashInvoiceTitleEN is a required property for CompanyPreferences and cannot be null");
            }
            this.CashInvoiceTitleEN = cashInvoiceTitleEN;
            // to ensure "cashInvoiceTitleTH" is required (not null)
            if (cashInvoiceTitleTH == null) {
                throw new ArgumentNullException("cashInvoiceTitleTH is a required property for CompanyPreferences and cannot be null");
            }
            this.CashInvoiceTitleTH = cashInvoiceTitleTH;
            // to ensure "receivableInvoiceTitleTH" is required (not null)
            if (receivableInvoiceTitleTH == null) {
                throw new ArgumentNullException("receivableInvoiceTitleTH is a required property for CompanyPreferences and cannot be null");
            }
            this.ReceivableInvoiceTitleTH = receivableInvoiceTitleTH;
            // to ensure "receivableInvoiceTitleEN" is required (not null)
            if (receivableInvoiceTitleEN == null) {
                throw new ArgumentNullException("receivableInvoiceTitleEN is a required property for CompanyPreferences and cannot be null");
            }
            this.ReceivableInvoiceTitleEN = receivableInvoiceTitleEN;
            // to ensure "withHoldingTaxPrefix" is required (not null)
            if (withHoldingTaxPrefix == null) {
                throw new ArgumentNullException("withHoldingTaxPrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.WithHoldingTaxPrefix = withHoldingTaxPrefix;
            // to ensure "purchasePrefix" is required (not null)
            if (purchasePrefix == null) {
                throw new ArgumentNullException("purchasePrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.PurchasePrefix = purchasePrefix;
            // to ensure "purchaseTitleEN" is required (not null)
            if (purchaseTitleEN == null) {
                throw new ArgumentNullException("purchaseTitleEN is a required property for CompanyPreferences and cannot be null");
            }
            this.PurchaseTitleEN = purchaseTitleEN;
            // to ensure "purchaseTitleTH" is required (not null)
            if (purchaseTitleTH == null) {
                throw new ArgumentNullException("purchaseTitleTH is a required property for CompanyPreferences and cannot be null");
            }
            this.PurchaseTitleTH = purchaseTitleTH;
            // to ensure "adjustInventoryPrefix" is required (not null)
            if (adjustInventoryPrefix == null) {
                throw new ArgumentNullException("adjustInventoryPrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.AdjustInventoryPrefix = adjustInventoryPrefix;
            // to ensure "expensePrefix" is required (not null)
            if (expensePrefix == null) {
                throw new ArgumentNullException("expensePrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.ExpensePrefix = expensePrefix;
            // to ensure "paymentSlipPrefix" is required (not null)
            if (paymentSlipPrefix == null) {
                throw new ArgumentNullException("paymentSlipPrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.PaymentSlipPrefix = paymentSlipPrefix;
            // to ensure "creditNotePrefix" is required (not null)
            if (creditNotePrefix == null) {
                throw new ArgumentNullException("creditNotePrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.CreditNotePrefix = creditNotePrefix;
            // to ensure "creditNoteTitleEN" is required (not null)
            if (creditNoteTitleEN == null) {
                throw new ArgumentNullException("creditNoteTitleEN is a required property for CompanyPreferences and cannot be null");
            }
            this.CreditNoteTitleEN = creditNoteTitleEN;
            // to ensure "creditNoteTitleTH" is required (not null)
            if (creditNoteTitleTH == null) {
                throw new ArgumentNullException("creditNoteTitleTH is a required property for CompanyPreferences and cannot be null");
            }
            this.CreditNoteTitleTH = creditNoteTitleTH;
            // to ensure "debitNotePrefix" is required (not null)
            if (debitNotePrefix == null) {
                throw new ArgumentNullException("debitNotePrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.DebitNotePrefix = debitNotePrefix;
            // to ensure "debitNoteTitleEN" is required (not null)
            if (debitNoteTitleEN == null) {
                throw new ArgumentNullException("debitNoteTitleEN is a required property for CompanyPreferences and cannot be null");
            }
            this.DebitNoteTitleEN = debitNoteTitleEN;
            // to ensure "debitNoteTitleTH" is required (not null)
            if (debitNoteTitleTH == null) {
                throw new ArgumentNullException("debitNoteTitleTH is a required property for CompanyPreferences and cannot be null");
            }
            this.DebitNoteTitleTH = debitNoteTitleTH;
            // to ensure "journalVoucherPrefix" is required (not null)
            if (journalVoucherPrefix == null) {
                throw new ArgumentNullException("journalVoucherPrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.JournalVoucherPrefix = journalVoucherPrefix;
            // to ensure "purchaseVoucherPrefix" is required (not null)
            if (purchaseVoucherPrefix == null) {
                throw new ArgumentNullException("purchaseVoucherPrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.PurchaseVoucherPrefix = purchaseVoucherPrefix;
            // to ensure "salesVoucherPrefix" is required (not null)
            if (salesVoucherPrefix == null) {
                throw new ArgumentNullException("salesVoucherPrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.SalesVoucherPrefix = salesVoucherPrefix;
            // to ensure "paymentVoucherPrefix" is required (not null)
            if (paymentVoucherPrefix == null) {
                throw new ArgumentNullException("paymentVoucherPrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.PaymentVoucherPrefix = paymentVoucherPrefix;
            // to ensure "receivedVoucherPrefix" is required (not null)
            if (receivedVoucherPrefix == null) {
                throw new ArgumentNullException("receivedVoucherPrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.ReceivedVoucherPrefix = receivedVoucherPrefix;
            // to ensure "conversionBalancePrefix" is required (not null)
            if (conversionBalancePrefix == null) {
                throw new ArgumentNullException("conversionBalancePrefix is a required property for CompanyPreferences and cannot be null");
            }
            this.ConversionBalancePrefix = conversionBalancePrefix;
            this.CompanyId = companyId;
            this.ShowWithHolding = showWithHolding;
            this.CashInvoiceStartingNumber = cashInvoiceStartingNumber;
            this.ReceiptStartingNumber = receiptStartingNumber;
            this.QuotationStartingNumber = quotationStartingNumber;
            this.BillingNoteStartingNumber = billingNoteStartingNumber;
            this.PurchaseOrderStartingNumber = purchaseOrderStartingNumber;
            this.BusinessType = businessType;
            this.TermsAgreement = termsAgreement;
            this.DefaultRemarks = defaultRemarks;
            this.InvoiceStartingNumber = invoiceStartingNumber;
            this.RunningNumberType = runningNumberType;
            this.PurchaseOrderStartingYear = purchaseOrderStartingYear;
            this.QuotationStartingYear = quotationStartingYear;
            this.BillingNoteStartingYear = billingNoteStartingYear;
            this.InvoiceStartingYear = invoiceStartingYear;
            this.CashInvoiceStartingYear = cashInvoiceStartingYear;
            this.ReceiptStartingYear = receiptStartingYear;
            this.PurchaseOrderStartingMonth = purchaseOrderStartingMonth;
            this.QuotationStartingMonth = quotationStartingMonth;
            this.BillingNoteStartingMonth = billingNoteStartingMonth;
            this.InvoiceStartingMonth = invoiceStartingMonth;
            this.CashInvoiceStartingMonth = cashInvoiceStartingMonth;
            this.ReceiptStartingMonth = receiptStartingMonth;
            this.SettingsInitiated = settingsInitiated;
            this.RunningNumberSettingsModifiedOn = runningNumberSettingsModifiedOn;
            this.WithHoldingTaxStartingNumber = withHoldingTaxStartingNumber;
            this.WithHoldingTaxStartingMonth = withHoldingTaxStartingMonth;
            this.WithHoldingTaxStartingYear = withHoldingTaxStartingYear;
            this.DocumentTemplates = documentTemplates;
            this.PrintColor = printColor;
            this.TemplateFont = templateFont;
            this.PrintOneInvoice = printOneInvoice;
            this.Remarks = remarks;
            this.EmailMessageTemplate = emailMessageTemplate;
            this.PurchaseStartingNumber = purchaseStartingNumber;
            this.PurchaseStartingYear = purchaseStartingYear;
            this.PurchaseStartingMonth = purchaseStartingMonth;
            this.AdjustInventoryStartingNumber = adjustInventoryStartingNumber;
            this.AdjustInventoryStartingMonth = adjustInventoryStartingMonth;
            this.AdjustInventoryStartingYear = adjustInventoryStartingYear;
            this.ExpenseStartingNumber = expenseStartingNumber;
            this.ExpenseStartingMonth = expenseStartingMonth;
            this.ExpenseStartingYear = expenseStartingYear;
            this.PaymentSlipStartingNumber = paymentSlipStartingNumber;
            this.PaymentSlipStartingYear = paymentSlipStartingYear;
            this.PaymentSlipStartingMonth = paymentSlipStartingMonth;
            this.CashInvoiceRunningNumberModifiedOn = cashInvoiceRunningNumberModifiedOn;
            this.PurchaseOrderRunningNumberModifiedOn = purchaseOrderRunningNumberModifiedOn;
            this.QuotationRunningNumberModifiedOn = quotationRunningNumberModifiedOn;
            this.BillingNoteRunningNumberModifiedOn = billingNoteRunningNumberModifiedOn;
            this.InvoiceRunningNumberModifiedOn = invoiceRunningNumberModifiedOn;
            this.PurchaseRunningNumberModifiedOn = purchaseRunningNumberModifiedOn;
            this.ReceivableInvoiceRunningNumberModifiedOn = receivableInvoiceRunningNumberModifiedOn;
            this.PaymentSlipRunningNumberModifiedOn = paymentSlipRunningNumberModifiedOn;
            this.RubberStampUrl = rubberStampUrl;
            this.CreditNoteStartingNumber = creditNoteStartingNumber;
            this.CreditNoteStartingMonth = creditNoteStartingMonth;
            this.CreditNoteStartingYear = creditNoteStartingYear;
            this.CreditNoteRunningNumberModifiedOn = creditNoteRunningNumberModifiedOn;
            this.DebitNoteStartingNumber = debitNoteStartingNumber;
            this.DebitNoteStartingMonth = debitNoteStartingMonth;
            this.DebitNoteStartingYear = debitNoteStartingYear;
            this.DebitNoteRunningNumberModifiedOn = debitNoteRunningNumberModifiedOn;
            this.ReceiptRunningNumberModifiedOn = receiptRunningNumberModifiedOn;
            this.ReceivableInvoiceStartingNumber = receivableInvoiceStartingNumber;
            this.ReceivableInvoiceStartingMonth = receivableInvoiceStartingMonth;
            this.ReceivableInvoiceStartingYear = receivableInvoiceStartingYear;
            this.UsePartialReceipt = usePartialReceipt;
            this.UseCashInvoice = useCashInvoice;
            this.UseShortCashInvoice = useShortCashInvoice;
            this.GeneralLedgerRunningNumberType = generalLedgerRunningNumberType;
            this.PurchaseVoucherRunningNumberModifiedOn = purchaseVoucherRunningNumberModifiedOn;
            this.SalesVoucherRunningNumberModifiedOn = salesVoucherRunningNumberModifiedOn;
            this.PaymentVoucherRunningNumberModifiedOn = paymentVoucherRunningNumberModifiedOn;
            this.ReceivedVoucherRunningNumberModifiedOn = receivedVoucherRunningNumberModifiedOn;
            this.ConversionBalanceRunningNumberModifiedOn = conversionBalanceRunningNumberModifiedOn;
            this.ETaxEmail = eTaxEmail;
            this.ShortCashInvoiceTemplates = shortCashInvoiceTemplates;
            this.UseBillingNoteAccountingRule = useBillingNoteAccountingRule;
            this.BillingNoteAccountingRuleModifiedOn = billingNoteAccountingRuleModifiedOn;
            this.TemplateFontSize = templateFontSize;
            this.UseMultiCurrency = useMultiCurrency;
            this.ExpenseTitleTH = expenseTitleTH;
            this.ExpenseTitleEN = expenseTitleEN;
            this.WithHoldingTaxTitleTH = withHoldingTaxTitleTH;
            this.WithHoldingTaxTitleEN = withHoldingTaxTitleEN;
        }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets ShowWithHolding
        /// </summary>
        [DataMember(Name = "showWithHolding", EmitDefaultValue = true)]
        public bool ShowWithHolding { get; set; }

        /// <summary>
        /// Gets or Sets InvoicePrefix
        /// </summary>
        [DataMember(Name = "invoicePrefix", IsRequired = true, EmitDefaultValue = false)]
        public string InvoicePrefix { get; set; }

        /// <summary>
        /// Gets or Sets QuotationPrefix
        /// </summary>
        [DataMember(Name = "quotationPrefix", IsRequired = true, EmitDefaultValue = false)]
        public string QuotationPrefix { get; set; }

        /// <summary>
        /// Gets or Sets BillingNotePrefix
        /// </summary>
        [DataMember(Name = "billingNotePrefix", IsRequired = true, EmitDefaultValue = false)]
        public string BillingNotePrefix { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptPrefix
        /// </summary>
        [DataMember(Name = "receiptPrefix", IsRequired = true, EmitDefaultValue = false)]
        public string ReceiptPrefix { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderPrefix
        /// </summary>
        [DataMember(Name = "purchaseOrderPrefix", IsRequired = true, EmitDefaultValue = false)]
        public string PurchaseOrderPrefix { get; set; }

        /// <summary>
        /// Gets or Sets CashInvoicePrefix
        /// </summary>
        [DataMember(Name = "cashInvoicePrefix", IsRequired = true, EmitDefaultValue = false)]
        public string CashInvoicePrefix { get; set; }

        /// <summary>
        /// Gets or Sets ReceivableInvoicePrefix
        /// </summary>
        [DataMember(Name = "receivableInvoicePrefix", IsRequired = true, EmitDefaultValue = false)]
        public string ReceivableInvoicePrefix { get; set; }

        /// <summary>
        /// Gets or Sets CashInvoiceStartingNumber
        /// </summary>
        [DataMember(Name = "cashInvoiceStartingNumber", EmitDefaultValue = false)]
        public long CashInvoiceStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptStartingNumber
        /// </summary>
        [DataMember(Name = "receiptStartingNumber", EmitDefaultValue = false)]
        public long ReceiptStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets QuotationStartingNumber
        /// </summary>
        [DataMember(Name = "quotationStartingNumber", EmitDefaultValue = false)]
        public long QuotationStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets BillingNoteStartingNumber
        /// </summary>
        [DataMember(Name = "billingNoteStartingNumber", EmitDefaultValue = false)]
        public long BillingNoteStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderStartingNumber
        /// </summary>
        [DataMember(Name = "purchaseOrderStartingNumber", EmitDefaultValue = false)]
        public long PurchaseOrderStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderTitleEN
        /// </summary>
        [DataMember(Name = "purchaseOrderTitleEN", IsRequired = true, EmitDefaultValue = false)]
        public string PurchaseOrderTitleEN { get; set; }

        /// <summary>
        /// Gets or Sets QuotationTitleEN
        /// </summary>
        [DataMember(Name = "quotationTitleEN", IsRequired = true, EmitDefaultValue = false)]
        public string QuotationTitleEN { get; set; }

        /// <summary>
        /// Gets or Sets BillingNoteTitleEN
        /// </summary>
        [DataMember(Name = "billingNoteTitleEN", IsRequired = true, EmitDefaultValue = false)]
        public string BillingNoteTitleEN { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTitleEN
        /// </summary>
        [DataMember(Name = "invoiceTitleEN", IsRequired = true, EmitDefaultValue = false)]
        public string InvoiceTitleEN { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptTitleEN
        /// </summary>
        [DataMember(Name = "receiptTitleEN", IsRequired = true, EmitDefaultValue = false)]
        public string ReceiptTitleEN { get; set; }

        /// <summary>
        /// Gets or Sets PaymentSlipTitleEN
        /// </summary>
        [DataMember(Name = "paymentSlipTitleEN", IsRequired = true, EmitDefaultValue = false)]
        public string PaymentSlipTitleEN { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderTitleTH
        /// </summary>
        [DataMember(Name = "purchaseOrderTitleTH", IsRequired = true, EmitDefaultValue = false)]
        public string PurchaseOrderTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets QuotationTitleTH
        /// </summary>
        [DataMember(Name = "quotationTitleTH", IsRequired = true, EmitDefaultValue = false)]
        public string QuotationTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets BillingNoteTitleTH
        /// </summary>
        [DataMember(Name = "billingNoteTitleTH", IsRequired = true, EmitDefaultValue = false)]
        public string BillingNoteTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTitleTH
        /// </summary>
        [DataMember(Name = "invoiceTitleTH", IsRequired = true, EmitDefaultValue = false)]
        public string InvoiceTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptTitleTH
        /// </summary>
        [DataMember(Name = "receiptTitleTH", IsRequired = true, EmitDefaultValue = false)]
        public string ReceiptTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets PaymentSlipTitleTH
        /// </summary>
        [DataMember(Name = "paymentSlipTitleTH", IsRequired = true, EmitDefaultValue = false)]
        public string PaymentSlipTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets TermsAgreement
        /// </summary>
        [DataMember(Name = "termsAgreement", EmitDefaultValue = true)]
        public string TermsAgreement { get; set; }

        /// <summary>
        /// Gets or Sets DefaultRemarks
        /// </summary>
        [DataMember(Name = "defaultRemarks", EmitDefaultValue = true)]
        public string DefaultRemarks { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceStartingNumber
        /// </summary>
        [DataMember(Name = "invoiceStartingNumber", EmitDefaultValue = false)]
        public long InvoiceStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets CashInvoiceTitleEN
        /// </summary>
        [DataMember(Name = "cashInvoiceTitleEN", IsRequired = true, EmitDefaultValue = false)]
        public string CashInvoiceTitleEN { get; set; }

        /// <summary>
        /// Gets or Sets CashInvoiceTitleTH
        /// </summary>
        [DataMember(Name = "cashInvoiceTitleTH", IsRequired = true, EmitDefaultValue = false)]
        public string CashInvoiceTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets ReceivableInvoiceTitleTH
        /// </summary>
        [DataMember(Name = "receivableInvoiceTitleTH", IsRequired = true, EmitDefaultValue = false)]
        public string ReceivableInvoiceTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets ReceivableInvoiceTitleEN
        /// </summary>
        [DataMember(Name = "receivableInvoiceTitleEN", IsRequired = true, EmitDefaultValue = false)]
        public string ReceivableInvoiceTitleEN { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderStartingYear
        /// </summary>
        [DataMember(Name = "purchaseOrderStartingYear", EmitDefaultValue = true)]
        public int? PurchaseOrderStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets QuotationStartingYear
        /// </summary>
        [DataMember(Name = "quotationStartingYear", EmitDefaultValue = true)]
        public int? QuotationStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets BillingNoteStartingYear
        /// </summary>
        [DataMember(Name = "billingNoteStartingYear", EmitDefaultValue = true)]
        public int? BillingNoteStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceStartingYear
        /// </summary>
        [DataMember(Name = "invoiceStartingYear", EmitDefaultValue = true)]
        public int? InvoiceStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets CashInvoiceStartingYear
        /// </summary>
        [DataMember(Name = "cashInvoiceStartingYear", EmitDefaultValue = true)]
        public int? CashInvoiceStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptStartingYear
        /// </summary>
        [DataMember(Name = "receiptStartingYear", EmitDefaultValue = true)]
        public int? ReceiptStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderStartingMonth
        /// </summary>
        [DataMember(Name = "purchaseOrderStartingMonth", EmitDefaultValue = true)]
        public int? PurchaseOrderStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets QuotationStartingMonth
        /// </summary>
        [DataMember(Name = "quotationStartingMonth", EmitDefaultValue = true)]
        public int? QuotationStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets BillingNoteStartingMonth
        /// </summary>
        [DataMember(Name = "billingNoteStartingMonth", EmitDefaultValue = true)]
        public int? BillingNoteStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceStartingMonth
        /// </summary>
        [DataMember(Name = "invoiceStartingMonth", EmitDefaultValue = true)]
        public int? InvoiceStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets CashInvoiceStartingMonth
        /// </summary>
        [DataMember(Name = "cashInvoiceStartingMonth", EmitDefaultValue = true)]
        public int? CashInvoiceStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptStartingMonth
        /// </summary>
        [DataMember(Name = "receiptStartingMonth", EmitDefaultValue = true)]
        public int? ReceiptStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets SettingsInitiated
        /// </summary>
        [DataMember(Name = "settingsInitiated", EmitDefaultValue = true)]
        public bool SettingsInitiated { get; set; }

        /// <summary>
        /// Gets or Sets RunningNumberSettingsModifiedOn
        /// </summary>
        [DataMember(Name = "runningNumberSettingsModifiedOn", EmitDefaultValue = true)]
        public DateTime? RunningNumberSettingsModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets WithHoldingTaxPrefix
        /// </summary>
        [DataMember(Name = "withHoldingTaxPrefix", IsRequired = true, EmitDefaultValue = false)]
        public string WithHoldingTaxPrefix { get; set; }

        /// <summary>
        /// Gets or Sets WithHoldingTaxStartingNumber
        /// </summary>
        [DataMember(Name = "withHoldingTaxStartingNumber", EmitDefaultValue = false)]
        public int WithHoldingTaxStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets WithHoldingTaxStartingMonth
        /// </summary>
        [DataMember(Name = "withHoldingTaxStartingMonth", EmitDefaultValue = true)]
        public int? WithHoldingTaxStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets WithHoldingTaxStartingYear
        /// </summary>
        [DataMember(Name = "withHoldingTaxStartingYear", EmitDefaultValue = true)]
        public int? WithHoldingTaxStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets PrintColor
        /// </summary>
        [DataMember(Name = "printColor", EmitDefaultValue = true)]
        public bool PrintColor { get; set; }

        /// <summary>
        /// Gets or Sets PrintOneInvoice
        /// </summary>
        [DataMember(Name = "printOneInvoice", EmitDefaultValue = true)]
        public bool PrintOneInvoice { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name = "remarks", EmitDefaultValue = true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets EmailMessageTemplate
        /// </summary>
        [DataMember(Name = "emailMessageTemplate", EmitDefaultValue = true)]
        public string EmailMessageTemplate { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePrefix
        /// </summary>
        [DataMember(Name = "purchasePrefix", IsRequired = true, EmitDefaultValue = false)]
        public string PurchasePrefix { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseStartingNumber
        /// </summary>
        [DataMember(Name = "purchaseStartingNumber", EmitDefaultValue = false)]
        public long PurchaseStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseTitleEN
        /// </summary>
        [DataMember(Name = "purchaseTitleEN", IsRequired = true, EmitDefaultValue = false)]
        public string PurchaseTitleEN { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseTitleTH
        /// </summary>
        [DataMember(Name = "purchaseTitleTH", IsRequired = true, EmitDefaultValue = false)]
        public string PurchaseTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseStartingYear
        /// </summary>
        [DataMember(Name = "purchaseStartingYear", EmitDefaultValue = true)]
        public int? PurchaseStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseStartingMonth
        /// </summary>
        [DataMember(Name = "purchaseStartingMonth", EmitDefaultValue = true)]
        public int? PurchaseStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets AdjustInventoryPrefix
        /// </summary>
        [DataMember(Name = "adjustInventoryPrefix", IsRequired = true, EmitDefaultValue = false)]
        public string AdjustInventoryPrefix { get; set; }

        /// <summary>
        /// Gets or Sets AdjustInventoryStartingNumber
        /// </summary>
        [DataMember(Name = "adjustInventoryStartingNumber", EmitDefaultValue = false)]
        public int AdjustInventoryStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets AdjustInventoryStartingMonth
        /// </summary>
        [DataMember(Name = "adjustInventoryStartingMonth", EmitDefaultValue = true)]
        public int? AdjustInventoryStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets AdjustInventoryStartingYear
        /// </summary>
        [DataMember(Name = "adjustInventoryStartingYear", EmitDefaultValue = true)]
        public int? AdjustInventoryStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets ExpensePrefix
        /// </summary>
        [DataMember(Name = "expensePrefix", IsRequired = true, EmitDefaultValue = false)]
        public string ExpensePrefix { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseStartingNumber
        /// </summary>
        [DataMember(Name = "expenseStartingNumber", EmitDefaultValue = false)]
        public int ExpenseStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseStartingMonth
        /// </summary>
        [DataMember(Name = "expenseStartingMonth", EmitDefaultValue = true)]
        public int? ExpenseStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseStartingYear
        /// </summary>
        [DataMember(Name = "expenseStartingYear", EmitDefaultValue = true)]
        public int? ExpenseStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets PaymentSlipPrefix
        /// </summary>
        [DataMember(Name = "paymentSlipPrefix", IsRequired = true, EmitDefaultValue = false)]
        public string PaymentSlipPrefix { get; set; }

        /// <summary>
        /// Gets or Sets PaymentSlipStartingNumber
        /// </summary>
        [DataMember(Name = "paymentSlipStartingNumber", EmitDefaultValue = false)]
        public int PaymentSlipStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets PaymentSlipStartingYear
        /// </summary>
        [DataMember(Name = "paymentSlipStartingYear", EmitDefaultValue = true)]
        public int? PaymentSlipStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets PaymentSlipStartingMonth
        /// </summary>
        [DataMember(Name = "paymentSlipStartingMonth", EmitDefaultValue = true)]
        public int? PaymentSlipStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets CashInvoiceRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "cashInvoiceRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? CashInvoiceRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "purchaseOrderRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? PurchaseOrderRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets QuotationRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "quotationRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? QuotationRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets BillingNoteRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "billingNoteRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? BillingNoteRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "invoiceRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? InvoiceRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "purchaseRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? PurchaseRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets ReceivableInvoiceRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "receivableInvoiceRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? ReceivableInvoiceRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets PaymentSlipRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "paymentSlipRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? PaymentSlipRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets RubberStampUrl
        /// </summary>
        [DataMember(Name = "rubberStampUrl", EmitDefaultValue = true)]
        public string RubberStampUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreditNotePrefix
        /// </summary>
        [DataMember(Name = "creditNotePrefix", IsRequired = true, EmitDefaultValue = false)]
        public string CreditNotePrefix { get; set; }

        /// <summary>
        /// Gets or Sets CreditNoteStartingNumber
        /// </summary>
        [DataMember(Name = "creditNoteStartingNumber", EmitDefaultValue = false)]
        public int CreditNoteStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets CreditNoteStartingMonth
        /// </summary>
        [DataMember(Name = "creditNoteStartingMonth", EmitDefaultValue = true)]
        public int? CreditNoteStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets CreditNoteStartingYear
        /// </summary>
        [DataMember(Name = "creditNoteStartingYear", EmitDefaultValue = true)]
        public int? CreditNoteStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets CreditNoteRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "creditNoteRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? CreditNoteRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets CreditNoteTitleEN
        /// </summary>
        [DataMember(Name = "creditNoteTitleEN", IsRequired = true, EmitDefaultValue = false)]
        public string CreditNoteTitleEN { get; set; }

        /// <summary>
        /// Gets or Sets CreditNoteTitleTH
        /// </summary>
        [DataMember(Name = "creditNoteTitleTH", IsRequired = true, EmitDefaultValue = false)]
        public string CreditNoteTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets DebitNotePrefix
        /// </summary>
        [DataMember(Name = "debitNotePrefix", IsRequired = true, EmitDefaultValue = false)]
        public string DebitNotePrefix { get; set; }

        /// <summary>
        /// Gets or Sets DebitNoteStartingNumber
        /// </summary>
        [DataMember(Name = "debitNoteStartingNumber", EmitDefaultValue = false)]
        public int DebitNoteStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets DebitNoteStartingMonth
        /// </summary>
        [DataMember(Name = "debitNoteStartingMonth", EmitDefaultValue = true)]
        public int? DebitNoteStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets DebitNoteStartingYear
        /// </summary>
        [DataMember(Name = "debitNoteStartingYear", EmitDefaultValue = true)]
        public int? DebitNoteStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets DebitNoteRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "debitNoteRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? DebitNoteRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets DebitNoteTitleEN
        /// </summary>
        [DataMember(Name = "debitNoteTitleEN", IsRequired = true, EmitDefaultValue = false)]
        public string DebitNoteTitleEN { get; set; }

        /// <summary>
        /// Gets or Sets DebitNoteTitleTH
        /// </summary>
        [DataMember(Name = "debitNoteTitleTH", IsRequired = true, EmitDefaultValue = false)]
        public string DebitNoteTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "receiptRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? ReceiptRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets ReceivableInvoiceStartingNumber
        /// </summary>
        [DataMember(Name = "receivableInvoiceStartingNumber", EmitDefaultValue = false)]
        public int ReceivableInvoiceStartingNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReceivableInvoiceStartingMonth
        /// </summary>
        [DataMember(Name = "receivableInvoiceStartingMonth", EmitDefaultValue = true)]
        public int? ReceivableInvoiceStartingMonth { get; set; }

        /// <summary>
        /// Gets or Sets ReceivableInvoiceStartingYear
        /// </summary>
        [DataMember(Name = "receivableInvoiceStartingYear", EmitDefaultValue = true)]
        public int? ReceivableInvoiceStartingYear { get; set; }

        /// <summary>
        /// Gets or Sets UsePartialReceipt
        /// </summary>
        [DataMember(Name = "usePartialReceipt", EmitDefaultValue = true)]
        public bool UsePartialReceipt { get; set; }

        /// <summary>
        /// Gets or Sets UseCashInvoice
        /// </summary>
        [DataMember(Name = "useCashInvoice", EmitDefaultValue = true)]
        public bool UseCashInvoice { get; set; }

        /// <summary>
        /// Gets or Sets UseShortCashInvoice
        /// </summary>
        [DataMember(Name = "useShortCashInvoice", EmitDefaultValue = true)]
        public bool UseShortCashInvoice { get; set; }

        /// <summary>
        /// Gets or Sets JournalVoucherPrefix
        /// </summary>
        [DataMember(Name = "journalVoucherPrefix", IsRequired = true, EmitDefaultValue = false)]
        public string JournalVoucherPrefix { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseVoucherPrefix
        /// </summary>
        [DataMember(Name = "purchaseVoucherPrefix", IsRequired = true, EmitDefaultValue = false)]
        public string PurchaseVoucherPrefix { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseVoucherRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "purchaseVoucherRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? PurchaseVoucherRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets SalesVoucherPrefix
        /// </summary>
        [DataMember(Name = "salesVoucherPrefix", IsRequired = true, EmitDefaultValue = false)]
        public string SalesVoucherPrefix { get; set; }

        /// <summary>
        /// Gets or Sets SalesVoucherRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "salesVoucherRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? SalesVoucherRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets PaymentVoucherPrefix
        /// </summary>
        [DataMember(Name = "paymentVoucherPrefix", IsRequired = true, EmitDefaultValue = false)]
        public string PaymentVoucherPrefix { get; set; }

        /// <summary>
        /// Gets or Sets PaymentVoucherRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "paymentVoucherRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? PaymentVoucherRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedVoucherPrefix
        /// </summary>
        [DataMember(Name = "receivedVoucherPrefix", IsRequired = true, EmitDefaultValue = false)]
        public string ReceivedVoucherPrefix { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedVoucherRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "receivedVoucherRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? ReceivedVoucherRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets ConversionBalancePrefix
        /// </summary>
        [DataMember(Name = "conversionBalancePrefix", IsRequired = true, EmitDefaultValue = false)]
        public string ConversionBalancePrefix { get; set; }

        /// <summary>
        /// Gets or Sets ConversionBalanceRunningNumberModifiedOn
        /// </summary>
        [DataMember(Name = "conversionBalanceRunningNumberModifiedOn", EmitDefaultValue = true)]
        public DateTime? ConversionBalanceRunningNumberModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets ETaxEmail
        /// </summary>
        [DataMember(Name = "eTaxEmail", EmitDefaultValue = true)]
        public string ETaxEmail { get; set; }

        /// <summary>
        /// Gets or Sets UseBillingNoteAccountingRule
        /// </summary>
        [DataMember(Name = "useBillingNoteAccountingRule", EmitDefaultValue = true)]
        public bool UseBillingNoteAccountingRule { get; set; }

        /// <summary>
        /// Gets or Sets BillingNoteAccountingRuleModifiedOn
        /// </summary>
        [DataMember(Name = "billingNoteAccountingRuleModifiedOn", EmitDefaultValue = true)]
        public DateTime? BillingNoteAccountingRuleModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets TemplateFontSize
        /// </summary>
        [DataMember(Name = "templateFontSize", EmitDefaultValue = true)]
        public decimal? TemplateFontSize { get; set; }

        /// <summary>
        /// Gets or Sets UseMultiCurrency
        /// </summary>
        [DataMember(Name = "useMultiCurrency", EmitDefaultValue = true)]
        public bool UseMultiCurrency { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseTitleTH
        /// </summary>
        [DataMember(Name = "expenseTitleTH", EmitDefaultValue = true)]
        public string ExpenseTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseTitleEN
        /// </summary>
        [DataMember(Name = "expenseTitleEN", EmitDefaultValue = true)]
        public string ExpenseTitleEN { get; set; }

        /// <summary>
        /// Gets or Sets WithHoldingTaxTitleTH
        /// </summary>
        [DataMember(Name = "withHoldingTaxTitleTH", EmitDefaultValue = true)]
        public string WithHoldingTaxTitleTH { get; set; }

        /// <summary>
        /// Gets or Sets WithHoldingTaxTitleEN
        /// </summary>
        [DataMember(Name = "withHoldingTaxTitleEN", EmitDefaultValue = true)]
        public string WithHoldingTaxTitleEN { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyPreferences {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  ShowWithHolding: ").Append(ShowWithHolding).Append("\n");
            sb.Append("  InvoicePrefix: ").Append(InvoicePrefix).Append("\n");
            sb.Append("  QuotationPrefix: ").Append(QuotationPrefix).Append("\n");
            sb.Append("  BillingNotePrefix: ").Append(BillingNotePrefix).Append("\n");
            sb.Append("  ReceiptPrefix: ").Append(ReceiptPrefix).Append("\n");
            sb.Append("  PurchaseOrderPrefix: ").Append(PurchaseOrderPrefix).Append("\n");
            sb.Append("  CashInvoicePrefix: ").Append(CashInvoicePrefix).Append("\n");
            sb.Append("  ReceivableInvoicePrefix: ").Append(ReceivableInvoicePrefix).Append("\n");
            sb.Append("  CashInvoiceStartingNumber: ").Append(CashInvoiceStartingNumber).Append("\n");
            sb.Append("  ReceiptStartingNumber: ").Append(ReceiptStartingNumber).Append("\n");
            sb.Append("  QuotationStartingNumber: ").Append(QuotationStartingNumber).Append("\n");
            sb.Append("  BillingNoteStartingNumber: ").Append(BillingNoteStartingNumber).Append("\n");
            sb.Append("  PurchaseOrderStartingNumber: ").Append(PurchaseOrderStartingNumber).Append("\n");
            sb.Append("  PurchaseOrderTitleEN: ").Append(PurchaseOrderTitleEN).Append("\n");
            sb.Append("  QuotationTitleEN: ").Append(QuotationTitleEN).Append("\n");
            sb.Append("  BillingNoteTitleEN: ").Append(BillingNoteTitleEN).Append("\n");
            sb.Append("  InvoiceTitleEN: ").Append(InvoiceTitleEN).Append("\n");
            sb.Append("  ReceiptTitleEN: ").Append(ReceiptTitleEN).Append("\n");
            sb.Append("  PaymentSlipTitleEN: ").Append(PaymentSlipTitleEN).Append("\n");
            sb.Append("  PurchaseOrderTitleTH: ").Append(PurchaseOrderTitleTH).Append("\n");
            sb.Append("  QuotationTitleTH: ").Append(QuotationTitleTH).Append("\n");
            sb.Append("  BillingNoteTitleTH: ").Append(BillingNoteTitleTH).Append("\n");
            sb.Append("  InvoiceTitleTH: ").Append(InvoiceTitleTH).Append("\n");
            sb.Append("  ReceiptTitleTH: ").Append(ReceiptTitleTH).Append("\n");
            sb.Append("  PaymentSlipTitleTH: ").Append(PaymentSlipTitleTH).Append("\n");
            sb.Append("  BusinessType: ").Append(BusinessType).Append("\n");
            sb.Append("  TermsAgreement: ").Append(TermsAgreement).Append("\n");
            sb.Append("  DefaultRemarks: ").Append(DefaultRemarks).Append("\n");
            sb.Append("  InvoiceStartingNumber: ").Append(InvoiceStartingNumber).Append("\n");
            sb.Append("  CashInvoiceTitleEN: ").Append(CashInvoiceTitleEN).Append("\n");
            sb.Append("  CashInvoiceTitleTH: ").Append(CashInvoiceTitleTH).Append("\n");
            sb.Append("  ReceivableInvoiceTitleTH: ").Append(ReceivableInvoiceTitleTH).Append("\n");
            sb.Append("  ReceivableInvoiceTitleEN: ").Append(ReceivableInvoiceTitleEN).Append("\n");
            sb.Append("  RunningNumberType: ").Append(RunningNumberType).Append("\n");
            sb.Append("  PurchaseOrderStartingYear: ").Append(PurchaseOrderStartingYear).Append("\n");
            sb.Append("  QuotationStartingYear: ").Append(QuotationStartingYear).Append("\n");
            sb.Append("  BillingNoteStartingYear: ").Append(BillingNoteStartingYear).Append("\n");
            sb.Append("  InvoiceStartingYear: ").Append(InvoiceStartingYear).Append("\n");
            sb.Append("  CashInvoiceStartingYear: ").Append(CashInvoiceStartingYear).Append("\n");
            sb.Append("  ReceiptStartingYear: ").Append(ReceiptStartingYear).Append("\n");
            sb.Append("  PurchaseOrderStartingMonth: ").Append(PurchaseOrderStartingMonth).Append("\n");
            sb.Append("  QuotationStartingMonth: ").Append(QuotationStartingMonth).Append("\n");
            sb.Append("  BillingNoteStartingMonth: ").Append(BillingNoteStartingMonth).Append("\n");
            sb.Append("  InvoiceStartingMonth: ").Append(InvoiceStartingMonth).Append("\n");
            sb.Append("  CashInvoiceStartingMonth: ").Append(CashInvoiceStartingMonth).Append("\n");
            sb.Append("  ReceiptStartingMonth: ").Append(ReceiptStartingMonth).Append("\n");
            sb.Append("  SettingsInitiated: ").Append(SettingsInitiated).Append("\n");
            sb.Append("  RunningNumberSettingsModifiedOn: ").Append(RunningNumberSettingsModifiedOn).Append("\n");
            sb.Append("  WithHoldingTaxPrefix: ").Append(WithHoldingTaxPrefix).Append("\n");
            sb.Append("  WithHoldingTaxStartingNumber: ").Append(WithHoldingTaxStartingNumber).Append("\n");
            sb.Append("  WithHoldingTaxStartingMonth: ").Append(WithHoldingTaxStartingMonth).Append("\n");
            sb.Append("  WithHoldingTaxStartingYear: ").Append(WithHoldingTaxStartingYear).Append("\n");
            sb.Append("  DocumentTemplates: ").Append(DocumentTemplates).Append("\n");
            sb.Append("  PrintColor: ").Append(PrintColor).Append("\n");
            sb.Append("  TemplateFont: ").Append(TemplateFont).Append("\n");
            sb.Append("  PrintOneInvoice: ").Append(PrintOneInvoice).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  EmailMessageTemplate: ").Append(EmailMessageTemplate).Append("\n");
            sb.Append("  PurchasePrefix: ").Append(PurchasePrefix).Append("\n");
            sb.Append("  PurchaseStartingNumber: ").Append(PurchaseStartingNumber).Append("\n");
            sb.Append("  PurchaseTitleEN: ").Append(PurchaseTitleEN).Append("\n");
            sb.Append("  PurchaseTitleTH: ").Append(PurchaseTitleTH).Append("\n");
            sb.Append("  PurchaseStartingYear: ").Append(PurchaseStartingYear).Append("\n");
            sb.Append("  PurchaseStartingMonth: ").Append(PurchaseStartingMonth).Append("\n");
            sb.Append("  AdjustInventoryPrefix: ").Append(AdjustInventoryPrefix).Append("\n");
            sb.Append("  AdjustInventoryStartingNumber: ").Append(AdjustInventoryStartingNumber).Append("\n");
            sb.Append("  AdjustInventoryStartingMonth: ").Append(AdjustInventoryStartingMonth).Append("\n");
            sb.Append("  AdjustInventoryStartingYear: ").Append(AdjustInventoryStartingYear).Append("\n");
            sb.Append("  ExpensePrefix: ").Append(ExpensePrefix).Append("\n");
            sb.Append("  ExpenseStartingNumber: ").Append(ExpenseStartingNumber).Append("\n");
            sb.Append("  ExpenseStartingMonth: ").Append(ExpenseStartingMonth).Append("\n");
            sb.Append("  ExpenseStartingYear: ").Append(ExpenseStartingYear).Append("\n");
            sb.Append("  PaymentSlipPrefix: ").Append(PaymentSlipPrefix).Append("\n");
            sb.Append("  PaymentSlipStartingNumber: ").Append(PaymentSlipStartingNumber).Append("\n");
            sb.Append("  PaymentSlipStartingYear: ").Append(PaymentSlipStartingYear).Append("\n");
            sb.Append("  PaymentSlipStartingMonth: ").Append(PaymentSlipStartingMonth).Append("\n");
            sb.Append("  CashInvoiceRunningNumberModifiedOn: ").Append(CashInvoiceRunningNumberModifiedOn).Append("\n");
            sb.Append("  PurchaseOrderRunningNumberModifiedOn: ").Append(PurchaseOrderRunningNumberModifiedOn).Append("\n");
            sb.Append("  QuotationRunningNumberModifiedOn: ").Append(QuotationRunningNumberModifiedOn).Append("\n");
            sb.Append("  BillingNoteRunningNumberModifiedOn: ").Append(BillingNoteRunningNumberModifiedOn).Append("\n");
            sb.Append("  InvoiceRunningNumberModifiedOn: ").Append(InvoiceRunningNumberModifiedOn).Append("\n");
            sb.Append("  PurchaseRunningNumberModifiedOn: ").Append(PurchaseRunningNumberModifiedOn).Append("\n");
            sb.Append("  ReceivableInvoiceRunningNumberModifiedOn: ").Append(ReceivableInvoiceRunningNumberModifiedOn).Append("\n");
            sb.Append("  PaymentSlipRunningNumberModifiedOn: ").Append(PaymentSlipRunningNumberModifiedOn).Append("\n");
            sb.Append("  RubberStampUrl: ").Append(RubberStampUrl).Append("\n");
            sb.Append("  CreditNotePrefix: ").Append(CreditNotePrefix).Append("\n");
            sb.Append("  CreditNoteStartingNumber: ").Append(CreditNoteStartingNumber).Append("\n");
            sb.Append("  CreditNoteStartingMonth: ").Append(CreditNoteStartingMonth).Append("\n");
            sb.Append("  CreditNoteStartingYear: ").Append(CreditNoteStartingYear).Append("\n");
            sb.Append("  CreditNoteRunningNumberModifiedOn: ").Append(CreditNoteRunningNumberModifiedOn).Append("\n");
            sb.Append("  CreditNoteTitleEN: ").Append(CreditNoteTitleEN).Append("\n");
            sb.Append("  CreditNoteTitleTH: ").Append(CreditNoteTitleTH).Append("\n");
            sb.Append("  DebitNotePrefix: ").Append(DebitNotePrefix).Append("\n");
            sb.Append("  DebitNoteStartingNumber: ").Append(DebitNoteStartingNumber).Append("\n");
            sb.Append("  DebitNoteStartingMonth: ").Append(DebitNoteStartingMonth).Append("\n");
            sb.Append("  DebitNoteStartingYear: ").Append(DebitNoteStartingYear).Append("\n");
            sb.Append("  DebitNoteRunningNumberModifiedOn: ").Append(DebitNoteRunningNumberModifiedOn).Append("\n");
            sb.Append("  DebitNoteTitleEN: ").Append(DebitNoteTitleEN).Append("\n");
            sb.Append("  DebitNoteTitleTH: ").Append(DebitNoteTitleTH).Append("\n");
            sb.Append("  ReceiptRunningNumberModifiedOn: ").Append(ReceiptRunningNumberModifiedOn).Append("\n");
            sb.Append("  ReceivableInvoiceStartingNumber: ").Append(ReceivableInvoiceStartingNumber).Append("\n");
            sb.Append("  ReceivableInvoiceStartingMonth: ").Append(ReceivableInvoiceStartingMonth).Append("\n");
            sb.Append("  ReceivableInvoiceStartingYear: ").Append(ReceivableInvoiceStartingYear).Append("\n");
            sb.Append("  UsePartialReceipt: ").Append(UsePartialReceipt).Append("\n");
            sb.Append("  UseCashInvoice: ").Append(UseCashInvoice).Append("\n");
            sb.Append("  UseShortCashInvoice: ").Append(UseShortCashInvoice).Append("\n");
            sb.Append("  GeneralLedgerRunningNumberType: ").Append(GeneralLedgerRunningNumberType).Append("\n");
            sb.Append("  JournalVoucherPrefix: ").Append(JournalVoucherPrefix).Append("\n");
            sb.Append("  PurchaseVoucherPrefix: ").Append(PurchaseVoucherPrefix).Append("\n");
            sb.Append("  PurchaseVoucherRunningNumberModifiedOn: ").Append(PurchaseVoucherRunningNumberModifiedOn).Append("\n");
            sb.Append("  SalesVoucherPrefix: ").Append(SalesVoucherPrefix).Append("\n");
            sb.Append("  SalesVoucherRunningNumberModifiedOn: ").Append(SalesVoucherRunningNumberModifiedOn).Append("\n");
            sb.Append("  PaymentVoucherPrefix: ").Append(PaymentVoucherPrefix).Append("\n");
            sb.Append("  PaymentVoucherRunningNumberModifiedOn: ").Append(PaymentVoucherRunningNumberModifiedOn).Append("\n");
            sb.Append("  ReceivedVoucherPrefix: ").Append(ReceivedVoucherPrefix).Append("\n");
            sb.Append("  ReceivedVoucherRunningNumberModifiedOn: ").Append(ReceivedVoucherRunningNumberModifiedOn).Append("\n");
            sb.Append("  ConversionBalancePrefix: ").Append(ConversionBalancePrefix).Append("\n");
            sb.Append("  ConversionBalanceRunningNumberModifiedOn: ").Append(ConversionBalanceRunningNumberModifiedOn).Append("\n");
            sb.Append("  ETaxEmail: ").Append(ETaxEmail).Append("\n");
            sb.Append("  ShortCashInvoiceTemplates: ").Append(ShortCashInvoiceTemplates).Append("\n");
            sb.Append("  UseBillingNoteAccountingRule: ").Append(UseBillingNoteAccountingRule).Append("\n");
            sb.Append("  BillingNoteAccountingRuleModifiedOn: ").Append(BillingNoteAccountingRuleModifiedOn).Append("\n");
            sb.Append("  TemplateFontSize: ").Append(TemplateFontSize).Append("\n");
            sb.Append("  UseMultiCurrency: ").Append(UseMultiCurrency).Append("\n");
            sb.Append("  ExpenseTitleTH: ").Append(ExpenseTitleTH).Append("\n");
            sb.Append("  ExpenseTitleEN: ").Append(ExpenseTitleEN).Append("\n");
            sb.Append("  WithHoldingTaxTitleTH: ").Append(WithHoldingTaxTitleTH).Append("\n");
            sb.Append("  WithHoldingTaxTitleEN: ").Append(WithHoldingTaxTitleEN).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyPreferences);
        }

        /// <summary>
        /// Returns true if CompanyPreferences instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyPreferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyPreferences input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.ShowWithHolding == input.ShowWithHolding ||
                    this.ShowWithHolding.Equals(input.ShowWithHolding)
                ) && 
                (
                    this.InvoicePrefix == input.InvoicePrefix ||
                    (this.InvoicePrefix != null &&
                    this.InvoicePrefix.Equals(input.InvoicePrefix))
                ) && 
                (
                    this.QuotationPrefix == input.QuotationPrefix ||
                    (this.QuotationPrefix != null &&
                    this.QuotationPrefix.Equals(input.QuotationPrefix))
                ) && 
                (
                    this.BillingNotePrefix == input.BillingNotePrefix ||
                    (this.BillingNotePrefix != null &&
                    this.BillingNotePrefix.Equals(input.BillingNotePrefix))
                ) && 
                (
                    this.ReceiptPrefix == input.ReceiptPrefix ||
                    (this.ReceiptPrefix != null &&
                    this.ReceiptPrefix.Equals(input.ReceiptPrefix))
                ) && 
                (
                    this.PurchaseOrderPrefix == input.PurchaseOrderPrefix ||
                    (this.PurchaseOrderPrefix != null &&
                    this.PurchaseOrderPrefix.Equals(input.PurchaseOrderPrefix))
                ) && 
                (
                    this.CashInvoicePrefix == input.CashInvoicePrefix ||
                    (this.CashInvoicePrefix != null &&
                    this.CashInvoicePrefix.Equals(input.CashInvoicePrefix))
                ) && 
                (
                    this.ReceivableInvoicePrefix == input.ReceivableInvoicePrefix ||
                    (this.ReceivableInvoicePrefix != null &&
                    this.ReceivableInvoicePrefix.Equals(input.ReceivableInvoicePrefix))
                ) && 
                (
                    this.CashInvoiceStartingNumber == input.CashInvoiceStartingNumber ||
                    this.CashInvoiceStartingNumber.Equals(input.CashInvoiceStartingNumber)
                ) && 
                (
                    this.ReceiptStartingNumber == input.ReceiptStartingNumber ||
                    this.ReceiptStartingNumber.Equals(input.ReceiptStartingNumber)
                ) && 
                (
                    this.QuotationStartingNumber == input.QuotationStartingNumber ||
                    this.QuotationStartingNumber.Equals(input.QuotationStartingNumber)
                ) && 
                (
                    this.BillingNoteStartingNumber == input.BillingNoteStartingNumber ||
                    this.BillingNoteStartingNumber.Equals(input.BillingNoteStartingNumber)
                ) && 
                (
                    this.PurchaseOrderStartingNumber == input.PurchaseOrderStartingNumber ||
                    this.PurchaseOrderStartingNumber.Equals(input.PurchaseOrderStartingNumber)
                ) && 
                (
                    this.PurchaseOrderTitleEN == input.PurchaseOrderTitleEN ||
                    (this.PurchaseOrderTitleEN != null &&
                    this.PurchaseOrderTitleEN.Equals(input.PurchaseOrderTitleEN))
                ) && 
                (
                    this.QuotationTitleEN == input.QuotationTitleEN ||
                    (this.QuotationTitleEN != null &&
                    this.QuotationTitleEN.Equals(input.QuotationTitleEN))
                ) && 
                (
                    this.BillingNoteTitleEN == input.BillingNoteTitleEN ||
                    (this.BillingNoteTitleEN != null &&
                    this.BillingNoteTitleEN.Equals(input.BillingNoteTitleEN))
                ) && 
                (
                    this.InvoiceTitleEN == input.InvoiceTitleEN ||
                    (this.InvoiceTitleEN != null &&
                    this.InvoiceTitleEN.Equals(input.InvoiceTitleEN))
                ) && 
                (
                    this.ReceiptTitleEN == input.ReceiptTitleEN ||
                    (this.ReceiptTitleEN != null &&
                    this.ReceiptTitleEN.Equals(input.ReceiptTitleEN))
                ) && 
                (
                    this.PaymentSlipTitleEN == input.PaymentSlipTitleEN ||
                    (this.PaymentSlipTitleEN != null &&
                    this.PaymentSlipTitleEN.Equals(input.PaymentSlipTitleEN))
                ) && 
                (
                    this.PurchaseOrderTitleTH == input.PurchaseOrderTitleTH ||
                    (this.PurchaseOrderTitleTH != null &&
                    this.PurchaseOrderTitleTH.Equals(input.PurchaseOrderTitleTH))
                ) && 
                (
                    this.QuotationTitleTH == input.QuotationTitleTH ||
                    (this.QuotationTitleTH != null &&
                    this.QuotationTitleTH.Equals(input.QuotationTitleTH))
                ) && 
                (
                    this.BillingNoteTitleTH == input.BillingNoteTitleTH ||
                    (this.BillingNoteTitleTH != null &&
                    this.BillingNoteTitleTH.Equals(input.BillingNoteTitleTH))
                ) && 
                (
                    this.InvoiceTitleTH == input.InvoiceTitleTH ||
                    (this.InvoiceTitleTH != null &&
                    this.InvoiceTitleTH.Equals(input.InvoiceTitleTH))
                ) && 
                (
                    this.ReceiptTitleTH == input.ReceiptTitleTH ||
                    (this.ReceiptTitleTH != null &&
                    this.ReceiptTitleTH.Equals(input.ReceiptTitleTH))
                ) && 
                (
                    this.PaymentSlipTitleTH == input.PaymentSlipTitleTH ||
                    (this.PaymentSlipTitleTH != null &&
                    this.PaymentSlipTitleTH.Equals(input.PaymentSlipTitleTH))
                ) && 
                (
                    this.BusinessType == input.BusinessType ||
                    this.BusinessType.Equals(input.BusinessType)
                ) && 
                (
                    this.TermsAgreement == input.TermsAgreement ||
                    (this.TermsAgreement != null &&
                    this.TermsAgreement.Equals(input.TermsAgreement))
                ) && 
                (
                    this.DefaultRemarks == input.DefaultRemarks ||
                    (this.DefaultRemarks != null &&
                    this.DefaultRemarks.Equals(input.DefaultRemarks))
                ) && 
                (
                    this.InvoiceStartingNumber == input.InvoiceStartingNumber ||
                    this.InvoiceStartingNumber.Equals(input.InvoiceStartingNumber)
                ) && 
                (
                    this.CashInvoiceTitleEN == input.CashInvoiceTitleEN ||
                    (this.CashInvoiceTitleEN != null &&
                    this.CashInvoiceTitleEN.Equals(input.CashInvoiceTitleEN))
                ) && 
                (
                    this.CashInvoiceTitleTH == input.CashInvoiceTitleTH ||
                    (this.CashInvoiceTitleTH != null &&
                    this.CashInvoiceTitleTH.Equals(input.CashInvoiceTitleTH))
                ) && 
                (
                    this.ReceivableInvoiceTitleTH == input.ReceivableInvoiceTitleTH ||
                    (this.ReceivableInvoiceTitleTH != null &&
                    this.ReceivableInvoiceTitleTH.Equals(input.ReceivableInvoiceTitleTH))
                ) && 
                (
                    this.ReceivableInvoiceTitleEN == input.ReceivableInvoiceTitleEN ||
                    (this.ReceivableInvoiceTitleEN != null &&
                    this.ReceivableInvoiceTitleEN.Equals(input.ReceivableInvoiceTitleEN))
                ) && 
                (
                    this.RunningNumberType == input.RunningNumberType ||
                    this.RunningNumberType.Equals(input.RunningNumberType)
                ) && 
                (
                    this.PurchaseOrderStartingYear == input.PurchaseOrderStartingYear ||
                    (this.PurchaseOrderStartingYear != null &&
                    this.PurchaseOrderStartingYear.Equals(input.PurchaseOrderStartingYear))
                ) && 
                (
                    this.QuotationStartingYear == input.QuotationStartingYear ||
                    (this.QuotationStartingYear != null &&
                    this.QuotationStartingYear.Equals(input.QuotationStartingYear))
                ) && 
                (
                    this.BillingNoteStartingYear == input.BillingNoteStartingYear ||
                    (this.BillingNoteStartingYear != null &&
                    this.BillingNoteStartingYear.Equals(input.BillingNoteStartingYear))
                ) && 
                (
                    this.InvoiceStartingYear == input.InvoiceStartingYear ||
                    (this.InvoiceStartingYear != null &&
                    this.InvoiceStartingYear.Equals(input.InvoiceStartingYear))
                ) && 
                (
                    this.CashInvoiceStartingYear == input.CashInvoiceStartingYear ||
                    (this.CashInvoiceStartingYear != null &&
                    this.CashInvoiceStartingYear.Equals(input.CashInvoiceStartingYear))
                ) && 
                (
                    this.ReceiptStartingYear == input.ReceiptStartingYear ||
                    (this.ReceiptStartingYear != null &&
                    this.ReceiptStartingYear.Equals(input.ReceiptStartingYear))
                ) && 
                (
                    this.PurchaseOrderStartingMonth == input.PurchaseOrderStartingMonth ||
                    (this.PurchaseOrderStartingMonth != null &&
                    this.PurchaseOrderStartingMonth.Equals(input.PurchaseOrderStartingMonth))
                ) && 
                (
                    this.QuotationStartingMonth == input.QuotationStartingMonth ||
                    (this.QuotationStartingMonth != null &&
                    this.QuotationStartingMonth.Equals(input.QuotationStartingMonth))
                ) && 
                (
                    this.BillingNoteStartingMonth == input.BillingNoteStartingMonth ||
                    (this.BillingNoteStartingMonth != null &&
                    this.BillingNoteStartingMonth.Equals(input.BillingNoteStartingMonth))
                ) && 
                (
                    this.InvoiceStartingMonth == input.InvoiceStartingMonth ||
                    (this.InvoiceStartingMonth != null &&
                    this.InvoiceStartingMonth.Equals(input.InvoiceStartingMonth))
                ) && 
                (
                    this.CashInvoiceStartingMonth == input.CashInvoiceStartingMonth ||
                    (this.CashInvoiceStartingMonth != null &&
                    this.CashInvoiceStartingMonth.Equals(input.CashInvoiceStartingMonth))
                ) && 
                (
                    this.ReceiptStartingMonth == input.ReceiptStartingMonth ||
                    (this.ReceiptStartingMonth != null &&
                    this.ReceiptStartingMonth.Equals(input.ReceiptStartingMonth))
                ) && 
                (
                    this.SettingsInitiated == input.SettingsInitiated ||
                    this.SettingsInitiated.Equals(input.SettingsInitiated)
                ) && 
                (
                    this.RunningNumberSettingsModifiedOn == input.RunningNumberSettingsModifiedOn ||
                    (this.RunningNumberSettingsModifiedOn != null &&
                    this.RunningNumberSettingsModifiedOn.Equals(input.RunningNumberSettingsModifiedOn))
                ) && 
                (
                    this.WithHoldingTaxPrefix == input.WithHoldingTaxPrefix ||
                    (this.WithHoldingTaxPrefix != null &&
                    this.WithHoldingTaxPrefix.Equals(input.WithHoldingTaxPrefix))
                ) && 
                (
                    this.WithHoldingTaxStartingNumber == input.WithHoldingTaxStartingNumber ||
                    this.WithHoldingTaxStartingNumber.Equals(input.WithHoldingTaxStartingNumber)
                ) && 
                (
                    this.WithHoldingTaxStartingMonth == input.WithHoldingTaxStartingMonth ||
                    (this.WithHoldingTaxStartingMonth != null &&
                    this.WithHoldingTaxStartingMonth.Equals(input.WithHoldingTaxStartingMonth))
                ) && 
                (
                    this.WithHoldingTaxStartingYear == input.WithHoldingTaxStartingYear ||
                    (this.WithHoldingTaxStartingYear != null &&
                    this.WithHoldingTaxStartingYear.Equals(input.WithHoldingTaxStartingYear))
                ) && 
                (
                    this.DocumentTemplates == input.DocumentTemplates ||
                    this.DocumentTemplates.Equals(input.DocumentTemplates)
                ) && 
                (
                    this.PrintColor == input.PrintColor ||
                    this.PrintColor.Equals(input.PrintColor)
                ) && 
                (
                    this.TemplateFont == input.TemplateFont ||
                    this.TemplateFont.Equals(input.TemplateFont)
                ) && 
                (
                    this.PrintOneInvoice == input.PrintOneInvoice ||
                    this.PrintOneInvoice.Equals(input.PrintOneInvoice)
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.EmailMessageTemplate == input.EmailMessageTemplate ||
                    (this.EmailMessageTemplate != null &&
                    this.EmailMessageTemplate.Equals(input.EmailMessageTemplate))
                ) && 
                (
                    this.PurchasePrefix == input.PurchasePrefix ||
                    (this.PurchasePrefix != null &&
                    this.PurchasePrefix.Equals(input.PurchasePrefix))
                ) && 
                (
                    this.PurchaseStartingNumber == input.PurchaseStartingNumber ||
                    this.PurchaseStartingNumber.Equals(input.PurchaseStartingNumber)
                ) && 
                (
                    this.PurchaseTitleEN == input.PurchaseTitleEN ||
                    (this.PurchaseTitleEN != null &&
                    this.PurchaseTitleEN.Equals(input.PurchaseTitleEN))
                ) && 
                (
                    this.PurchaseTitleTH == input.PurchaseTitleTH ||
                    (this.PurchaseTitleTH != null &&
                    this.PurchaseTitleTH.Equals(input.PurchaseTitleTH))
                ) && 
                (
                    this.PurchaseStartingYear == input.PurchaseStartingYear ||
                    (this.PurchaseStartingYear != null &&
                    this.PurchaseStartingYear.Equals(input.PurchaseStartingYear))
                ) && 
                (
                    this.PurchaseStartingMonth == input.PurchaseStartingMonth ||
                    (this.PurchaseStartingMonth != null &&
                    this.PurchaseStartingMonth.Equals(input.PurchaseStartingMonth))
                ) && 
                (
                    this.AdjustInventoryPrefix == input.AdjustInventoryPrefix ||
                    (this.AdjustInventoryPrefix != null &&
                    this.AdjustInventoryPrefix.Equals(input.AdjustInventoryPrefix))
                ) && 
                (
                    this.AdjustInventoryStartingNumber == input.AdjustInventoryStartingNumber ||
                    this.AdjustInventoryStartingNumber.Equals(input.AdjustInventoryStartingNumber)
                ) && 
                (
                    this.AdjustInventoryStartingMonth == input.AdjustInventoryStartingMonth ||
                    (this.AdjustInventoryStartingMonth != null &&
                    this.AdjustInventoryStartingMonth.Equals(input.AdjustInventoryStartingMonth))
                ) && 
                (
                    this.AdjustInventoryStartingYear == input.AdjustInventoryStartingYear ||
                    (this.AdjustInventoryStartingYear != null &&
                    this.AdjustInventoryStartingYear.Equals(input.AdjustInventoryStartingYear))
                ) && 
                (
                    this.ExpensePrefix == input.ExpensePrefix ||
                    (this.ExpensePrefix != null &&
                    this.ExpensePrefix.Equals(input.ExpensePrefix))
                ) && 
                (
                    this.ExpenseStartingNumber == input.ExpenseStartingNumber ||
                    this.ExpenseStartingNumber.Equals(input.ExpenseStartingNumber)
                ) && 
                (
                    this.ExpenseStartingMonth == input.ExpenseStartingMonth ||
                    (this.ExpenseStartingMonth != null &&
                    this.ExpenseStartingMonth.Equals(input.ExpenseStartingMonth))
                ) && 
                (
                    this.ExpenseStartingYear == input.ExpenseStartingYear ||
                    (this.ExpenseStartingYear != null &&
                    this.ExpenseStartingYear.Equals(input.ExpenseStartingYear))
                ) && 
                (
                    this.PaymentSlipPrefix == input.PaymentSlipPrefix ||
                    (this.PaymentSlipPrefix != null &&
                    this.PaymentSlipPrefix.Equals(input.PaymentSlipPrefix))
                ) && 
                (
                    this.PaymentSlipStartingNumber == input.PaymentSlipStartingNumber ||
                    this.PaymentSlipStartingNumber.Equals(input.PaymentSlipStartingNumber)
                ) && 
                (
                    this.PaymentSlipStartingYear == input.PaymentSlipStartingYear ||
                    (this.PaymentSlipStartingYear != null &&
                    this.PaymentSlipStartingYear.Equals(input.PaymentSlipStartingYear))
                ) && 
                (
                    this.PaymentSlipStartingMonth == input.PaymentSlipStartingMonth ||
                    (this.PaymentSlipStartingMonth != null &&
                    this.PaymentSlipStartingMonth.Equals(input.PaymentSlipStartingMonth))
                ) && 
                (
                    this.CashInvoiceRunningNumberModifiedOn == input.CashInvoiceRunningNumberModifiedOn ||
                    (this.CashInvoiceRunningNumberModifiedOn != null &&
                    this.CashInvoiceRunningNumberModifiedOn.Equals(input.CashInvoiceRunningNumberModifiedOn))
                ) && 
                (
                    this.PurchaseOrderRunningNumberModifiedOn == input.PurchaseOrderRunningNumberModifiedOn ||
                    (this.PurchaseOrderRunningNumberModifiedOn != null &&
                    this.PurchaseOrderRunningNumberModifiedOn.Equals(input.PurchaseOrderRunningNumberModifiedOn))
                ) && 
                (
                    this.QuotationRunningNumberModifiedOn == input.QuotationRunningNumberModifiedOn ||
                    (this.QuotationRunningNumberModifiedOn != null &&
                    this.QuotationRunningNumberModifiedOn.Equals(input.QuotationRunningNumberModifiedOn))
                ) && 
                (
                    this.BillingNoteRunningNumberModifiedOn == input.BillingNoteRunningNumberModifiedOn ||
                    (this.BillingNoteRunningNumberModifiedOn != null &&
                    this.BillingNoteRunningNumberModifiedOn.Equals(input.BillingNoteRunningNumberModifiedOn))
                ) && 
                (
                    this.InvoiceRunningNumberModifiedOn == input.InvoiceRunningNumberModifiedOn ||
                    (this.InvoiceRunningNumberModifiedOn != null &&
                    this.InvoiceRunningNumberModifiedOn.Equals(input.InvoiceRunningNumberModifiedOn))
                ) && 
                (
                    this.PurchaseRunningNumberModifiedOn == input.PurchaseRunningNumberModifiedOn ||
                    (this.PurchaseRunningNumberModifiedOn != null &&
                    this.PurchaseRunningNumberModifiedOn.Equals(input.PurchaseRunningNumberModifiedOn))
                ) && 
                (
                    this.ReceivableInvoiceRunningNumberModifiedOn == input.ReceivableInvoiceRunningNumberModifiedOn ||
                    (this.ReceivableInvoiceRunningNumberModifiedOn != null &&
                    this.ReceivableInvoiceRunningNumberModifiedOn.Equals(input.ReceivableInvoiceRunningNumberModifiedOn))
                ) && 
                (
                    this.PaymentSlipRunningNumberModifiedOn == input.PaymentSlipRunningNumberModifiedOn ||
                    (this.PaymentSlipRunningNumberModifiedOn != null &&
                    this.PaymentSlipRunningNumberModifiedOn.Equals(input.PaymentSlipRunningNumberModifiedOn))
                ) && 
                (
                    this.RubberStampUrl == input.RubberStampUrl ||
                    (this.RubberStampUrl != null &&
                    this.RubberStampUrl.Equals(input.RubberStampUrl))
                ) && 
                (
                    this.CreditNotePrefix == input.CreditNotePrefix ||
                    (this.CreditNotePrefix != null &&
                    this.CreditNotePrefix.Equals(input.CreditNotePrefix))
                ) && 
                (
                    this.CreditNoteStartingNumber == input.CreditNoteStartingNumber ||
                    this.CreditNoteStartingNumber.Equals(input.CreditNoteStartingNumber)
                ) && 
                (
                    this.CreditNoteStartingMonth == input.CreditNoteStartingMonth ||
                    (this.CreditNoteStartingMonth != null &&
                    this.CreditNoteStartingMonth.Equals(input.CreditNoteStartingMonth))
                ) && 
                (
                    this.CreditNoteStartingYear == input.CreditNoteStartingYear ||
                    (this.CreditNoteStartingYear != null &&
                    this.CreditNoteStartingYear.Equals(input.CreditNoteStartingYear))
                ) && 
                (
                    this.CreditNoteRunningNumberModifiedOn == input.CreditNoteRunningNumberModifiedOn ||
                    (this.CreditNoteRunningNumberModifiedOn != null &&
                    this.CreditNoteRunningNumberModifiedOn.Equals(input.CreditNoteRunningNumberModifiedOn))
                ) && 
                (
                    this.CreditNoteTitleEN == input.CreditNoteTitleEN ||
                    (this.CreditNoteTitleEN != null &&
                    this.CreditNoteTitleEN.Equals(input.CreditNoteTitleEN))
                ) && 
                (
                    this.CreditNoteTitleTH == input.CreditNoteTitleTH ||
                    (this.CreditNoteTitleTH != null &&
                    this.CreditNoteTitleTH.Equals(input.CreditNoteTitleTH))
                ) && 
                (
                    this.DebitNotePrefix == input.DebitNotePrefix ||
                    (this.DebitNotePrefix != null &&
                    this.DebitNotePrefix.Equals(input.DebitNotePrefix))
                ) && 
                (
                    this.DebitNoteStartingNumber == input.DebitNoteStartingNumber ||
                    this.DebitNoteStartingNumber.Equals(input.DebitNoteStartingNumber)
                ) && 
                (
                    this.DebitNoteStartingMonth == input.DebitNoteStartingMonth ||
                    (this.DebitNoteStartingMonth != null &&
                    this.DebitNoteStartingMonth.Equals(input.DebitNoteStartingMonth))
                ) && 
                (
                    this.DebitNoteStartingYear == input.DebitNoteStartingYear ||
                    (this.DebitNoteStartingYear != null &&
                    this.DebitNoteStartingYear.Equals(input.DebitNoteStartingYear))
                ) && 
                (
                    this.DebitNoteRunningNumberModifiedOn == input.DebitNoteRunningNumberModifiedOn ||
                    (this.DebitNoteRunningNumberModifiedOn != null &&
                    this.DebitNoteRunningNumberModifiedOn.Equals(input.DebitNoteRunningNumberModifiedOn))
                ) && 
                (
                    this.DebitNoteTitleEN == input.DebitNoteTitleEN ||
                    (this.DebitNoteTitleEN != null &&
                    this.DebitNoteTitleEN.Equals(input.DebitNoteTitleEN))
                ) && 
                (
                    this.DebitNoteTitleTH == input.DebitNoteTitleTH ||
                    (this.DebitNoteTitleTH != null &&
                    this.DebitNoteTitleTH.Equals(input.DebitNoteTitleTH))
                ) && 
                (
                    this.ReceiptRunningNumberModifiedOn == input.ReceiptRunningNumberModifiedOn ||
                    (this.ReceiptRunningNumberModifiedOn != null &&
                    this.ReceiptRunningNumberModifiedOn.Equals(input.ReceiptRunningNumberModifiedOn))
                ) && 
                (
                    this.ReceivableInvoiceStartingNumber == input.ReceivableInvoiceStartingNumber ||
                    this.ReceivableInvoiceStartingNumber.Equals(input.ReceivableInvoiceStartingNumber)
                ) && 
                (
                    this.ReceivableInvoiceStartingMonth == input.ReceivableInvoiceStartingMonth ||
                    (this.ReceivableInvoiceStartingMonth != null &&
                    this.ReceivableInvoiceStartingMonth.Equals(input.ReceivableInvoiceStartingMonth))
                ) && 
                (
                    this.ReceivableInvoiceStartingYear == input.ReceivableInvoiceStartingYear ||
                    (this.ReceivableInvoiceStartingYear != null &&
                    this.ReceivableInvoiceStartingYear.Equals(input.ReceivableInvoiceStartingYear))
                ) && 
                (
                    this.UsePartialReceipt == input.UsePartialReceipt ||
                    this.UsePartialReceipt.Equals(input.UsePartialReceipt)
                ) && 
                (
                    this.UseCashInvoice == input.UseCashInvoice ||
                    this.UseCashInvoice.Equals(input.UseCashInvoice)
                ) && 
                (
                    this.UseShortCashInvoice == input.UseShortCashInvoice ||
                    this.UseShortCashInvoice.Equals(input.UseShortCashInvoice)
                ) && 
                (
                    this.GeneralLedgerRunningNumberType == input.GeneralLedgerRunningNumberType ||
                    this.GeneralLedgerRunningNumberType.Equals(input.GeneralLedgerRunningNumberType)
                ) && 
                (
                    this.JournalVoucherPrefix == input.JournalVoucherPrefix ||
                    (this.JournalVoucherPrefix != null &&
                    this.JournalVoucherPrefix.Equals(input.JournalVoucherPrefix))
                ) && 
                (
                    this.PurchaseVoucherPrefix == input.PurchaseVoucherPrefix ||
                    (this.PurchaseVoucherPrefix != null &&
                    this.PurchaseVoucherPrefix.Equals(input.PurchaseVoucherPrefix))
                ) && 
                (
                    this.PurchaseVoucherRunningNumberModifiedOn == input.PurchaseVoucherRunningNumberModifiedOn ||
                    (this.PurchaseVoucherRunningNumberModifiedOn != null &&
                    this.PurchaseVoucherRunningNumberModifiedOn.Equals(input.PurchaseVoucherRunningNumberModifiedOn))
                ) && 
                (
                    this.SalesVoucherPrefix == input.SalesVoucherPrefix ||
                    (this.SalesVoucherPrefix != null &&
                    this.SalesVoucherPrefix.Equals(input.SalesVoucherPrefix))
                ) && 
                (
                    this.SalesVoucherRunningNumberModifiedOn == input.SalesVoucherRunningNumberModifiedOn ||
                    (this.SalesVoucherRunningNumberModifiedOn != null &&
                    this.SalesVoucherRunningNumberModifiedOn.Equals(input.SalesVoucherRunningNumberModifiedOn))
                ) && 
                (
                    this.PaymentVoucherPrefix == input.PaymentVoucherPrefix ||
                    (this.PaymentVoucherPrefix != null &&
                    this.PaymentVoucherPrefix.Equals(input.PaymentVoucherPrefix))
                ) && 
                (
                    this.PaymentVoucherRunningNumberModifiedOn == input.PaymentVoucherRunningNumberModifiedOn ||
                    (this.PaymentVoucherRunningNumberModifiedOn != null &&
                    this.PaymentVoucherRunningNumberModifiedOn.Equals(input.PaymentVoucherRunningNumberModifiedOn))
                ) && 
                (
                    this.ReceivedVoucherPrefix == input.ReceivedVoucherPrefix ||
                    (this.ReceivedVoucherPrefix != null &&
                    this.ReceivedVoucherPrefix.Equals(input.ReceivedVoucherPrefix))
                ) && 
                (
                    this.ReceivedVoucherRunningNumberModifiedOn == input.ReceivedVoucherRunningNumberModifiedOn ||
                    (this.ReceivedVoucherRunningNumberModifiedOn != null &&
                    this.ReceivedVoucherRunningNumberModifiedOn.Equals(input.ReceivedVoucherRunningNumberModifiedOn))
                ) && 
                (
                    this.ConversionBalancePrefix == input.ConversionBalancePrefix ||
                    (this.ConversionBalancePrefix != null &&
                    this.ConversionBalancePrefix.Equals(input.ConversionBalancePrefix))
                ) && 
                (
                    this.ConversionBalanceRunningNumberModifiedOn == input.ConversionBalanceRunningNumberModifiedOn ||
                    (this.ConversionBalanceRunningNumberModifiedOn != null &&
                    this.ConversionBalanceRunningNumberModifiedOn.Equals(input.ConversionBalanceRunningNumberModifiedOn))
                ) && 
                (
                    this.ETaxEmail == input.ETaxEmail ||
                    (this.ETaxEmail != null &&
                    this.ETaxEmail.Equals(input.ETaxEmail))
                ) && 
                (
                    this.ShortCashInvoiceTemplates == input.ShortCashInvoiceTemplates ||
                    this.ShortCashInvoiceTemplates.Equals(input.ShortCashInvoiceTemplates)
                ) && 
                (
                    this.UseBillingNoteAccountingRule == input.UseBillingNoteAccountingRule ||
                    this.UseBillingNoteAccountingRule.Equals(input.UseBillingNoteAccountingRule)
                ) && 
                (
                    this.BillingNoteAccountingRuleModifiedOn == input.BillingNoteAccountingRuleModifiedOn ||
                    (this.BillingNoteAccountingRuleModifiedOn != null &&
                    this.BillingNoteAccountingRuleModifiedOn.Equals(input.BillingNoteAccountingRuleModifiedOn))
                ) && 
                (
                    this.TemplateFontSize == input.TemplateFontSize ||
                    (this.TemplateFontSize != null &&
                    this.TemplateFontSize.Equals(input.TemplateFontSize))
                ) && 
                (
                    this.UseMultiCurrency == input.UseMultiCurrency ||
                    this.UseMultiCurrency.Equals(input.UseMultiCurrency)
                ) && 
                (
                    this.ExpenseTitleTH == input.ExpenseTitleTH ||
                    (this.ExpenseTitleTH != null &&
                    this.ExpenseTitleTH.Equals(input.ExpenseTitleTH))
                ) && 
                (
                    this.ExpenseTitleEN == input.ExpenseTitleEN ||
                    (this.ExpenseTitleEN != null &&
                    this.ExpenseTitleEN.Equals(input.ExpenseTitleEN))
                ) && 
                (
                    this.WithHoldingTaxTitleTH == input.WithHoldingTaxTitleTH ||
                    (this.WithHoldingTaxTitleTH != null &&
                    this.WithHoldingTaxTitleTH.Equals(input.WithHoldingTaxTitleTH))
                ) && 
                (
                    this.WithHoldingTaxTitleEN == input.WithHoldingTaxTitleEN ||
                    (this.WithHoldingTaxTitleEN != null &&
                    this.WithHoldingTaxTitleEN.Equals(input.WithHoldingTaxTitleEN))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowWithHolding.GetHashCode();
                if (this.InvoicePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.InvoicePrefix.GetHashCode();
                }
                if (this.QuotationPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.QuotationPrefix.GetHashCode();
                }
                if (this.BillingNotePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.BillingNotePrefix.GetHashCode();
                }
                if (this.ReceiptPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptPrefix.GetHashCode();
                }
                if (this.PurchaseOrderPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseOrderPrefix.GetHashCode();
                }
                if (this.CashInvoicePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.CashInvoicePrefix.GetHashCode();
                }
                if (this.ReceivableInvoicePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivableInvoicePrefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CashInvoiceStartingNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ReceiptStartingNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.QuotationStartingNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.BillingNoteStartingNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.PurchaseOrderStartingNumber.GetHashCode();
                if (this.PurchaseOrderTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseOrderTitleEN.GetHashCode();
                }
                if (this.QuotationTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.QuotationTitleEN.GetHashCode();
                }
                if (this.BillingNoteTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.BillingNoteTitleEN.GetHashCode();
                }
                if (this.InvoiceTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceTitleEN.GetHashCode();
                }
                if (this.ReceiptTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptTitleEN.GetHashCode();
                }
                if (this.PaymentSlipTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentSlipTitleEN.GetHashCode();
                }
                if (this.PurchaseOrderTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseOrderTitleTH.GetHashCode();
                }
                if (this.QuotationTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.QuotationTitleTH.GetHashCode();
                }
                if (this.BillingNoteTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.BillingNoteTitleTH.GetHashCode();
                }
                if (this.InvoiceTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceTitleTH.GetHashCode();
                }
                if (this.ReceiptTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptTitleTH.GetHashCode();
                }
                if (this.PaymentSlipTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentSlipTitleTH.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BusinessType.GetHashCode();
                if (this.TermsAgreement != null)
                {
                    hashCode = (hashCode * 59) + this.TermsAgreement.GetHashCode();
                }
                if (this.DefaultRemarks != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultRemarks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InvoiceStartingNumber.GetHashCode();
                if (this.CashInvoiceTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.CashInvoiceTitleEN.GetHashCode();
                }
                if (this.CashInvoiceTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.CashInvoiceTitleTH.GetHashCode();
                }
                if (this.ReceivableInvoiceTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivableInvoiceTitleTH.GetHashCode();
                }
                if (this.ReceivableInvoiceTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivableInvoiceTitleEN.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RunningNumberType.GetHashCode();
                if (this.PurchaseOrderStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseOrderStartingYear.GetHashCode();
                }
                if (this.QuotationStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.QuotationStartingYear.GetHashCode();
                }
                if (this.BillingNoteStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.BillingNoteStartingYear.GetHashCode();
                }
                if (this.InvoiceStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceStartingYear.GetHashCode();
                }
                if (this.CashInvoiceStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.CashInvoiceStartingYear.GetHashCode();
                }
                if (this.ReceiptStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptStartingYear.GetHashCode();
                }
                if (this.PurchaseOrderStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseOrderStartingMonth.GetHashCode();
                }
                if (this.QuotationStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.QuotationStartingMonth.GetHashCode();
                }
                if (this.BillingNoteStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.BillingNoteStartingMonth.GetHashCode();
                }
                if (this.InvoiceStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceStartingMonth.GetHashCode();
                }
                if (this.CashInvoiceStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.CashInvoiceStartingMonth.GetHashCode();
                }
                if (this.ReceiptStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptStartingMonth.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SettingsInitiated.GetHashCode();
                if (this.RunningNumberSettingsModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.RunningNumberSettingsModifiedOn.GetHashCode();
                }
                if (this.WithHoldingTaxPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.WithHoldingTaxPrefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WithHoldingTaxStartingNumber.GetHashCode();
                if (this.WithHoldingTaxStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.WithHoldingTaxStartingMonth.GetHashCode();
                }
                if (this.WithHoldingTaxStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.WithHoldingTaxStartingYear.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DocumentTemplates.GetHashCode();
                hashCode = (hashCode * 59) + this.PrintColor.GetHashCode();
                hashCode = (hashCode * 59) + this.TemplateFont.GetHashCode();
                hashCode = (hashCode * 59) + this.PrintOneInvoice.GetHashCode();
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                if (this.EmailMessageTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.EmailMessageTemplate.GetHashCode();
                }
                if (this.PurchasePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.PurchasePrefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PurchaseStartingNumber.GetHashCode();
                if (this.PurchaseTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseTitleEN.GetHashCode();
                }
                if (this.PurchaseTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseTitleTH.GetHashCode();
                }
                if (this.PurchaseStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseStartingYear.GetHashCode();
                }
                if (this.PurchaseStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseStartingMonth.GetHashCode();
                }
                if (this.AdjustInventoryPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.AdjustInventoryPrefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AdjustInventoryStartingNumber.GetHashCode();
                if (this.AdjustInventoryStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.AdjustInventoryStartingMonth.GetHashCode();
                }
                if (this.AdjustInventoryStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.AdjustInventoryStartingYear.GetHashCode();
                }
                if (this.ExpensePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.ExpensePrefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpenseStartingNumber.GetHashCode();
                if (this.ExpenseStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseStartingMonth.GetHashCode();
                }
                if (this.ExpenseStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseStartingYear.GetHashCode();
                }
                if (this.PaymentSlipPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentSlipPrefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentSlipStartingNumber.GetHashCode();
                if (this.PaymentSlipStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentSlipStartingYear.GetHashCode();
                }
                if (this.PaymentSlipStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentSlipStartingMonth.GetHashCode();
                }
                if (this.CashInvoiceRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CashInvoiceRunningNumberModifiedOn.GetHashCode();
                }
                if (this.PurchaseOrderRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseOrderRunningNumberModifiedOn.GetHashCode();
                }
                if (this.QuotationRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.QuotationRunningNumberModifiedOn.GetHashCode();
                }
                if (this.BillingNoteRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.BillingNoteRunningNumberModifiedOn.GetHashCode();
                }
                if (this.InvoiceRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceRunningNumberModifiedOn.GetHashCode();
                }
                if (this.PurchaseRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseRunningNumberModifiedOn.GetHashCode();
                }
                if (this.ReceivableInvoiceRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivableInvoiceRunningNumberModifiedOn.GetHashCode();
                }
                if (this.PaymentSlipRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentSlipRunningNumberModifiedOn.GetHashCode();
                }
                if (this.RubberStampUrl != null)
                {
                    hashCode = (hashCode * 59) + this.RubberStampUrl.GetHashCode();
                }
                if (this.CreditNotePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.CreditNotePrefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreditNoteStartingNumber.GetHashCode();
                if (this.CreditNoteStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.CreditNoteStartingMonth.GetHashCode();
                }
                if (this.CreditNoteStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.CreditNoteStartingYear.GetHashCode();
                }
                if (this.CreditNoteRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreditNoteRunningNumberModifiedOn.GetHashCode();
                }
                if (this.CreditNoteTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.CreditNoteTitleEN.GetHashCode();
                }
                if (this.CreditNoteTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.CreditNoteTitleTH.GetHashCode();
                }
                if (this.DebitNotePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.DebitNotePrefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DebitNoteStartingNumber.GetHashCode();
                if (this.DebitNoteStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.DebitNoteStartingMonth.GetHashCode();
                }
                if (this.DebitNoteStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.DebitNoteStartingYear.GetHashCode();
                }
                if (this.DebitNoteRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.DebitNoteRunningNumberModifiedOn.GetHashCode();
                }
                if (this.DebitNoteTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.DebitNoteTitleEN.GetHashCode();
                }
                if (this.DebitNoteTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.DebitNoteTitleTH.GetHashCode();
                }
                if (this.ReceiptRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptRunningNumberModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReceivableInvoiceStartingNumber.GetHashCode();
                if (this.ReceivableInvoiceStartingMonth != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivableInvoiceStartingMonth.GetHashCode();
                }
                if (this.ReceivableInvoiceStartingYear != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivableInvoiceStartingYear.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsePartialReceipt.GetHashCode();
                hashCode = (hashCode * 59) + this.UseCashInvoice.GetHashCode();
                hashCode = (hashCode * 59) + this.UseShortCashInvoice.GetHashCode();
                hashCode = (hashCode * 59) + this.GeneralLedgerRunningNumberType.GetHashCode();
                if (this.JournalVoucherPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.JournalVoucherPrefix.GetHashCode();
                }
                if (this.PurchaseVoucherPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseVoucherPrefix.GetHashCode();
                }
                if (this.PurchaseVoucherRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseVoucherRunningNumberModifiedOn.GetHashCode();
                }
                if (this.SalesVoucherPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.SalesVoucherPrefix.GetHashCode();
                }
                if (this.SalesVoucherRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.SalesVoucherRunningNumberModifiedOn.GetHashCode();
                }
                if (this.PaymentVoucherPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentVoucherPrefix.GetHashCode();
                }
                if (this.PaymentVoucherRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentVoucherRunningNumberModifiedOn.GetHashCode();
                }
                if (this.ReceivedVoucherPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivedVoucherPrefix.GetHashCode();
                }
                if (this.ReceivedVoucherRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivedVoucherRunningNumberModifiedOn.GetHashCode();
                }
                if (this.ConversionBalancePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.ConversionBalancePrefix.GetHashCode();
                }
                if (this.ConversionBalanceRunningNumberModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ConversionBalanceRunningNumberModifiedOn.GetHashCode();
                }
                if (this.ETaxEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ETaxEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShortCashInvoiceTemplates.GetHashCode();
                hashCode = (hashCode * 59) + this.UseBillingNoteAccountingRule.GetHashCode();
                if (this.BillingNoteAccountingRuleModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.BillingNoteAccountingRuleModifiedOn.GetHashCode();
                }
                if (this.TemplateFontSize != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateFontSize.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseMultiCurrency.GetHashCode();
                if (this.ExpenseTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseTitleTH.GetHashCode();
                }
                if (this.ExpenseTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseTitleEN.GetHashCode();
                }
                if (this.WithHoldingTaxTitleTH != null)
                {
                    hashCode = (hashCode * 59) + this.WithHoldingTaxTitleTH.GetHashCode();
                }
                if (this.WithHoldingTaxTitleEN != null)
                {
                    hashCode = (hashCode * 59) + this.WithHoldingTaxTitleEN.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // InvoicePrefix (string) maxLength
            if (this.InvoicePrefix != null && this.InvoicePrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InvoicePrefix, length must be less than 6.", new [] { "InvoicePrefix" });
            }

            // InvoicePrefix (string) minLength
            if (this.InvoicePrefix != null && this.InvoicePrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InvoicePrefix, length must be greater than 0.", new [] { "InvoicePrefix" });
            }

            // QuotationPrefix (string) maxLength
            if (this.QuotationPrefix != null && this.QuotationPrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuotationPrefix, length must be less than 6.", new [] { "QuotationPrefix" });
            }

            // QuotationPrefix (string) minLength
            if (this.QuotationPrefix != null && this.QuotationPrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuotationPrefix, length must be greater than 0.", new [] { "QuotationPrefix" });
            }

            // BillingNotePrefix (string) maxLength
            if (this.BillingNotePrefix != null && this.BillingNotePrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BillingNotePrefix, length must be less than 6.", new [] { "BillingNotePrefix" });
            }

            // BillingNotePrefix (string) minLength
            if (this.BillingNotePrefix != null && this.BillingNotePrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BillingNotePrefix, length must be greater than 0.", new [] { "BillingNotePrefix" });
            }

            // ReceiptPrefix (string) maxLength
            if (this.ReceiptPrefix != null && this.ReceiptPrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceiptPrefix, length must be less than 6.", new [] { "ReceiptPrefix" });
            }

            // ReceiptPrefix (string) minLength
            if (this.ReceiptPrefix != null && this.ReceiptPrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceiptPrefix, length must be greater than 0.", new [] { "ReceiptPrefix" });
            }

            // PurchaseOrderPrefix (string) maxLength
            if (this.PurchaseOrderPrefix != null && this.PurchaseOrderPrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseOrderPrefix, length must be less than 6.", new [] { "PurchaseOrderPrefix" });
            }

            // PurchaseOrderPrefix (string) minLength
            if (this.PurchaseOrderPrefix != null && this.PurchaseOrderPrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseOrderPrefix, length must be greater than 0.", new [] { "PurchaseOrderPrefix" });
            }

            // CashInvoicePrefix (string) maxLength
            if (this.CashInvoicePrefix != null && this.CashInvoicePrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CashInvoicePrefix, length must be less than 6.", new [] { "CashInvoicePrefix" });
            }

            // CashInvoicePrefix (string) minLength
            if (this.CashInvoicePrefix != null && this.CashInvoicePrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CashInvoicePrefix, length must be greater than 0.", new [] { "CashInvoicePrefix" });
            }

            // ReceivableInvoicePrefix (string) maxLength
            if (this.ReceivableInvoicePrefix != null && this.ReceivableInvoicePrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceivableInvoicePrefix, length must be less than 6.", new [] { "ReceivableInvoicePrefix" });
            }

            // ReceivableInvoicePrefix (string) minLength
            if (this.ReceivableInvoicePrefix != null && this.ReceivableInvoicePrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceivableInvoicePrefix, length must be greater than 0.", new [] { "ReceivableInvoicePrefix" });
            }

            // PurchaseOrderTitleEN (string) maxLength
            if (this.PurchaseOrderTitleEN != null && this.PurchaseOrderTitleEN.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseOrderTitleEN, length must be less than 2147483647.", new [] { "PurchaseOrderTitleEN" });
            }

            // PurchaseOrderTitleEN (string) minLength
            if (this.PurchaseOrderTitleEN != null && this.PurchaseOrderTitleEN.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseOrderTitleEN, length must be greater than 0.", new [] { "PurchaseOrderTitleEN" });
            }

            // QuotationTitleEN (string) maxLength
            if (this.QuotationTitleEN != null && this.QuotationTitleEN.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuotationTitleEN, length must be less than 2147483647.", new [] { "QuotationTitleEN" });
            }

            // QuotationTitleEN (string) minLength
            if (this.QuotationTitleEN != null && this.QuotationTitleEN.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuotationTitleEN, length must be greater than 0.", new [] { "QuotationTitleEN" });
            }

            // BillingNoteTitleEN (string) maxLength
            if (this.BillingNoteTitleEN != null && this.BillingNoteTitleEN.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BillingNoteTitleEN, length must be less than 2147483647.", new [] { "BillingNoteTitleEN" });
            }

            // BillingNoteTitleEN (string) minLength
            if (this.BillingNoteTitleEN != null && this.BillingNoteTitleEN.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BillingNoteTitleEN, length must be greater than 0.", new [] { "BillingNoteTitleEN" });
            }

            // InvoiceTitleEN (string) maxLength
            if (this.InvoiceTitleEN != null && this.InvoiceTitleEN.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InvoiceTitleEN, length must be less than 2147483647.", new [] { "InvoiceTitleEN" });
            }

            // InvoiceTitleEN (string) minLength
            if (this.InvoiceTitleEN != null && this.InvoiceTitleEN.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InvoiceTitleEN, length must be greater than 0.", new [] { "InvoiceTitleEN" });
            }

            // ReceiptTitleEN (string) maxLength
            if (this.ReceiptTitleEN != null && this.ReceiptTitleEN.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceiptTitleEN, length must be less than 2147483647.", new [] { "ReceiptTitleEN" });
            }

            // ReceiptTitleEN (string) minLength
            if (this.ReceiptTitleEN != null && this.ReceiptTitleEN.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceiptTitleEN, length must be greater than 0.", new [] { "ReceiptTitleEN" });
            }

            // PaymentSlipTitleEN (string) maxLength
            if (this.PaymentSlipTitleEN != null && this.PaymentSlipTitleEN.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentSlipTitleEN, length must be less than 2147483647.", new [] { "PaymentSlipTitleEN" });
            }

            // PaymentSlipTitleEN (string) minLength
            if (this.PaymentSlipTitleEN != null && this.PaymentSlipTitleEN.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentSlipTitleEN, length must be greater than 0.", new [] { "PaymentSlipTitleEN" });
            }

            // PurchaseOrderTitleTH (string) maxLength
            if (this.PurchaseOrderTitleTH != null && this.PurchaseOrderTitleTH.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseOrderTitleTH, length must be less than 2147483647.", new [] { "PurchaseOrderTitleTH" });
            }

            // PurchaseOrderTitleTH (string) minLength
            if (this.PurchaseOrderTitleTH != null && this.PurchaseOrderTitleTH.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseOrderTitleTH, length must be greater than 0.", new [] { "PurchaseOrderTitleTH" });
            }

            // QuotationTitleTH (string) maxLength
            if (this.QuotationTitleTH != null && this.QuotationTitleTH.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuotationTitleTH, length must be less than 2147483647.", new [] { "QuotationTitleTH" });
            }

            // QuotationTitleTH (string) minLength
            if (this.QuotationTitleTH != null && this.QuotationTitleTH.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuotationTitleTH, length must be greater than 0.", new [] { "QuotationTitleTH" });
            }

            // BillingNoteTitleTH (string) maxLength
            if (this.BillingNoteTitleTH != null && this.BillingNoteTitleTH.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BillingNoteTitleTH, length must be less than 2147483647.", new [] { "BillingNoteTitleTH" });
            }

            // BillingNoteTitleTH (string) minLength
            if (this.BillingNoteTitleTH != null && this.BillingNoteTitleTH.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BillingNoteTitleTH, length must be greater than 0.", new [] { "BillingNoteTitleTH" });
            }

            // InvoiceTitleTH (string) maxLength
            if (this.InvoiceTitleTH != null && this.InvoiceTitleTH.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InvoiceTitleTH, length must be less than 2147483647.", new [] { "InvoiceTitleTH" });
            }

            // InvoiceTitleTH (string) minLength
            if (this.InvoiceTitleTH != null && this.InvoiceTitleTH.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InvoiceTitleTH, length must be greater than 0.", new [] { "InvoiceTitleTH" });
            }

            // ReceiptTitleTH (string) maxLength
            if (this.ReceiptTitleTH != null && this.ReceiptTitleTH.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceiptTitleTH, length must be less than 2147483647.", new [] { "ReceiptTitleTH" });
            }

            // ReceiptTitleTH (string) minLength
            if (this.ReceiptTitleTH != null && this.ReceiptTitleTH.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceiptTitleTH, length must be greater than 0.", new [] { "ReceiptTitleTH" });
            }

            // PaymentSlipTitleTH (string) maxLength
            if (this.PaymentSlipTitleTH != null && this.PaymentSlipTitleTH.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentSlipTitleTH, length must be less than 2147483647.", new [] { "PaymentSlipTitleTH" });
            }

            // PaymentSlipTitleTH (string) minLength
            if (this.PaymentSlipTitleTH != null && this.PaymentSlipTitleTH.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentSlipTitleTH, length must be greater than 0.", new [] { "PaymentSlipTitleTH" });
            }

            // TermsAgreement (string) maxLength
            if (this.TermsAgreement != null && this.TermsAgreement.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TermsAgreement, length must be less than 2147483647.", new [] { "TermsAgreement" });
            }

            // TermsAgreement (string) minLength
            if (this.TermsAgreement != null && this.TermsAgreement.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TermsAgreement, length must be greater than 0.", new [] { "TermsAgreement" });
            }

            // DefaultRemarks (string) maxLength
            if (this.DefaultRemarks != null && this.DefaultRemarks.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultRemarks, length must be less than 2147483647.", new [] { "DefaultRemarks" });
            }

            // DefaultRemarks (string) minLength
            if (this.DefaultRemarks != null && this.DefaultRemarks.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultRemarks, length must be greater than 0.", new [] { "DefaultRemarks" });
            }

            // CashInvoiceTitleEN (string) maxLength
            if (this.CashInvoiceTitleEN != null && this.CashInvoiceTitleEN.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CashInvoiceTitleEN, length must be less than 2147483647.", new [] { "CashInvoiceTitleEN" });
            }

            // CashInvoiceTitleEN (string) minLength
            if (this.CashInvoiceTitleEN != null && this.CashInvoiceTitleEN.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CashInvoiceTitleEN, length must be greater than 0.", new [] { "CashInvoiceTitleEN" });
            }

            // CashInvoiceTitleTH (string) maxLength
            if (this.CashInvoiceTitleTH != null && this.CashInvoiceTitleTH.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CashInvoiceTitleTH, length must be less than 2147483647.", new [] { "CashInvoiceTitleTH" });
            }

            // CashInvoiceTitleTH (string) minLength
            if (this.CashInvoiceTitleTH != null && this.CashInvoiceTitleTH.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CashInvoiceTitleTH, length must be greater than 0.", new [] { "CashInvoiceTitleTH" });
            }

            // ReceivableInvoiceTitleTH (string) maxLength
            if (this.ReceivableInvoiceTitleTH != null && this.ReceivableInvoiceTitleTH.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceivableInvoiceTitleTH, length must be less than 2147483647.", new [] { "ReceivableInvoiceTitleTH" });
            }

            // ReceivableInvoiceTitleTH (string) minLength
            if (this.ReceivableInvoiceTitleTH != null && this.ReceivableInvoiceTitleTH.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceivableInvoiceTitleTH, length must be greater than 0.", new [] { "ReceivableInvoiceTitleTH" });
            }

            // ReceivableInvoiceTitleEN (string) maxLength
            if (this.ReceivableInvoiceTitleEN != null && this.ReceivableInvoiceTitleEN.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceivableInvoiceTitleEN, length must be less than 2147483647.", new [] { "ReceivableInvoiceTitleEN" });
            }

            // ReceivableInvoiceTitleEN (string) minLength
            if (this.ReceivableInvoiceTitleEN != null && this.ReceivableInvoiceTitleEN.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceivableInvoiceTitleEN, length must be greater than 0.", new [] { "ReceivableInvoiceTitleEN" });
            }

            // WithHoldingTaxPrefix (string) maxLength
            if (this.WithHoldingTaxPrefix != null && this.WithHoldingTaxPrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WithHoldingTaxPrefix, length must be less than 6.", new [] { "WithHoldingTaxPrefix" });
            }

            // WithHoldingTaxPrefix (string) minLength
            if (this.WithHoldingTaxPrefix != null && this.WithHoldingTaxPrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WithHoldingTaxPrefix, length must be greater than 0.", new [] { "WithHoldingTaxPrefix" });
            }

            // Remarks (string) maxLength
            if (this.Remarks != null && this.Remarks.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Remarks, length must be less than 2147483647.", new [] { "Remarks" });
            }

            // Remarks (string) minLength
            if (this.Remarks != null && this.Remarks.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Remarks, length must be greater than 0.", new [] { "Remarks" });
            }

            // EmailMessageTemplate (string) maxLength
            if (this.EmailMessageTemplate != null && this.EmailMessageTemplate.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailMessageTemplate, length must be less than 2147483647.", new [] { "EmailMessageTemplate" });
            }

            // EmailMessageTemplate (string) minLength
            if (this.EmailMessageTemplate != null && this.EmailMessageTemplate.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailMessageTemplate, length must be greater than 0.", new [] { "EmailMessageTemplate" });
            }

            // PurchasePrefix (string) maxLength
            if (this.PurchasePrefix != null && this.PurchasePrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchasePrefix, length must be less than 6.", new [] { "PurchasePrefix" });
            }

            // PurchasePrefix (string) minLength
            if (this.PurchasePrefix != null && this.PurchasePrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchasePrefix, length must be greater than 0.", new [] { "PurchasePrefix" });
            }

            // PurchaseTitleEN (string) maxLength
            if (this.PurchaseTitleEN != null && this.PurchaseTitleEN.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseTitleEN, length must be less than 2147483647.", new [] { "PurchaseTitleEN" });
            }

            // PurchaseTitleEN (string) minLength
            if (this.PurchaseTitleEN != null && this.PurchaseTitleEN.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseTitleEN, length must be greater than 0.", new [] { "PurchaseTitleEN" });
            }

            // PurchaseTitleTH (string) maxLength
            if (this.PurchaseTitleTH != null && this.PurchaseTitleTH.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseTitleTH, length must be less than 2147483647.", new [] { "PurchaseTitleTH" });
            }

            // PurchaseTitleTH (string) minLength
            if (this.PurchaseTitleTH != null && this.PurchaseTitleTH.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseTitleTH, length must be greater than 0.", new [] { "PurchaseTitleTH" });
            }

            // AdjustInventoryPrefix (string) maxLength
            if (this.AdjustInventoryPrefix != null && this.AdjustInventoryPrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdjustInventoryPrefix, length must be less than 6.", new [] { "AdjustInventoryPrefix" });
            }

            // AdjustInventoryPrefix (string) minLength
            if (this.AdjustInventoryPrefix != null && this.AdjustInventoryPrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdjustInventoryPrefix, length must be greater than 0.", new [] { "AdjustInventoryPrefix" });
            }

            // ExpensePrefix (string) maxLength
            if (this.ExpensePrefix != null && this.ExpensePrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpensePrefix, length must be less than 6.", new [] { "ExpensePrefix" });
            }

            // ExpensePrefix (string) minLength
            if (this.ExpensePrefix != null && this.ExpensePrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpensePrefix, length must be greater than 0.", new [] { "ExpensePrefix" });
            }

            // PaymentSlipPrefix (string) maxLength
            if (this.PaymentSlipPrefix != null && this.PaymentSlipPrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentSlipPrefix, length must be less than 6.", new [] { "PaymentSlipPrefix" });
            }

            // PaymentSlipPrefix (string) minLength
            if (this.PaymentSlipPrefix != null && this.PaymentSlipPrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentSlipPrefix, length must be greater than 0.", new [] { "PaymentSlipPrefix" });
            }

            // RubberStampUrl (string) maxLength
            if (this.RubberStampUrl != null && this.RubberStampUrl.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RubberStampUrl, length must be less than 2147483647.", new [] { "RubberStampUrl" });
            }

            // RubberStampUrl (string) minLength
            if (this.RubberStampUrl != null && this.RubberStampUrl.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RubberStampUrl, length must be greater than 0.", new [] { "RubberStampUrl" });
            }

            // CreditNotePrefix (string) maxLength
            if (this.CreditNotePrefix != null && this.CreditNotePrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditNotePrefix, length must be less than 6.", new [] { "CreditNotePrefix" });
            }

            // CreditNotePrefix (string) minLength
            if (this.CreditNotePrefix != null && this.CreditNotePrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditNotePrefix, length must be greater than 0.", new [] { "CreditNotePrefix" });
            }

            // CreditNoteTitleEN (string) maxLength
            if (this.CreditNoteTitleEN != null && this.CreditNoteTitleEN.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditNoteTitleEN, length must be less than 2147483647.", new [] { "CreditNoteTitleEN" });
            }

            // CreditNoteTitleEN (string) minLength
            if (this.CreditNoteTitleEN != null && this.CreditNoteTitleEN.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditNoteTitleEN, length must be greater than 0.", new [] { "CreditNoteTitleEN" });
            }

            // CreditNoteTitleTH (string) maxLength
            if (this.CreditNoteTitleTH != null && this.CreditNoteTitleTH.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditNoteTitleTH, length must be less than 2147483647.", new [] { "CreditNoteTitleTH" });
            }

            // CreditNoteTitleTH (string) minLength
            if (this.CreditNoteTitleTH != null && this.CreditNoteTitleTH.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditNoteTitleTH, length must be greater than 0.", new [] { "CreditNoteTitleTH" });
            }

            // DebitNotePrefix (string) maxLength
            if (this.DebitNotePrefix != null && this.DebitNotePrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitNotePrefix, length must be less than 6.", new [] { "DebitNotePrefix" });
            }

            // DebitNotePrefix (string) minLength
            if (this.DebitNotePrefix != null && this.DebitNotePrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitNotePrefix, length must be greater than 0.", new [] { "DebitNotePrefix" });
            }

            // DebitNoteTitleEN (string) maxLength
            if (this.DebitNoteTitleEN != null && this.DebitNoteTitleEN.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitNoteTitleEN, length must be less than 2147483647.", new [] { "DebitNoteTitleEN" });
            }

            // DebitNoteTitleEN (string) minLength
            if (this.DebitNoteTitleEN != null && this.DebitNoteTitleEN.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitNoteTitleEN, length must be greater than 0.", new [] { "DebitNoteTitleEN" });
            }

            // DebitNoteTitleTH (string) maxLength
            if (this.DebitNoteTitleTH != null && this.DebitNoteTitleTH.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitNoteTitleTH, length must be less than 2147483647.", new [] { "DebitNoteTitleTH" });
            }

            // DebitNoteTitleTH (string) minLength
            if (this.DebitNoteTitleTH != null && this.DebitNoteTitleTH.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitNoteTitleTH, length must be greater than 0.", new [] { "DebitNoteTitleTH" });
            }

            // JournalVoucherPrefix (string) maxLength
            if (this.JournalVoucherPrefix != null && this.JournalVoucherPrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JournalVoucherPrefix, length must be less than 6.", new [] { "JournalVoucherPrefix" });
            }

            // JournalVoucherPrefix (string) minLength
            if (this.JournalVoucherPrefix != null && this.JournalVoucherPrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JournalVoucherPrefix, length must be greater than 0.", new [] { "JournalVoucherPrefix" });
            }

            // PurchaseVoucherPrefix (string) maxLength
            if (this.PurchaseVoucherPrefix != null && this.PurchaseVoucherPrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseVoucherPrefix, length must be less than 6.", new [] { "PurchaseVoucherPrefix" });
            }

            // PurchaseVoucherPrefix (string) minLength
            if (this.PurchaseVoucherPrefix != null && this.PurchaseVoucherPrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseVoucherPrefix, length must be greater than 0.", new [] { "PurchaseVoucherPrefix" });
            }

            // SalesVoucherPrefix (string) maxLength
            if (this.SalesVoucherPrefix != null && this.SalesVoucherPrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesVoucherPrefix, length must be less than 6.", new [] { "SalesVoucherPrefix" });
            }

            // SalesVoucherPrefix (string) minLength
            if (this.SalesVoucherPrefix != null && this.SalesVoucherPrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesVoucherPrefix, length must be greater than 0.", new [] { "SalesVoucherPrefix" });
            }

            // PaymentVoucherPrefix (string) maxLength
            if (this.PaymentVoucherPrefix != null && this.PaymentVoucherPrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentVoucherPrefix, length must be less than 6.", new [] { "PaymentVoucherPrefix" });
            }

            // PaymentVoucherPrefix (string) minLength
            if (this.PaymentVoucherPrefix != null && this.PaymentVoucherPrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentVoucherPrefix, length must be greater than 0.", new [] { "PaymentVoucherPrefix" });
            }

            // ReceivedVoucherPrefix (string) maxLength
            if (this.ReceivedVoucherPrefix != null && this.ReceivedVoucherPrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceivedVoucherPrefix, length must be less than 6.", new [] { "ReceivedVoucherPrefix" });
            }

            // ReceivedVoucherPrefix (string) minLength
            if (this.ReceivedVoucherPrefix != null && this.ReceivedVoucherPrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceivedVoucherPrefix, length must be greater than 0.", new [] { "ReceivedVoucherPrefix" });
            }

            // ConversionBalancePrefix (string) maxLength
            if (this.ConversionBalancePrefix != null && this.ConversionBalancePrefix.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConversionBalancePrefix, length must be less than 6.", new [] { "ConversionBalancePrefix" });
            }

            // ConversionBalancePrefix (string) minLength
            if (this.ConversionBalancePrefix != null && this.ConversionBalancePrefix.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConversionBalancePrefix, length must be greater than 0.", new [] { "ConversionBalancePrefix" });
            }

            yield break;
        }
    }

}

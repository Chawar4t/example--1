/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineDocumentAllOf
    /// </summary>
    [DataContract(Name = "InlineDocument_allOf")]
    public partial class InlineDocumentAllOf : IEquatable<InlineDocumentAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineDocumentAllOf" /> class.
        /// </summary>
        /// <param name="discountType">discountType.</param>
        /// <param name="useInlineDiscount">useInlineDiscount.</param>
        /// <param name="useInlineVat">useInlineVat.</param>
        /// <param name="exemptAmount">exemptAmount.</param>
        /// <param name="vatableAmount">vatableAmount.</param>
        /// <param name="items">items.</param>
        /// <param name="documentReference">documentReference.</param>
        public InlineDocumentAllOf(int discountType = default(int), bool useInlineDiscount = default(bool), bool useInlineVat = default(bool), decimal? exemptAmount = default(decimal?), decimal? vatableAmount = default(decimal?), List<InlineProductItem> items = default(List<InlineProductItem>), List<UpgradeDocument> documentReference = default(List<UpgradeDocument>))
        {
            this.DiscountType = discountType;
            this.UseInlineDiscount = useInlineDiscount;
            this.UseInlineVat = useInlineVat;
            this.ExemptAmount = exemptAmount;
            this.VatableAmount = vatableAmount;
            this.Items = items;
            this.DocumentReference = documentReference;
        }

        /// <summary>
        /// Gets or Sets DiscountType
        /// </summary>
        [DataMember(Name = "discountType", EmitDefaultValue = false)]
        public int DiscountType { get; set; }

        /// <summary>
        /// Gets or Sets UseInlineDiscount
        /// </summary>
        [DataMember(Name = "useInlineDiscount", EmitDefaultValue = true)]
        public bool UseInlineDiscount { get; set; }

        /// <summary>
        /// Gets or Sets UseInlineVat
        /// </summary>
        [DataMember(Name = "useInlineVat", EmitDefaultValue = true)]
        public bool UseInlineVat { get; set; }

        /// <summary>
        /// Gets or Sets ExemptAmount
        /// </summary>
        [DataMember(Name = "exemptAmount", EmitDefaultValue = true)]
        public decimal? ExemptAmount { get; set; }

        /// <summary>
        /// Gets or Sets VatableAmount
        /// </summary>
        [DataMember(Name = "vatableAmount", EmitDefaultValue = true)]
        public decimal? VatableAmount { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = true)]
        public List<InlineProductItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets DocumentReference
        /// </summary>
        [DataMember(Name = "documentReference", EmitDefaultValue = true)]
        public List<UpgradeDocument> DocumentReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineDocumentAllOf {\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  UseInlineDiscount: ").Append(UseInlineDiscount).Append("\n");
            sb.Append("  UseInlineVat: ").Append(UseInlineVat).Append("\n");
            sb.Append("  ExemptAmount: ").Append(ExemptAmount).Append("\n");
            sb.Append("  VatableAmount: ").Append(VatableAmount).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  DocumentReference: ").Append(DocumentReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineDocumentAllOf);
        }

        /// <summary>
        /// Returns true if InlineDocumentAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineDocumentAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineDocumentAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DiscountType == input.DiscountType ||
                    this.DiscountType.Equals(input.DiscountType)
                ) && 
                (
                    this.UseInlineDiscount == input.UseInlineDiscount ||
                    this.UseInlineDiscount.Equals(input.UseInlineDiscount)
                ) && 
                (
                    this.UseInlineVat == input.UseInlineVat ||
                    this.UseInlineVat.Equals(input.UseInlineVat)
                ) && 
                (
                    this.ExemptAmount == input.ExemptAmount ||
                    (this.ExemptAmount != null &&
                    this.ExemptAmount.Equals(input.ExemptAmount))
                ) && 
                (
                    this.VatableAmount == input.VatableAmount ||
                    (this.VatableAmount != null &&
                    this.VatableAmount.Equals(input.VatableAmount))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.DocumentReference == input.DocumentReference ||
                    this.DocumentReference != null &&
                    input.DocumentReference != null &&
                    this.DocumentReference.SequenceEqual(input.DocumentReference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DiscountType.GetHashCode();
                hashCode = (hashCode * 59) + this.UseInlineDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.UseInlineVat.GetHashCode();
                if (this.ExemptAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ExemptAmount.GetHashCode();
                }
                if (this.VatableAmount != null)
                {
                    hashCode = (hashCode * 59) + this.VatableAmount.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                if (this.DocumentReference != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentReference.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CustomTemplateInfo
    /// </summary>
    [DataContract(Name = "CustomTemplateInfo")]
    public partial class CustomTemplateInfo : IEquatable<CustomTemplateInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomTemplateInfo" /> class.
        /// </summary>
        /// <param name="headerIndex">headerIndex.</param>
        /// <param name="productName">productName.</param>
        /// <param name="includeTax">includeTax.</param>
        /// <param name="isChooseDateColumn">isChooseDateColumn.</param>
        /// <param name="isChooseUnitPriceColumn">isChooseUnitPriceColumn.</param>
        /// <param name="columns">columns.</param>
        public CustomTemplateInfo(string headerIndex = default(string), string productName = default(string), string includeTax = default(string), bool isChooseDateColumn = default(bool), bool isChooseUnitPriceColumn = default(bool), List<Object> columns = default(List<Object>))
        {
            this.HeaderIndex = headerIndex;
            this.ProductName = productName;
            this.IncludeTax = includeTax;
            this.IsChooseDateColumn = isChooseDateColumn;
            this.IsChooseUnitPriceColumn = isChooseUnitPriceColumn;
            this.Columns = columns;
        }

        /// <summary>
        /// Gets or Sets HeaderIndex
        /// </summary>
        [DataMember(Name = "headerIndex", EmitDefaultValue = true)]
        public string HeaderIndex { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name = "productName", EmitDefaultValue = true)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets IncludeTax
        /// </summary>
        [DataMember(Name = "includeTax", EmitDefaultValue = true)]
        public string IncludeTax { get; set; }

        /// <summary>
        /// Gets or Sets IsChooseDateColumn
        /// </summary>
        [DataMember(Name = "isChooseDateColumn", EmitDefaultValue = true)]
        public bool IsChooseDateColumn { get; set; }

        /// <summary>
        /// Gets or Sets IsChooseUnitPriceColumn
        /// </summary>
        [DataMember(Name = "isChooseUnitPriceColumn", EmitDefaultValue = true)]
        public bool IsChooseUnitPriceColumn { get; set; }

        /// <summary>
        /// Gets or Sets Columns
        /// </summary>
        [DataMember(Name = "columns", EmitDefaultValue = true)]
        public List<Object> Columns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomTemplateInfo {\n");
            sb.Append("  HeaderIndex: ").Append(HeaderIndex).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  IncludeTax: ").Append(IncludeTax).Append("\n");
            sb.Append("  IsChooseDateColumn: ").Append(IsChooseDateColumn).Append("\n");
            sb.Append("  IsChooseUnitPriceColumn: ").Append(IsChooseUnitPriceColumn).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomTemplateInfo);
        }

        /// <summary>
        /// Returns true if CustomTemplateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomTemplateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomTemplateInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HeaderIndex == input.HeaderIndex ||
                    (this.HeaderIndex != null &&
                    this.HeaderIndex.Equals(input.HeaderIndex))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.IncludeTax == input.IncludeTax ||
                    (this.IncludeTax != null &&
                    this.IncludeTax.Equals(input.IncludeTax))
                ) && 
                (
                    this.IsChooseDateColumn == input.IsChooseDateColumn ||
                    this.IsChooseDateColumn.Equals(input.IsChooseDateColumn)
                ) && 
                (
                    this.IsChooseUnitPriceColumn == input.IsChooseUnitPriceColumn ||
                    this.IsChooseUnitPriceColumn.Equals(input.IsChooseUnitPriceColumn)
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    input.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HeaderIndex != null)
                {
                    hashCode = (hashCode * 59) + this.HeaderIndex.GetHashCode();
                }
                if (this.ProductName != null)
                {
                    hashCode = (hashCode * 59) + this.ProductName.GetHashCode();
                }
                if (this.IncludeTax != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeTax.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsChooseDateColumn.GetHashCode();
                hashCode = (hashCode * 59) + this.IsChooseUnitPriceColumn.GetHashCode();
                if (this.Columns != null)
                {
                    hashCode = (hashCode * 59) + this.Columns.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

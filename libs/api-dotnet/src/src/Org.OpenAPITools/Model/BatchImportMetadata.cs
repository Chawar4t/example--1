/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BatchImportMetadata
    /// </summary>
    [DataContract(Name = "BatchImportMetadata")]
    public partial class BatchImportMetadata : IEquatable<BatchImportMetadata>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name = "documentType", EmitDefaultValue = false)]
        public DocumentTypes? DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public BatchImportStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchImportMetadata" /> class.
        /// </summary>
        /// <param name="companyUserGuid">companyUserGuid.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="templateId">templateId.</param>
        /// <param name="batchId">batchId.</param>
        /// <param name="filename">filename.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="status">status.</param>
        /// <param name="documentCount">documentCount.</param>
        /// <param name="successCount">successCount.</param>
        /// <param name="failedCount">failedCount.</param>
        /// <param name="s3Key">s3Key.</param>
        /// <param name="userId">userId.</param>
        /// <param name="companyId">companyId.</param>
        /// <param name="isViewed">isViewed.</param>
        public BatchImportMetadata(string companyUserGuid = default(string), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), string templateId = default(string), string batchId = default(string), string filename = default(string), DocumentTypes? documentType = default(DocumentTypes?), BatchImportStatus? status = default(BatchImportStatus?), int documentCount = default(int), int successCount = default(int), int failedCount = default(int), string s3Key = default(string), long userId = default(long), long companyId = default(long), bool isViewed = default(bool))
        {
            this.CompanyUserGuid = companyUserGuid;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.TemplateId = templateId;
            this.BatchId = batchId;
            this.Filename = filename;
            this.DocumentType = documentType;
            this.Status = status;
            this.DocumentCount = documentCount;
            this.SuccessCount = successCount;
            this.FailedCount = failedCount;
            this.S3Key = s3Key;
            this.UserId = userId;
            this.CompanyId = companyId;
            this.IsViewed = isViewed;
        }

        /// <summary>
        /// Gets or Sets CompanyUserGuid
        /// </summary>
        [DataMember(Name = "companyUserGuid", EmitDefaultValue = true)]
        public string CompanyUserGuid { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name = "templateId", EmitDefaultValue = true)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name = "batchId", EmitDefaultValue = true)]
        public string BatchId { get; set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [DataMember(Name = "filename", EmitDefaultValue = true)]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets DocumentCount
        /// </summary>
        [DataMember(Name = "documentCount", EmitDefaultValue = false)]
        public int DocumentCount { get; set; }

        /// <summary>
        /// Gets or Sets SuccessCount
        /// </summary>
        [DataMember(Name = "successCount", EmitDefaultValue = false)]
        public int SuccessCount { get; set; }

        /// <summary>
        /// Gets or Sets FailedCount
        /// </summary>
        [DataMember(Name = "failedCount", EmitDefaultValue = false)]
        public int FailedCount { get; set; }

        /// <summary>
        /// Gets or Sets S3Key
        /// </summary>
        [DataMember(Name = "s3Key", EmitDefaultValue = true)]
        public string S3Key { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public long UserId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets IsViewed
        /// </summary>
        [DataMember(Name = "isViewed", EmitDefaultValue = true)]
        public bool IsViewed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchImportMetadata {\n");
            sb.Append("  CompanyUserGuid: ").Append(CompanyUserGuid).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DocumentCount: ").Append(DocumentCount).Append("\n");
            sb.Append("  SuccessCount: ").Append(SuccessCount).Append("\n");
            sb.Append("  FailedCount: ").Append(FailedCount).Append("\n");
            sb.Append("  S3Key: ").Append(S3Key).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  IsViewed: ").Append(IsViewed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchImportMetadata);
        }

        /// <summary>
        /// Returns true if BatchImportMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchImportMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchImportMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompanyUserGuid == input.CompanyUserGuid ||
                    (this.CompanyUserGuid != null &&
                    this.CompanyUserGuid.Equals(input.CompanyUserGuid))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    this.DocumentType.Equals(input.DocumentType)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.DocumentCount == input.DocumentCount ||
                    this.DocumentCount.Equals(input.DocumentCount)
                ) && 
                (
                    this.SuccessCount == input.SuccessCount ||
                    this.SuccessCount.Equals(input.SuccessCount)
                ) && 
                (
                    this.FailedCount == input.FailedCount ||
                    this.FailedCount.Equals(input.FailedCount)
                ) && 
                (
                    this.S3Key == input.S3Key ||
                    (this.S3Key != null &&
                    this.S3Key.Equals(input.S3Key))
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.IsViewed == input.IsViewed ||
                    this.IsViewed.Equals(input.IsViewed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyUserGuid != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyUserGuid.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.TemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateId.GetHashCode();
                }
                if (this.BatchId != null)
                {
                    hashCode = (hashCode * 59) + this.BatchId.GetHashCode();
                }
                if (this.Filename != null)
                {
                    hashCode = (hashCode * 59) + this.Filename.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DocumentType.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.DocumentCount.GetHashCode();
                hashCode = (hashCode * 59) + this.SuccessCount.GetHashCode();
                hashCode = (hashCode * 59) + this.FailedCount.GetHashCode();
                if (this.S3Key != null)
                {
                    hashCode = (hashCode * 59) + this.S3Key.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsViewed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IJournalEntryBase
    /// </summary>
    [DataContract(Name = "IJournalEntryBase")]
    public partial class IJournalEntryBase : IEquatable<IJournalEntryBase>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name = "documentType", EmitDefaultValue = false)]
        public DocumentTypes? DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public JournalEntryStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets TemplateType
        /// </summary>
        [DataMember(Name = "templateType", EmitDefaultValue = false)]
        public JournalEntryTemplateType? TemplateType { get; set; }

        /// <summary>
        /// Gets or Sets RuleCompileStatus
        /// </summary>
        [DataMember(Name = "ruleCompileStatus", EmitDefaultValue = false)]
        public RuleCompileStatus? RuleCompileStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IJournalEntryBase" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyId">companyId.</param>
        /// <param name="documentSerial">documentSerial.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="status">status.</param>
        /// <param name="documentDate">documentDate.</param>
        /// <param name="description">description.</param>
        /// <param name="descriptionForeign">descriptionForeign.</param>
        /// <param name="voidDescription">voidDescription.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="modifiedOn">modifiedOn.</param>
        /// <param name="voidedOn">voidedOn.</param>
        /// <param name="approvedOn">approvedOn.</param>
        /// <param name="transactionNo">transactionNo.</param>
        /// <param name="note">note.</param>
        /// <param name="templateType">templateType.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="documentSerialNoPrefix">documentSerialNoPrefix.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="modifiedBy">modifiedBy.</param>
        /// <param name="approvedBy">approvedBy.</param>
        /// <param name="voidedBy">voidedBy.</param>
        /// <param name="galleryId">galleryId.</param>
        /// <param name="contactId">contactId.</param>
        /// <param name="runningNumberType">runningNumberType.</param>
        /// <param name="fiscalYearId">fiscalYearId.</param>
        /// <param name="reference">reference.</param>
        /// <param name="referenceId">referenceId.</param>
        /// <param name="referenceDocumentType">referenceDocumentType.</param>
        /// <param name="isSystemDocument">isSystemDocument.</param>
        /// <param name="ruleCompileStatus">ruleCompileStatus.</param>
        public IJournalEntryBase(long id = default(long), long companyId = default(long), string documentSerial = default(string), DocumentTypes? documentType = default(DocumentTypes?), JournalEntryStatus? status = default(JournalEntryStatus?), DateTime documentDate = default(DateTime), string description = default(string), string descriptionForeign = default(string), string voidDescription = default(string), DateTime createdOn = default(DateTime), DateTime modifiedOn = default(DateTime), DateTime? voidedOn = default(DateTime?), DateTime? approvedOn = default(DateTime?), long? transactionNo = default(long?), string note = default(string), JournalEntryTemplateType? templateType = default(JournalEntryTemplateType?), string contactName = default(string), long? documentSerialNoPrefix = default(long?), long createdBy = default(long), long modifiedBy = default(long), long? approvedBy = default(long?), long? voidedBy = default(long?), long? galleryId = default(long?), long? contactId = default(long?), OneOfRunningNumberType runningNumberType = default(OneOfRunningNumberType), long? fiscalYearId = default(long?), string reference = default(string), long? referenceId = default(long?), OneOfDocumentTypes referenceDocumentType = default(OneOfDocumentTypes), bool isSystemDocument = default(bool), RuleCompileStatus? ruleCompileStatus = default(RuleCompileStatus?))
        {
            this.Id = id;
            this.CompanyId = companyId;
            this.DocumentSerial = documentSerial;
            this.DocumentType = documentType;
            this.Status = status;
            this.DocumentDate = documentDate;
            this.Description = description;
            this.DescriptionForeign = descriptionForeign;
            this.VoidDescription = voidDescription;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.VoidedOn = voidedOn;
            this.ApprovedOn = approvedOn;
            this.TransactionNo = transactionNo;
            this.Note = note;
            this.TemplateType = templateType;
            this.ContactName = contactName;
            this.DocumentSerialNoPrefix = documentSerialNoPrefix;
            this.CreatedBy = createdBy;
            this.ModifiedBy = modifiedBy;
            this.ApprovedBy = approvedBy;
            this.VoidedBy = voidedBy;
            this.GalleryId = galleryId;
            this.ContactId = contactId;
            this.RunningNumberType = runningNumberType;
            this.FiscalYearId = fiscalYearId;
            this.Reference = reference;
            this.ReferenceId = referenceId;
            this.ReferenceDocumentType = referenceDocumentType;
            this.IsSystemDocument = isSystemDocument;
            this.RuleCompileStatus = ruleCompileStatus;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSerial
        /// </summary>
        [DataMember(Name = "documentSerial", EmitDefaultValue = true)]
        public string DocumentSerial { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDate
        /// </summary>
        [DataMember(Name = "documentDate", EmitDefaultValue = false)]
        public DateTime DocumentDate { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionForeign
        /// </summary>
        [DataMember(Name = "descriptionForeign", EmitDefaultValue = true)]
        public string DescriptionForeign { get; set; }

        /// <summary>
        /// Gets or Sets VoidDescription
        /// </summary>
        [DataMember(Name = "voidDescription", EmitDefaultValue = true)]
        public string VoidDescription { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets VoidedOn
        /// </summary>
        [DataMember(Name = "voidedOn", EmitDefaultValue = true)]
        public DateTime? VoidedOn { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedOn
        /// </summary>
        [DataMember(Name = "approvedOn", EmitDefaultValue = true)]
        public DateTime? ApprovedOn { get; set; }

        /// <summary>
        /// Gets or Sets TransactionNo
        /// </summary>
        [DataMember(Name = "transactionNo", EmitDefaultValue = true)]
        public long? TransactionNo { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = true)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name = "contactName", EmitDefaultValue = true)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSerialNoPrefix
        /// </summary>
        [DataMember(Name = "documentSerialNoPrefix", EmitDefaultValue = true)]
        public long? DocumentSerialNoPrefix { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public long CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name = "modifiedBy", EmitDefaultValue = false)]
        public long ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedBy
        /// </summary>
        [DataMember(Name = "approvedBy", EmitDefaultValue = true)]
        public long? ApprovedBy { get; set; }

        /// <summary>
        /// Gets or Sets VoidedBy
        /// </summary>
        [DataMember(Name = "voidedBy", EmitDefaultValue = true)]
        public long? VoidedBy { get; set; }

        /// <summary>
        /// Gets or Sets GalleryId
        /// </summary>
        [DataMember(Name = "galleryId", EmitDefaultValue = true)]
        public long? GalleryId { get; set; }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [DataMember(Name = "contactId", EmitDefaultValue = true)]
        public long? ContactId { get; set; }

        /// <summary>
        /// Gets or Sets RunningNumberType
        /// </summary>
        [DataMember(Name = "runningNumberType", EmitDefaultValue = true)]
        public OneOfRunningNumberType RunningNumberType { get; set; }

        /// <summary>
        /// Gets or Sets FiscalYearId
        /// </summary>
        [DataMember(Name = "fiscalYearId", EmitDefaultValue = true)]
        public long? FiscalYearId { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceId
        /// </summary>
        [DataMember(Name = "referenceId", EmitDefaultValue = true)]
        public long? ReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceDocumentType
        /// </summary>
        [DataMember(Name = "referenceDocumentType", EmitDefaultValue = true)]
        public OneOfDocumentTypes ReferenceDocumentType { get; set; }

        /// <summary>
        /// Gets or Sets IsSystemDocument
        /// </summary>
        [DataMember(Name = "isSystemDocument", EmitDefaultValue = true)]
        public bool IsSystemDocument { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IJournalEntryBase {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  DocumentSerial: ").Append(DocumentSerial).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DescriptionForeign: ").Append(DescriptionForeign).Append("\n");
            sb.Append("  VoidDescription: ").Append(VoidDescription).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  VoidedOn: ").Append(VoidedOn).Append("\n");
            sb.Append("  ApprovedOn: ").Append(ApprovedOn).Append("\n");
            sb.Append("  TransactionNo: ").Append(TransactionNo).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  DocumentSerialNoPrefix: ").Append(DocumentSerialNoPrefix).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ApprovedBy: ").Append(ApprovedBy).Append("\n");
            sb.Append("  VoidedBy: ").Append(VoidedBy).Append("\n");
            sb.Append("  GalleryId: ").Append(GalleryId).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  RunningNumberType: ").Append(RunningNumberType).Append("\n");
            sb.Append("  FiscalYearId: ").Append(FiscalYearId).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  ReferenceDocumentType: ").Append(ReferenceDocumentType).Append("\n");
            sb.Append("  IsSystemDocument: ").Append(IsSystemDocument).Append("\n");
            sb.Append("  RuleCompileStatus: ").Append(RuleCompileStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IJournalEntryBase);
        }

        /// <summary>
        /// Returns true if IJournalEntryBase instances are equal
        /// </summary>
        /// <param name="input">Instance of IJournalEntryBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IJournalEntryBase input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.DocumentSerial == input.DocumentSerial ||
                    (this.DocumentSerial != null &&
                    this.DocumentSerial.Equals(input.DocumentSerial))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    this.DocumentType.Equals(input.DocumentType)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.DocumentDate == input.DocumentDate ||
                    (this.DocumentDate != null &&
                    this.DocumentDate.Equals(input.DocumentDate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DescriptionForeign == input.DescriptionForeign ||
                    (this.DescriptionForeign != null &&
                    this.DescriptionForeign.Equals(input.DescriptionForeign))
                ) && 
                (
                    this.VoidDescription == input.VoidDescription ||
                    (this.VoidDescription != null &&
                    this.VoidDescription.Equals(input.VoidDescription))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.VoidedOn == input.VoidedOn ||
                    (this.VoidedOn != null &&
                    this.VoidedOn.Equals(input.VoidedOn))
                ) && 
                (
                    this.ApprovedOn == input.ApprovedOn ||
                    (this.ApprovedOn != null &&
                    this.ApprovedOn.Equals(input.ApprovedOn))
                ) && 
                (
                    this.TransactionNo == input.TransactionNo ||
                    (this.TransactionNo != null &&
                    this.TransactionNo.Equals(input.TransactionNo))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.TemplateType == input.TemplateType ||
                    this.TemplateType.Equals(input.TemplateType)
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.DocumentSerialNoPrefix == input.DocumentSerialNoPrefix ||
                    (this.DocumentSerialNoPrefix != null &&
                    this.DocumentSerialNoPrefix.Equals(input.DocumentSerialNoPrefix))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                ) && 
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    this.ModifiedBy.Equals(input.ModifiedBy)
                ) && 
                (
                    this.ApprovedBy == input.ApprovedBy ||
                    (this.ApprovedBy != null &&
                    this.ApprovedBy.Equals(input.ApprovedBy))
                ) && 
                (
                    this.VoidedBy == input.VoidedBy ||
                    (this.VoidedBy != null &&
                    this.VoidedBy.Equals(input.VoidedBy))
                ) && 
                (
                    this.GalleryId == input.GalleryId ||
                    (this.GalleryId != null &&
                    this.GalleryId.Equals(input.GalleryId))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.RunningNumberType == input.RunningNumberType ||
                    (this.RunningNumberType != null &&
                    this.RunningNumberType.Equals(input.RunningNumberType))
                ) && 
                (
                    this.FiscalYearId == input.FiscalYearId ||
                    (this.FiscalYearId != null &&
                    this.FiscalYearId.Equals(input.FiscalYearId))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) && 
                (
                    this.ReferenceDocumentType == input.ReferenceDocumentType ||
                    (this.ReferenceDocumentType != null &&
                    this.ReferenceDocumentType.Equals(input.ReferenceDocumentType))
                ) && 
                (
                    this.IsSystemDocument == input.IsSystemDocument ||
                    this.IsSystemDocument.Equals(input.IsSystemDocument)
                ) && 
                (
                    this.RuleCompileStatus == input.RuleCompileStatus ||
                    this.RuleCompileStatus.Equals(input.RuleCompileStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.DocumentSerial != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentSerial.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DocumentType.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.DocumentDate != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentDate.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DescriptionForeign != null)
                {
                    hashCode = (hashCode * 59) + this.DescriptionForeign.GetHashCode();
                }
                if (this.VoidDescription != null)
                {
                    hashCode = (hashCode * 59) + this.VoidDescription.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                if (this.VoidedOn != null)
                {
                    hashCode = (hashCode * 59) + this.VoidedOn.GetHashCode();
                }
                if (this.ApprovedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedOn.GetHashCode();
                }
                if (this.TransactionNo != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionNo.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TemplateType.GetHashCode();
                if (this.ContactName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactName.GetHashCode();
                }
                if (this.DocumentSerialNoPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentSerialNoPrefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifiedBy.GetHashCode();
                if (this.ApprovedBy != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovedBy.GetHashCode();
                }
                if (this.VoidedBy != null)
                {
                    hashCode = (hashCode * 59) + this.VoidedBy.GetHashCode();
                }
                if (this.GalleryId != null)
                {
                    hashCode = (hashCode * 59) + this.GalleryId.GetHashCode();
                }
                if (this.ContactId != null)
                {
                    hashCode = (hashCode * 59) + this.ContactId.GetHashCode();
                }
                if (this.RunningNumberType != null)
                {
                    hashCode = (hashCode * 59) + this.RunningNumberType.GetHashCode();
                }
                if (this.FiscalYearId != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalYearId.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.ReferenceId != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceId.GetHashCode();
                }
                if (this.ReferenceDocumentType != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceDocumentType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSystemDocument.GetHashCode();
                hashCode = (hashCode * 59) + this.RuleCompileStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

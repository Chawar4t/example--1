/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SupplierInvoice
    /// </summary>
    [DataContract(Name = "SupplierInvoice")]
    public partial class SupplierInvoice : IEquatable<SupplierInvoice>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ReferenceDocumentType
        /// </summary>
        [DataMember(Name = "referenceDocumentType", EmitDefaultValue = false)]
        public DocumentTypes? ReferenceDocumentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupplierInvoice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SupplierInvoice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupplierInvoice" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyId">companyId (required).</param>
        /// <param name="documentDate">documentDate (required).</param>
        /// <param name="documentSerial">documentSerial.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="contactTaxId">contactTaxId.</param>
        /// <param name="contactBranch">contactBranch.</param>
        /// <param name="isDelete">isDelete.</param>
        /// <param name="galleryId">galleryId.</param>
        /// <param name="referenceDocumentId">referenceDocumentId.</param>
        /// <param name="referenceDocumentType">referenceDocumentType.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="modifiedBy">modifiedBy.</param>
        /// <param name="createdOn">createdOn (required).</param>
        /// <param name="modifiedOn">modifiedOn (required).</param>
        /// <param name="company">company.</param>
        /// <param name="createdByUser">createdByUser.</param>
        /// <param name="modifiedByUser">modifiedByUser.</param>
        /// <param name="gallery">gallery.</param>
        public SupplierInvoice(long id = default(long), long companyId = default(long), DateTime documentDate = default(DateTime), string documentSerial = default(string), string contactName = default(string), string contactTaxId = default(string), string contactBranch = default(string), bool isDelete = default(bool), long? galleryId = default(long?), long referenceDocumentId = default(long), DocumentTypes? referenceDocumentType = default(DocumentTypes?), long createdBy = default(long), long modifiedBy = default(long), DateTime createdOn = default(DateTime), DateTime modifiedOn = default(DateTime), OneOfCompany company = default(OneOfCompany), OneOfUser createdByUser = default(OneOfUser), OneOfUser modifiedByUser = default(OneOfUser), OneOfGallery gallery = default(OneOfGallery))
        {
            this.CompanyId = companyId;
            this.DocumentDate = documentDate;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.Id = id;
            this.DocumentSerial = documentSerial;
            this.ContactName = contactName;
            this.ContactTaxId = contactTaxId;
            this.ContactBranch = contactBranch;
            this.IsDelete = isDelete;
            this.GalleryId = galleryId;
            this.ReferenceDocumentId = referenceDocumentId;
            this.ReferenceDocumentType = referenceDocumentType;
            this.CreatedBy = createdBy;
            this.ModifiedBy = modifiedBy;
            this.Company = company;
            this.CreatedByUser = createdByUser;
            this.ModifiedByUser = modifiedByUser;
            this.Gallery = gallery;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", IsRequired = true, EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDate
        /// </summary>
        [DataMember(Name = "documentDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime DocumentDate { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSerial
        /// </summary>
        [DataMember(Name = "documentSerial", EmitDefaultValue = true)]
        public string DocumentSerial { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name = "contactName", EmitDefaultValue = true)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets ContactTaxId
        /// </summary>
        [DataMember(Name = "contactTaxId", EmitDefaultValue = true)]
        public string ContactTaxId { get; set; }

        /// <summary>
        /// Gets or Sets ContactBranch
        /// </summary>
        [DataMember(Name = "contactBranch", EmitDefaultValue = true)]
        public string ContactBranch { get; set; }

        /// <summary>
        /// Gets or Sets IsDelete
        /// </summary>
        [DataMember(Name = "isDelete", EmitDefaultValue = true)]
        public bool IsDelete { get; set; }

        /// <summary>
        /// Gets or Sets GalleryId
        /// </summary>
        [DataMember(Name = "galleryId", EmitDefaultValue = true)]
        public long? GalleryId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceDocumentId
        /// </summary>
        [DataMember(Name = "referenceDocumentId", EmitDefaultValue = false)]
        public long ReferenceDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public long CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name = "modifiedBy", EmitDefaultValue = false)]
        public long ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name = "modifiedOn", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public OneOfCompany Company { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUser
        /// </summary>
        [DataMember(Name = "createdByUser", EmitDefaultValue = true)]
        public OneOfUser CreatedByUser { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedByUser
        /// </summary>
        [DataMember(Name = "modifiedByUser", EmitDefaultValue = true)]
        public OneOfUser ModifiedByUser { get; set; }

        /// <summary>
        /// Gets or Sets Gallery
        /// </summary>
        [DataMember(Name = "gallery", EmitDefaultValue = true)]
        public OneOfGallery Gallery { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupplierInvoice {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  DocumentSerial: ").Append(DocumentSerial).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactTaxId: ").Append(ContactTaxId).Append("\n");
            sb.Append("  ContactBranch: ").Append(ContactBranch).Append("\n");
            sb.Append("  IsDelete: ").Append(IsDelete).Append("\n");
            sb.Append("  GalleryId: ").Append(GalleryId).Append("\n");
            sb.Append("  ReferenceDocumentId: ").Append(ReferenceDocumentId).Append("\n");
            sb.Append("  ReferenceDocumentType: ").Append(ReferenceDocumentType).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  ModifiedByUser: ").Append(ModifiedByUser).Append("\n");
            sb.Append("  Gallery: ").Append(Gallery).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupplierInvoice);
        }

        /// <summary>
        /// Returns true if SupplierInvoice instances are equal
        /// </summary>
        /// <param name="input">Instance of SupplierInvoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupplierInvoice input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.DocumentDate == input.DocumentDate ||
                    (this.DocumentDate != null &&
                    this.DocumentDate.Equals(input.DocumentDate))
                ) && 
                (
                    this.DocumentSerial == input.DocumentSerial ||
                    (this.DocumentSerial != null &&
                    this.DocumentSerial.Equals(input.DocumentSerial))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactTaxId == input.ContactTaxId ||
                    (this.ContactTaxId != null &&
                    this.ContactTaxId.Equals(input.ContactTaxId))
                ) && 
                (
                    this.ContactBranch == input.ContactBranch ||
                    (this.ContactBranch != null &&
                    this.ContactBranch.Equals(input.ContactBranch))
                ) && 
                (
                    this.IsDelete == input.IsDelete ||
                    this.IsDelete.Equals(input.IsDelete)
                ) && 
                (
                    this.GalleryId == input.GalleryId ||
                    (this.GalleryId != null &&
                    this.GalleryId.Equals(input.GalleryId))
                ) && 
                (
                    this.ReferenceDocumentId == input.ReferenceDocumentId ||
                    this.ReferenceDocumentId.Equals(input.ReferenceDocumentId)
                ) && 
                (
                    this.ReferenceDocumentType == input.ReferenceDocumentType ||
                    this.ReferenceDocumentType.Equals(input.ReferenceDocumentType)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                ) && 
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    this.ModifiedBy.Equals(input.ModifiedBy)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.ModifiedByUser == input.ModifiedByUser ||
                    (this.ModifiedByUser != null &&
                    this.ModifiedByUser.Equals(input.ModifiedByUser))
                ) && 
                (
                    this.Gallery == input.Gallery ||
                    (this.Gallery != null &&
                    this.Gallery.Equals(input.Gallery))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.DocumentDate != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentDate.GetHashCode();
                }
                if (this.DocumentSerial != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentSerial.GetHashCode();
                }
                if (this.ContactName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactName.GetHashCode();
                }
                if (this.ContactTaxId != null)
                {
                    hashCode = (hashCode * 59) + this.ContactTaxId.GetHashCode();
                }
                if (this.ContactBranch != null)
                {
                    hashCode = (hashCode * 59) + this.ContactBranch.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDelete.GetHashCode();
                if (this.GalleryId != null)
                {
                    hashCode = (hashCode * 59) + this.GalleryId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReferenceDocumentId.GetHashCode();
                hashCode = (hashCode * 59) + this.ReferenceDocumentType.GetHashCode();
                hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifiedBy.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.CreatedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedByUser.GetHashCode();
                }
                if (this.ModifiedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedByUser.GetHashCode();
                }
                if (this.Gallery != null)
                {
                    hashCode = (hashCode * 59) + this.Gallery.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // DocumentDate (DateTime) minLength
            if (this.DocumentDate != null && this.DocumentDate.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentDate, length must be greater than 1.", new [] { "DocumentDate" });
            }

            // CreatedOn (DateTime) minLength
            if (this.CreatedOn != null && this.CreatedOn.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedOn, length must be greater than 1.", new [] { "CreatedOn" });
            }

            // ModifiedOn (DateTime) minLength
            if (this.ModifiedOn != null && this.ModifiedOn.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifiedOn, length must be greater than 1.", new [] { "ModifiedOn" });
            }

            yield break;
        }
    }

}

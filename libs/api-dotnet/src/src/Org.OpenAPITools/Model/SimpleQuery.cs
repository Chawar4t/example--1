/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SimpleQuery
    /// </summary>
    [DataContract(Name = "SimpleQuery")]
    public partial class SimpleQuery : IEquatable<SimpleQuery>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DateType
        /// </summary>
        [DataMember(Name = "dateType", EmitDefaultValue = false)]
        public DateType? DateType { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name = "range", EmitDefaultValue = false)]
        public DataRange? Range { get; set; }

        /// <summary>
        /// Gets or Sets ReportType
        /// </summary>
        [DataMember(Name = "reportType", EmitDefaultValue = false)]
        public ReportTypes? ReportType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleQuery" /> class.
        /// </summary>
        /// <param name="pageSize">pageSize.</param>
        /// <param name="currentPage">currentPage.</param>
        /// <param name="totalRecords">totalRecords.</param>
        /// <param name="dateType">dateType.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="day">day.</param>
        /// <param name="month">month.</param>
        /// <param name="year">year.</param>
        /// <param name="range">range.</param>
        /// <param name="isFirstCurrent">isFirstCurrent.</param>
        /// <param name="hashTags">hashTags.</param>
        /// <param name="reportType">reportType.</param>
        /// <param name="filter">filter.</param>
        /// <param name="sortBy">sortBy.</param>
        public SimpleQuery(int? pageSize = default(int?), int? currentPage = default(int?), int totalRecords = default(int), DateType? dateType = default(DateType?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int day = default(int), int month = default(int), int year = default(int), DataRange? range = default(DataRange?), int isFirstCurrent = default(int), List<string> hashTags = default(List<string>), ReportTypes? reportType = default(ReportTypes?), List<FilterOptions> filter = default(List<FilterOptions>), List<SortOptions> sortBy = default(List<SortOptions>))
        {
            this.PageSize = pageSize;
            this.CurrentPage = currentPage;
            this.TotalRecords = totalRecords;
            this.DateType = dateType;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Day = day;
            this.Month = month;
            this.Year = year;
            this.Range = range;
            this.IsFirstCurrent = isFirstCurrent;
            this.HashTags = hashTags;
            this.ReportType = reportType;
            this.Filter = filter;
            this.SortBy = sortBy;
        }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name = "pageSize", EmitDefaultValue = true)]
        public int? PageSize { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPage
        /// </summary>
        [DataMember(Name = "currentPage", EmitDefaultValue = true)]
        public int? CurrentPage { get; set; }

        /// <summary>
        /// Gets or Sets TotalRecords
        /// </summary>
        [DataMember(Name = "totalRecords", EmitDefaultValue = false)]
        public int TotalRecords { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Day
        /// </summary>
        [DataMember(Name = "day", EmitDefaultValue = false)]
        public int Day { get; set; }

        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name = "month", EmitDefaultValue = false)]
        public int Month { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets IsFirstCurrent
        /// </summary>
        [DataMember(Name = "isFirstCurrent", EmitDefaultValue = false)]
        public int IsFirstCurrent { get; set; }

        /// <summary>
        /// Gets or Sets HashTags
        /// </summary>
        [DataMember(Name = "hashTags", EmitDefaultValue = true)]
        public List<string> HashTags { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = true)]
        public List<FilterOptions> Filter { get; set; }

        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        [DataMember(Name = "sortBy", EmitDefaultValue = true)]
        public List<SortOptions> SortBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimpleQuery {\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  TotalRecords: ").Append(TotalRecords).Append("\n");
            sb.Append("  DateType: ").Append(DateType).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  IsFirstCurrent: ").Append(IsFirstCurrent).Append("\n");
            sb.Append("  HashTags: ").Append(HashTags).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimpleQuery);
        }

        /// <summary>
        /// Returns true if SimpleQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of SimpleQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimpleQuery input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.CurrentPage == input.CurrentPage ||
                    (this.CurrentPage != null &&
                    this.CurrentPage.Equals(input.CurrentPage))
                ) && 
                (
                    this.TotalRecords == input.TotalRecords ||
                    this.TotalRecords.Equals(input.TotalRecords)
                ) && 
                (
                    this.DateType == input.DateType ||
                    this.DateType.Equals(input.DateType)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Day == input.Day ||
                    this.Day.Equals(input.Day)
                ) && 
                (
                    this.Month == input.Month ||
                    this.Month.Equals(input.Month)
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.Range == input.Range ||
                    this.Range.Equals(input.Range)
                ) && 
                (
                    this.IsFirstCurrent == input.IsFirstCurrent ||
                    this.IsFirstCurrent.Equals(input.IsFirstCurrent)
                ) && 
                (
                    this.HashTags == input.HashTags ||
                    this.HashTags != null &&
                    input.HashTags != null &&
                    this.HashTags.SequenceEqual(input.HashTags)
                ) && 
                (
                    this.ReportType == input.ReportType ||
                    this.ReportType.Equals(input.ReportType)
                ) && 
                (
                    this.Filter == input.Filter ||
                    this.Filter != null &&
                    input.Filter != null &&
                    this.Filter.SequenceEqual(input.Filter)
                ) && 
                (
                    this.SortBy == input.SortBy ||
                    this.SortBy != null &&
                    input.SortBy != null &&
                    this.SortBy.SequenceEqual(input.SortBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PageSize != null)
                {
                    hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                }
                if (this.CurrentPage != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentPage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalRecords.GetHashCode();
                hashCode = (hashCode * 59) + this.DateType.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Day.GetHashCode();
                hashCode = (hashCode * 59) + this.Month.GetHashCode();
                hashCode = (hashCode * 59) + this.Year.GetHashCode();
                hashCode = (hashCode * 59) + this.Range.GetHashCode();
                hashCode = (hashCode * 59) + this.IsFirstCurrent.GetHashCode();
                if (this.HashTags != null)
                {
                    hashCode = (hashCode * 59) + this.HashTags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReportType.GetHashCode();
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.SortBy != null)
                {
                    hashCode = (hashCode * 59) + this.SortBy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

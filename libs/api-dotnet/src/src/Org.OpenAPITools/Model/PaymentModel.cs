/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PaymentModel
    /// </summary>
    [DataContract(Name = "PaymentModel")]
    public partial class PaymentModel : IEquatable<PaymentModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = false)]
        public PaymentMethod? PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets WithholdingTaxIncomeType
        /// </summary>
        [DataMember(Name = "withholdingTaxIncomeType", EmitDefaultValue = false)]
        public IncomeType? WithholdingTaxIncomeType { get; set; }

        /// <summary>
        /// Gets or Sets WithholdingTaxEntity
        /// </summary>
        [DataMember(Name = "withholdingTaxEntity", EmitDefaultValue = false)]
        public Entity? WithholdingTaxEntity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentModel" /> class.
        /// </summary>
        /// <param name="cashRemarks">cashRemarks.</param>
        /// <param name="excludeVat">excludeVat.</param>
        /// <param name="cashTax">cashTax.</param>
        /// <param name="creditCardNumber">creditCardNumber.</param>
        /// <param name="companyVatRate">companyVatRate.</param>
        /// <param name="net">net.</param>
        /// <param name="bankAccountNumber">bankAccountNumber.</param>
        /// <param name="bankAccountId">bankAccountId.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="dateNow">dateNow.</param>
        /// <param name="amountCollected">amountCollected.</param>
        /// <param name="amountWithheld">amountWithheld.</param>
        /// <param name="withholdingTax">withholdingTax.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="transferBankAccountId">transferBankAccountId.</param>
        /// <param name="bankAccountCreditCardId">bankAccountCreditCardId.</param>
        /// <param name="charge">charge.</param>
        /// <param name="chequeDate">chequeDate.</param>
        /// <param name="chequeNumber">chequeNumber.</param>
        /// <param name="chequeBankAccountId">chequeBankAccountId.</param>
        /// <param name="creditCardBankAccountId">creditCardBankAccountId.</param>
        /// <param name="remainingCollected">remainingCollected.</param>
        /// <param name="remainingCollectedType">remainingCollectedType.</param>
        /// <param name="deductionAmount">deductionAmount.</param>
        /// <param name="paymentDeductionType">paymentDeductionType.</param>
        /// <param name="pettyCashName">pettyCashName.</param>
        /// <param name="pettyCashId">pettyCashId.</param>
        /// <param name="chequeId">chequeId.</param>
        /// <param name="creditCardId">creditCardId.</param>
        /// <param name="otherChannelId">otherChannelId.</param>
        /// <param name="chequeDepositDate">chequeDepositDate.</param>
        /// <param name="chequeDepositBankId">chequeDepositBankId.</param>
        /// <param name="chequeCashingDate">chequeCashingDate.</param>
        /// <param name="autoCreateWithholdingTax">autoCreateWithholdingTax.</param>
        /// <param name="withholdingTaxIncomeType">withholdingTaxIncomeType.</param>
        /// <param name="withholdingTaxIncomeDescription">withholdingTaxIncomeDescription.</param>
        /// <param name="withholdingTaxEntity">withholdingTaxEntity.</param>
        /// <param name="exchangeRateFee">exchangeRateFee.</param>
        public PaymentModel(string cashRemarks = default(string), double excludeVat = default(double), int cashTax = default(int), string creditCardNumber = default(string), int companyVatRate = default(int), decimal net = default(decimal), string bankAccountNumber = default(string), long? bankAccountId = default(long?), PaymentMethod? paymentMethod = default(PaymentMethod?), DateTime dateNow = default(DateTime), decimal amountCollected = default(decimal), decimal amountWithheld = default(decimal), decimal? withholdingTax = default(decimal?), string remarks = default(string), int? transferBankAccountId = default(int?), int? bankAccountCreditCardId = default(int?), decimal charge = default(decimal), DateTime? chequeDate = default(DateTime?), string chequeNumber = default(string), string chequeBankAccountId = default(string), string creditCardBankAccountId = default(string), decimal? remainingCollected = default(decimal?), OneOfRemainingCollectedType remainingCollectedType = default(OneOfRemainingCollectedType), decimal? deductionAmount = default(decimal?), OneOfDeductionType paymentDeductionType = default(OneOfDeductionType), string pettyCashName = default(string), long? pettyCashId = default(long?), long? chequeId = default(long?), long? creditCardId = default(long?), long? otherChannelId = default(long?), DateTime? chequeDepositDate = default(DateTime?), long? chequeDepositBankId = default(long?), DateTime? chequeCashingDate = default(DateTime?), bool autoCreateWithholdingTax = default(bool), IncomeType? withholdingTaxIncomeType = default(IncomeType?), string withholdingTaxIncomeDescription = default(string), Entity? withholdingTaxEntity = default(Entity?), decimal? exchangeRateFee = default(decimal?))
        {
            this.CashRemarks = cashRemarks;
            this.ExcludeVat = excludeVat;
            this.CashTax = cashTax;
            this.CreditCardNumber = creditCardNumber;
            this.CompanyVatRate = companyVatRate;
            this.Net = net;
            this.BankAccountNumber = bankAccountNumber;
            this.BankAccountId = bankAccountId;
            this.PaymentMethod = paymentMethod;
            this.DateNow = dateNow;
            this.AmountCollected = amountCollected;
            this.AmountWithheld = amountWithheld;
            this.WithholdingTax = withholdingTax;
            this.Remarks = remarks;
            this.TransferBankAccountId = transferBankAccountId;
            this.BankAccountCreditCardId = bankAccountCreditCardId;
            this.Charge = charge;
            this.ChequeDate = chequeDate;
            this.ChequeNumber = chequeNumber;
            this.ChequeBankAccountId = chequeBankAccountId;
            this.CreditCardBankAccountId = creditCardBankAccountId;
            this.RemainingCollected = remainingCollected;
            this.RemainingCollectedType = remainingCollectedType;
            this.DeductionAmount = deductionAmount;
            this.PaymentDeductionType = paymentDeductionType;
            this.PettyCashName = pettyCashName;
            this.PettyCashId = pettyCashId;
            this.ChequeId = chequeId;
            this.CreditCardId = creditCardId;
            this.OtherChannelId = otherChannelId;
            this.ChequeDepositDate = chequeDepositDate;
            this.ChequeDepositBankId = chequeDepositBankId;
            this.ChequeCashingDate = chequeCashingDate;
            this.AutoCreateWithholdingTax = autoCreateWithholdingTax;
            this.WithholdingTaxIncomeType = withholdingTaxIncomeType;
            this.WithholdingTaxIncomeDescription = withholdingTaxIncomeDescription;
            this.WithholdingTaxEntity = withholdingTaxEntity;
            this.ExchangeRateFee = exchangeRateFee;
        }

        /// <summary>
        /// Gets or Sets CashRemarks
        /// </summary>
        [DataMember(Name = "cashRemarks", EmitDefaultValue = true)]
        public string CashRemarks { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeVat
        /// </summary>
        [DataMember(Name = "excludeVat", EmitDefaultValue = false)]
        public double ExcludeVat { get; set; }

        /// <summary>
        /// Gets or Sets CashTax
        /// </summary>
        [DataMember(Name = "cashTax", EmitDefaultValue = false)]
        public int CashTax { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardNumber
        /// </summary>
        [DataMember(Name = "creditCardNumber", EmitDefaultValue = true)]
        public string CreditCardNumber { get; set; }

        /// <summary>
        /// Gets or Sets CompanyVatRate
        /// </summary>
        [DataMember(Name = "companyVatRate", EmitDefaultValue = false)]
        public int CompanyVatRate { get; set; }

        /// <summary>
        /// Gets or Sets Net
        /// </summary>
        [DataMember(Name = "net", EmitDefaultValue = false)]
        public decimal Net { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountNumber
        /// </summary>
        [DataMember(Name = "bankAccountNumber", EmitDefaultValue = true)]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountId
        /// </summary>
        [DataMember(Name = "bankAccountId", EmitDefaultValue = true)]
        public long? BankAccountId { get; set; }

        /// <summary>
        /// Gets or Sets DateNow
        /// </summary>
        [DataMember(Name = "dateNow", EmitDefaultValue = false)]
        public DateTime DateNow { get; set; }

        /// <summary>
        /// Gets or Sets AmountCollected
        /// </summary>
        [DataMember(Name = "amountCollected", EmitDefaultValue = false)]
        public decimal AmountCollected { get; set; }

        /// <summary>
        /// Gets or Sets AmountWithheld
        /// </summary>
        [DataMember(Name = "amountWithheld", EmitDefaultValue = false)]
        public decimal AmountWithheld { get; set; }

        /// <summary>
        /// Gets or Sets WithholdingTax
        /// </summary>
        [DataMember(Name = "withholdingTax", EmitDefaultValue = true)]
        public decimal? WithholdingTax { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name = "remarks", EmitDefaultValue = true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets TransferBankAccountId
        /// </summary>
        [DataMember(Name = "transferBankAccountId", EmitDefaultValue = true)]
        public int? TransferBankAccountId { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountCreditCardId
        /// </summary>
        [DataMember(Name = "bankAccountCreditCardId", EmitDefaultValue = true)]
        public int? BankAccountCreditCardId { get; set; }

        /// <summary>
        /// Gets or Sets Charge
        /// </summary>
        [DataMember(Name = "charge", EmitDefaultValue = false)]
        public decimal Charge { get; set; }

        /// <summary>
        /// Gets or Sets ChequeDate
        /// </summary>
        [DataMember(Name = "chequeDate", EmitDefaultValue = true)]
        public DateTime? ChequeDate { get; set; }

        /// <summary>
        /// Gets or Sets ChequeNumber
        /// </summary>
        [DataMember(Name = "chequeNumber", EmitDefaultValue = true)]
        public string ChequeNumber { get; set; }

        /// <summary>
        /// Gets or Sets ChequeBankAccountId
        /// </summary>
        [DataMember(Name = "chequeBankAccountId", EmitDefaultValue = true)]
        public string ChequeBankAccountId { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardBankAccountId
        /// </summary>
        [DataMember(Name = "creditCardBankAccountId", EmitDefaultValue = true)]
        public string CreditCardBankAccountId { get; set; }

        /// <summary>
        /// Gets or Sets RemainingCollected
        /// </summary>
        [DataMember(Name = "remainingCollected", EmitDefaultValue = true)]
        public decimal? RemainingCollected { get; set; }

        /// <summary>
        /// Gets or Sets RemainingCollectedType
        /// </summary>
        [DataMember(Name = "remainingCollectedType", EmitDefaultValue = true)]
        public OneOfRemainingCollectedType RemainingCollectedType { get; set; }

        /// <summary>
        /// Gets or Sets DeductionAmount
        /// </summary>
        [DataMember(Name = "deductionAmount", EmitDefaultValue = true)]
        public decimal? DeductionAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDeductionType
        /// </summary>
        [DataMember(Name = "paymentDeductionType", EmitDefaultValue = true)]
        public OneOfDeductionType PaymentDeductionType { get; set; }

        /// <summary>
        /// Gets or Sets PettyCashName
        /// </summary>
        [DataMember(Name = "pettyCashName", EmitDefaultValue = true)]
        public string PettyCashName { get; set; }

        /// <summary>
        /// Gets or Sets PettyCashId
        /// </summary>
        [DataMember(Name = "pettyCashId", EmitDefaultValue = true)]
        public long? PettyCashId { get; set; }

        /// <summary>
        /// Gets or Sets ChequeId
        /// </summary>
        [DataMember(Name = "chequeId", EmitDefaultValue = true)]
        public long? ChequeId { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardId
        /// </summary>
        [DataMember(Name = "creditCardId", EmitDefaultValue = true)]
        public long? CreditCardId { get; set; }

        /// <summary>
        /// Gets or Sets OtherChannelId
        /// </summary>
        [DataMember(Name = "otherChannelId", EmitDefaultValue = true)]
        public long? OtherChannelId { get; set; }

        /// <summary>
        /// Gets or Sets ChequeDepositDate
        /// </summary>
        [DataMember(Name = "chequeDepositDate", EmitDefaultValue = true)]
        public DateTime? ChequeDepositDate { get; set; }

        /// <summary>
        /// Gets or Sets ChequeDepositBankId
        /// </summary>
        [DataMember(Name = "chequeDepositBankId", EmitDefaultValue = true)]
        public long? ChequeDepositBankId { get; set; }

        /// <summary>
        /// Gets or Sets ChequeCashingDate
        /// </summary>
        [DataMember(Name = "chequeCashingDate", EmitDefaultValue = true)]
        public DateTime? ChequeCashingDate { get; set; }

        /// <summary>
        /// Gets or Sets AutoCreateWithholdingTax
        /// </summary>
        [DataMember(Name = "autoCreateWithholdingTax", EmitDefaultValue = true)]
        public bool AutoCreateWithholdingTax { get; set; }

        /// <summary>
        /// Gets or Sets WithholdingTaxIncomeDescription
        /// </summary>
        [DataMember(Name = "withholdingTaxIncomeDescription", EmitDefaultValue = true)]
        public string WithholdingTaxIncomeDescription { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRateFee
        /// </summary>
        [DataMember(Name = "exchangeRateFee", EmitDefaultValue = true)]
        public decimal? ExchangeRateFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentModel {\n");
            sb.Append("  CashRemarks: ").Append(CashRemarks).Append("\n");
            sb.Append("  ExcludeVat: ").Append(ExcludeVat).Append("\n");
            sb.Append("  CashTax: ").Append(CashTax).Append("\n");
            sb.Append("  CreditCardNumber: ").Append(CreditCardNumber).Append("\n");
            sb.Append("  CompanyVatRate: ").Append(CompanyVatRate).Append("\n");
            sb.Append("  Net: ").Append(Net).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  BankAccountId: ").Append(BankAccountId).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  DateNow: ").Append(DateNow).Append("\n");
            sb.Append("  AmountCollected: ").Append(AmountCollected).Append("\n");
            sb.Append("  AmountWithheld: ").Append(AmountWithheld).Append("\n");
            sb.Append("  WithholdingTax: ").Append(WithholdingTax).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  TransferBankAccountId: ").Append(TransferBankAccountId).Append("\n");
            sb.Append("  BankAccountCreditCardId: ").Append(BankAccountCreditCardId).Append("\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("  ChequeDate: ").Append(ChequeDate).Append("\n");
            sb.Append("  ChequeNumber: ").Append(ChequeNumber).Append("\n");
            sb.Append("  ChequeBankAccountId: ").Append(ChequeBankAccountId).Append("\n");
            sb.Append("  CreditCardBankAccountId: ").Append(CreditCardBankAccountId).Append("\n");
            sb.Append("  RemainingCollected: ").Append(RemainingCollected).Append("\n");
            sb.Append("  RemainingCollectedType: ").Append(RemainingCollectedType).Append("\n");
            sb.Append("  DeductionAmount: ").Append(DeductionAmount).Append("\n");
            sb.Append("  PaymentDeductionType: ").Append(PaymentDeductionType).Append("\n");
            sb.Append("  PettyCashName: ").Append(PettyCashName).Append("\n");
            sb.Append("  PettyCashId: ").Append(PettyCashId).Append("\n");
            sb.Append("  ChequeId: ").Append(ChequeId).Append("\n");
            sb.Append("  CreditCardId: ").Append(CreditCardId).Append("\n");
            sb.Append("  OtherChannelId: ").Append(OtherChannelId).Append("\n");
            sb.Append("  ChequeDepositDate: ").Append(ChequeDepositDate).Append("\n");
            sb.Append("  ChequeDepositBankId: ").Append(ChequeDepositBankId).Append("\n");
            sb.Append("  ChequeCashingDate: ").Append(ChequeCashingDate).Append("\n");
            sb.Append("  AutoCreateWithholdingTax: ").Append(AutoCreateWithholdingTax).Append("\n");
            sb.Append("  WithholdingTaxIncomeType: ").Append(WithholdingTaxIncomeType).Append("\n");
            sb.Append("  WithholdingTaxIncomeDescription: ").Append(WithholdingTaxIncomeDescription).Append("\n");
            sb.Append("  WithholdingTaxEntity: ").Append(WithholdingTaxEntity).Append("\n");
            sb.Append("  ExchangeRateFee: ").Append(ExchangeRateFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentModel);
        }

        /// <summary>
        /// Returns true if PaymentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CashRemarks == input.CashRemarks ||
                    (this.CashRemarks != null &&
                    this.CashRemarks.Equals(input.CashRemarks))
                ) && 
                (
                    this.ExcludeVat == input.ExcludeVat ||
                    this.ExcludeVat.Equals(input.ExcludeVat)
                ) && 
                (
                    this.CashTax == input.CashTax ||
                    this.CashTax.Equals(input.CashTax)
                ) && 
                (
                    this.CreditCardNumber == input.CreditCardNumber ||
                    (this.CreditCardNumber != null &&
                    this.CreditCardNumber.Equals(input.CreditCardNumber))
                ) && 
                (
                    this.CompanyVatRate == input.CompanyVatRate ||
                    this.CompanyVatRate.Equals(input.CompanyVatRate)
                ) && 
                (
                    this.Net == input.Net ||
                    this.Net.Equals(input.Net)
                ) && 
                (
                    this.BankAccountNumber == input.BankAccountNumber ||
                    (this.BankAccountNumber != null &&
                    this.BankAccountNumber.Equals(input.BankAccountNumber))
                ) && 
                (
                    this.BankAccountId == input.BankAccountId ||
                    (this.BankAccountId != null &&
                    this.BankAccountId.Equals(input.BankAccountId))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    this.PaymentMethod.Equals(input.PaymentMethod)
                ) && 
                (
                    this.DateNow == input.DateNow ||
                    (this.DateNow != null &&
                    this.DateNow.Equals(input.DateNow))
                ) && 
                (
                    this.AmountCollected == input.AmountCollected ||
                    this.AmountCollected.Equals(input.AmountCollected)
                ) && 
                (
                    this.AmountWithheld == input.AmountWithheld ||
                    this.AmountWithheld.Equals(input.AmountWithheld)
                ) && 
                (
                    this.WithholdingTax == input.WithholdingTax ||
                    (this.WithholdingTax != null &&
                    this.WithholdingTax.Equals(input.WithholdingTax))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.TransferBankAccountId == input.TransferBankAccountId ||
                    (this.TransferBankAccountId != null &&
                    this.TransferBankAccountId.Equals(input.TransferBankAccountId))
                ) && 
                (
                    this.BankAccountCreditCardId == input.BankAccountCreditCardId ||
                    (this.BankAccountCreditCardId != null &&
                    this.BankAccountCreditCardId.Equals(input.BankAccountCreditCardId))
                ) && 
                (
                    this.Charge == input.Charge ||
                    this.Charge.Equals(input.Charge)
                ) && 
                (
                    this.ChequeDate == input.ChequeDate ||
                    (this.ChequeDate != null &&
                    this.ChequeDate.Equals(input.ChequeDate))
                ) && 
                (
                    this.ChequeNumber == input.ChequeNumber ||
                    (this.ChequeNumber != null &&
                    this.ChequeNumber.Equals(input.ChequeNumber))
                ) && 
                (
                    this.ChequeBankAccountId == input.ChequeBankAccountId ||
                    (this.ChequeBankAccountId != null &&
                    this.ChequeBankAccountId.Equals(input.ChequeBankAccountId))
                ) && 
                (
                    this.CreditCardBankAccountId == input.CreditCardBankAccountId ||
                    (this.CreditCardBankAccountId != null &&
                    this.CreditCardBankAccountId.Equals(input.CreditCardBankAccountId))
                ) && 
                (
                    this.RemainingCollected == input.RemainingCollected ||
                    (this.RemainingCollected != null &&
                    this.RemainingCollected.Equals(input.RemainingCollected))
                ) && 
                (
                    this.RemainingCollectedType == input.RemainingCollectedType ||
                    (this.RemainingCollectedType != null &&
                    this.RemainingCollectedType.Equals(input.RemainingCollectedType))
                ) && 
                (
                    this.DeductionAmount == input.DeductionAmount ||
                    (this.DeductionAmount != null &&
                    this.DeductionAmount.Equals(input.DeductionAmount))
                ) && 
                (
                    this.PaymentDeductionType == input.PaymentDeductionType ||
                    (this.PaymentDeductionType != null &&
                    this.PaymentDeductionType.Equals(input.PaymentDeductionType))
                ) && 
                (
                    this.PettyCashName == input.PettyCashName ||
                    (this.PettyCashName != null &&
                    this.PettyCashName.Equals(input.PettyCashName))
                ) && 
                (
                    this.PettyCashId == input.PettyCashId ||
                    (this.PettyCashId != null &&
                    this.PettyCashId.Equals(input.PettyCashId))
                ) && 
                (
                    this.ChequeId == input.ChequeId ||
                    (this.ChequeId != null &&
                    this.ChequeId.Equals(input.ChequeId))
                ) && 
                (
                    this.CreditCardId == input.CreditCardId ||
                    (this.CreditCardId != null &&
                    this.CreditCardId.Equals(input.CreditCardId))
                ) && 
                (
                    this.OtherChannelId == input.OtherChannelId ||
                    (this.OtherChannelId != null &&
                    this.OtherChannelId.Equals(input.OtherChannelId))
                ) && 
                (
                    this.ChequeDepositDate == input.ChequeDepositDate ||
                    (this.ChequeDepositDate != null &&
                    this.ChequeDepositDate.Equals(input.ChequeDepositDate))
                ) && 
                (
                    this.ChequeDepositBankId == input.ChequeDepositBankId ||
                    (this.ChequeDepositBankId != null &&
                    this.ChequeDepositBankId.Equals(input.ChequeDepositBankId))
                ) && 
                (
                    this.ChequeCashingDate == input.ChequeCashingDate ||
                    (this.ChequeCashingDate != null &&
                    this.ChequeCashingDate.Equals(input.ChequeCashingDate))
                ) && 
                (
                    this.AutoCreateWithholdingTax == input.AutoCreateWithholdingTax ||
                    this.AutoCreateWithholdingTax.Equals(input.AutoCreateWithholdingTax)
                ) && 
                (
                    this.WithholdingTaxIncomeType == input.WithholdingTaxIncomeType ||
                    this.WithholdingTaxIncomeType.Equals(input.WithholdingTaxIncomeType)
                ) && 
                (
                    this.WithholdingTaxIncomeDescription == input.WithholdingTaxIncomeDescription ||
                    (this.WithholdingTaxIncomeDescription != null &&
                    this.WithholdingTaxIncomeDescription.Equals(input.WithholdingTaxIncomeDescription))
                ) && 
                (
                    this.WithholdingTaxEntity == input.WithholdingTaxEntity ||
                    this.WithholdingTaxEntity.Equals(input.WithholdingTaxEntity)
                ) && 
                (
                    this.ExchangeRateFee == input.ExchangeRateFee ||
                    (this.ExchangeRateFee != null &&
                    this.ExchangeRateFee.Equals(input.ExchangeRateFee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CashRemarks != null)
                {
                    hashCode = (hashCode * 59) + this.CashRemarks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExcludeVat.GetHashCode();
                hashCode = (hashCode * 59) + this.CashTax.GetHashCode();
                if (this.CreditCardNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CreditCardNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CompanyVatRate.GetHashCode();
                hashCode = (hashCode * 59) + this.Net.GetHashCode();
                if (this.BankAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountNumber.GetHashCode();
                }
                if (this.BankAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                if (this.DateNow != null)
                {
                    hashCode = (hashCode * 59) + this.DateNow.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AmountCollected.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountWithheld.GetHashCode();
                if (this.WithholdingTax != null)
                {
                    hashCode = (hashCode * 59) + this.WithholdingTax.GetHashCode();
                }
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                if (this.TransferBankAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.TransferBankAccountId.GetHashCode();
                }
                if (this.BankAccountCreditCardId != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountCreditCardId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Charge.GetHashCode();
                if (this.ChequeDate != null)
                {
                    hashCode = (hashCode * 59) + this.ChequeDate.GetHashCode();
                }
                if (this.ChequeNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ChequeNumber.GetHashCode();
                }
                if (this.ChequeBankAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.ChequeBankAccountId.GetHashCode();
                }
                if (this.CreditCardBankAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.CreditCardBankAccountId.GetHashCode();
                }
                if (this.RemainingCollected != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingCollected.GetHashCode();
                }
                if (this.RemainingCollectedType != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingCollectedType.GetHashCode();
                }
                if (this.DeductionAmount != null)
                {
                    hashCode = (hashCode * 59) + this.DeductionAmount.GetHashCode();
                }
                if (this.PaymentDeductionType != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDeductionType.GetHashCode();
                }
                if (this.PettyCashName != null)
                {
                    hashCode = (hashCode * 59) + this.PettyCashName.GetHashCode();
                }
                if (this.PettyCashId != null)
                {
                    hashCode = (hashCode * 59) + this.PettyCashId.GetHashCode();
                }
                if (this.ChequeId != null)
                {
                    hashCode = (hashCode * 59) + this.ChequeId.GetHashCode();
                }
                if (this.CreditCardId != null)
                {
                    hashCode = (hashCode * 59) + this.CreditCardId.GetHashCode();
                }
                if (this.OtherChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.OtherChannelId.GetHashCode();
                }
                if (this.ChequeDepositDate != null)
                {
                    hashCode = (hashCode * 59) + this.ChequeDepositDate.GetHashCode();
                }
                if (this.ChequeDepositBankId != null)
                {
                    hashCode = (hashCode * 59) + this.ChequeDepositBankId.GetHashCode();
                }
                if (this.ChequeCashingDate != null)
                {
                    hashCode = (hashCode * 59) + this.ChequeCashingDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoCreateWithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.WithholdingTaxIncomeType.GetHashCode();
                if (this.WithholdingTaxIncomeDescription != null)
                {
                    hashCode = (hashCode * 59) + this.WithholdingTaxIncomeDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WithholdingTaxEntity.GetHashCode();
                if (this.ExchangeRateFee != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeRateFee.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

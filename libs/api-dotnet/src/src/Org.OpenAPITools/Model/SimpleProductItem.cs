/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SimpleProductItem
    /// </summary>
    [DataContract(Name = "SimpleProductItem")]
    public partial class SimpleProductItem : IEquatable<SimpleProductItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleProductItem" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="unitName">unitName.</param>
        /// <param name="pricePerUnit">pricePerUnit.</param>
        /// <param name="total">total.</param>
        /// <param name="sellChartOfAccountCode">sellChartOfAccountCode.</param>
        /// <param name="buyChartOfAccountCode">buyChartOfAccountCode.</param>
        /// <param name="productCode">productCode.</param>
        public SimpleProductItem(int type = default(int), string name = default(string), string description = default(string), decimal quantity = default(decimal), string unitName = default(string), decimal pricePerUnit = default(decimal), decimal total = default(decimal), string sellChartOfAccountCode = default(string), string buyChartOfAccountCode = default(string), string productCode = default(string))
        {
            this.Type = type;
            this.Name = name;
            this.Description = description;
            this.Quantity = quantity;
            this.UnitName = unitName;
            this.PricePerUnit = pricePerUnit;
            this.Total = total;
            this.SellChartOfAccountCode = sellChartOfAccountCode;
            this.BuyChartOfAccountCode = buyChartOfAccountCode;
            this.ProductCode = productCode;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public int Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// Gets or Sets UnitName
        /// </summary>
        [DataMember(Name = "unitName", EmitDefaultValue = true)]
        public string UnitName { get; set; }

        /// <summary>
        /// Gets or Sets PricePerUnit
        /// </summary>
        [DataMember(Name = "pricePerUnit", EmitDefaultValue = false)]
        public decimal PricePerUnit { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public decimal Total { get; set; }

        /// <summary>
        /// Gets or Sets SellChartOfAccountCode
        /// </summary>
        [DataMember(Name = "sellChartOfAccountCode", EmitDefaultValue = true)]
        public string SellChartOfAccountCode { get; set; }

        /// <summary>
        /// Gets or Sets BuyChartOfAccountCode
        /// </summary>
        [DataMember(Name = "buyChartOfAccountCode", EmitDefaultValue = true)]
        public string BuyChartOfAccountCode { get; set; }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name = "productCode", EmitDefaultValue = true)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimpleProductItem {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitName: ").Append(UnitName).Append("\n");
            sb.Append("  PricePerUnit: ").Append(PricePerUnit).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  SellChartOfAccountCode: ").Append(SellChartOfAccountCode).Append("\n");
            sb.Append("  BuyChartOfAccountCode: ").Append(BuyChartOfAccountCode).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimpleProductItem);
        }

        /// <summary>
        /// Returns true if SimpleProductItem instances are equal
        /// </summary>
        /// <param name="input">Instance of SimpleProductItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimpleProductItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.UnitName == input.UnitName ||
                    (this.UnitName != null &&
                    this.UnitName.Equals(input.UnitName))
                ) && 
                (
                    this.PricePerUnit == input.PricePerUnit ||
                    this.PricePerUnit.Equals(input.PricePerUnit)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.SellChartOfAccountCode == input.SellChartOfAccountCode ||
                    (this.SellChartOfAccountCode != null &&
                    this.SellChartOfAccountCode.Equals(input.SellChartOfAccountCode))
                ) && 
                (
                    this.BuyChartOfAccountCode == input.BuyChartOfAccountCode ||
                    (this.BuyChartOfAccountCode != null &&
                    this.BuyChartOfAccountCode.Equals(input.BuyChartOfAccountCode))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.UnitName != null)
                {
                    hashCode = (hashCode * 59) + this.UnitName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PricePerUnit.GetHashCode();
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                if (this.SellChartOfAccountCode != null)
                {
                    hashCode = (hashCode * 59) + this.SellChartOfAccountCode.GetHashCode();
                }
                if (this.BuyChartOfAccountCode != null)
                {
                    hashCode = (hashCode * 59) + this.BuyChartOfAccountCode.GetHashCode();
                }
                if (this.ProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

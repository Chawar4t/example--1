/*
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FiscalYear
    /// </summary>
    [DataContract(Name = "FiscalYear")]
    public partial class FiscalYear : IEquatable<FiscalYear>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public FiscalYearStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FiscalYear" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="companyId">companyId.</param>
        /// <param name="beginPeriod">beginPeriod.</param>
        /// <param name="endPeriod">endPeriod.</param>
        /// <param name="status">status.</param>
        /// <param name="closedOn">closedOn.</param>
        /// <param name="closedBy">closedBy.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="company">company.</param>
        public FiscalYear(long id = default(long), long companyId = default(long), DateTime beginPeriod = default(DateTime), DateTime endPeriod = default(DateTime), FiscalYearStatus? status = default(FiscalYearStatus?), DateTime? closedOn = default(DateTime?), long? closedBy = default(long?), DateTime createdOn = default(DateTime), OneOfCompany company = default(OneOfCompany))
        {
            this.Id = id;
            this.CompanyId = companyId;
            this.BeginPeriod = beginPeriod;
            this.EndPeriod = endPeriod;
            this.Status = status;
            this.ClosedOn = closedOn;
            this.ClosedBy = closedBy;
            this.CreatedOn = createdOn;
            this.Company = company;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "companyId", EmitDefaultValue = false)]
        public long CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets BeginPeriod
        /// </summary>
        [DataMember(Name = "beginPeriod", EmitDefaultValue = false)]
        public DateTime BeginPeriod { get; set; }

        /// <summary>
        /// Gets or Sets EndPeriod
        /// </summary>
        [DataMember(Name = "endPeriod", EmitDefaultValue = false)]
        public DateTime EndPeriod { get; set; }

        /// <summary>
        /// Gets or Sets ClosedOn
        /// </summary>
        [DataMember(Name = "closedOn", EmitDefaultValue = true)]
        public DateTime? ClosedOn { get; set; }

        /// <summary>
        /// Gets or Sets ClosedBy
        /// </summary>
        [DataMember(Name = "closedBy", EmitDefaultValue = true)]
        public long? ClosedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public OneOfCompany Company { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FiscalYear {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  BeginPeriod: ").Append(BeginPeriod).Append("\n");
            sb.Append("  EndPeriod: ").Append(EndPeriod).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ClosedOn: ").Append(ClosedOn).Append("\n");
            sb.Append("  ClosedBy: ").Append(ClosedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FiscalYear);
        }

        /// <summary>
        /// Returns true if FiscalYear instances are equal
        /// </summary>
        /// <param name="input">Instance of FiscalYear to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FiscalYear input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.BeginPeriod == input.BeginPeriod ||
                    (this.BeginPeriod != null &&
                    this.BeginPeriod.Equals(input.BeginPeriod))
                ) && 
                (
                    this.EndPeriod == input.EndPeriod ||
                    (this.EndPeriod != null &&
                    this.EndPeriod.Equals(input.EndPeriod))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ClosedOn == input.ClosedOn ||
                    (this.ClosedOn != null &&
                    this.ClosedOn.Equals(input.ClosedOn))
                ) && 
                (
                    this.ClosedBy == input.ClosedBy ||
                    (this.ClosedBy != null &&
                    this.ClosedBy.Equals(input.ClosedBy))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.BeginPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.BeginPeriod.GetHashCode();
                }
                if (this.EndPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.EndPeriod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.ClosedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedOn.GetHashCode();
                }
                if (this.ClosedBy != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedBy.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
